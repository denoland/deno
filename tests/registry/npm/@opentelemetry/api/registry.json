{"_id":"@opentelemetry/api","_rev":"85-64e171afc119bdc7344f39430efa3542","name":"@opentelemetry/api","description":"Public API for OpenTelemetry","dist-tags":{"canary":"0.17.1-alpha.21","rc":"1.0.0-rc.1","next":"1.3.0","latest":"1.9.0"},"versions":{"0.4.0":{"name":"@opentelemetry/api","version":"0.4.0","keywords":["opentelemetry","nodejs","browser","tracing","profiling","metrics","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.4.0","maintainers":[{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"dkhan","email":"daniel@khan.io"},{"name":"bg451","email":"brandon.gonzalez.451@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"mayurkale22","email":"mayurkale22@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"b430325c9f0b460600abbd4040b73feef878c123","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.4.0.tgz","fileCount":83,"integrity":"sha512-SWT1dx/fHMVmQpMmlHGrAHnpHeNqCC+e/MudmuF0lwqZVdF8u/8Fj8ZJSG3WJaq7OgGboJZEw7c0f5bnl/KqCA==","signatures":[{"sig":"MEYCIQD3bqsOJILmnEows9bwuMXD4vUXuyM7vczNC14nsMlX4gIhAM2jiS6fIH1zDQt7DLCzv6udB6CfoDZ5kNhVwufUsVZR","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":136876,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeO0mVCRA9TVsSAnZWagAAowYQAJi1qg+NCoAPlaqfAmhX\nKGGbUdST4wa2TwxRewNUjib3AMHOA/KrkF5VQ8VeO8lVtU3ly4DhAcvqnHzX\nonYaanLvP8cvVTFeJzqQFnEEhHRGhoOeStYOA/zc32KE0euB5/PMcYC91tek\nbIP7ynYTbnIVf042cndkIuNAAjZbJ8ZSKqF+YCu7w6x7QcTkbE6p0Zp4LVf1\niQ/r9sgKaMmERyy+pvr1d0DNyq6jw+pVlW8SZV2xBIJlCZ+NDSq50EBiaVwG\nkZ1hVlOQ6czCFJLPbxwGyD8jdGjWyNpap8Aa+LVS0wmJIaUHaOTZnOM0EoeA\nFy+qFY6bfImZTL1J3OswP7E8YtQuiJ2vyjFvr31L4VnssDNEEDPYOeNfkS+w\n3WtA5E9mmC3uxp8zvoUrdbUnWhYFNo6hWjW7gBHXrfz7mz6Tj8ZXANicZ3iY\ngUxy7SFXuMdazk+POSyxD+XcQr9FJC9iF+AmH/1IJi9XbF4cpM4sWLQyprPE\ny6OhzP/QB5JLDHKpbq272+rKxYp/TZpcJsHr8VCuNGULg8QHO+b/eZzdxa3l\nwoykZbtACapB5h8w44g0zBrBpOYjyb5sf+PLTlMOpgNtSogxLCLG9ilEtZpO\nLvhlTXAU1eMlwERFcm33Q0ARaWQlNGxjdnYi7xGwk4w7f1OhRWahhWplsilJ\nTiTi\r\n=6Rey\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","engines":{"node":">=8.0.0"},"scripts":{"fix":"gts fix","docs":"typedoc --tsconfig tsconfig.json","test":"nyc ts-mocha -p tsconfig.json test/**/*.ts","build":"npm run compile","check":"gts check","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../","compile":"npm run version:update && tsc -p .","prepare":"npm run compile","docs-test":"linkinator docs/out --silent --skip david-dm.org --skip https://open-telemetry.github.io/opentelemetry-js/classes/.+api.html --skip https://www.npmjs.com/package/@opentelemetry/api","precompile":"tsc --version","test:browser":"nyc karma start --single-run","version:update":"node ../../scripts/version-update.js","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../"},"_npmUser":{"name":"mayurkale22","email":"mayurkale22@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"6.4.1","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"10.15.1","publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"gts":"^1.1.0","nyc":"^14.1.1","karma":"^4.4.1","mocha":"^6.1.0","codecov":"^3.6.1","typedoc":"^0.15.0","webpack":"^4.35.2","ts-mocha":"^6.0.0","ts-loader":"^6.0.4","linkinator":"^1.5.0","typescript":"3.7.2","@types/node":"^12.6.8","karma-mocha":"^1.3.0","@types/mocha":"^5.2.7","karma-webpack":"^4.0.2","@types/webpack-env":"1.13.9","karma-spec-reporter":"^0.0.32","karma-chrome-launcher":"^3.1.0","tslint-microsoft-contrib":"^6.2.0","tslint-consistent-codestyle":"^1.16.0","istanbul-instrumenter-loader":"^3.0.1","karma-coverage-istanbul-reporter":"^2.1.0"},"_npmOperationalInternal":{"tmp":"tmp/api_0.4.0_1580943765244_0.9482075107831929","host":"s3://npm-registry-packages"}},"0.5.0":{"name":"@opentelemetry/api","version":"0.5.0","keywords":["opentelemetry","nodejs","browser","tracing","profiling","metrics","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.5.0","maintainers":[{"name":"bg451","email":"brandon.gonzalez.451@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dkhan","email":"daniel@khan.io"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"mayurkale22","email":"mayurkale22@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"faa750adb813ff6a9acdcdca697aa499894195e1","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.5.0.tgz","fileCount":87,"integrity":"sha512-lji+cZsWRtiuL54uilOa2EMVNM19bfgX8t3lfishjEaKgfHm1ZsJvks8rWtItKTYEYtg2UXkDj9cjqpLdNWNVw==","signatures":[{"sig":"MEUCIQDDoMNmODa05ejHqx3iXtLmBw8ulj5bvVR92AAgeJmNNAIgOuu52BJcrvdbkrbC8XVjRE1xYNj7s1XrERnvXdlc+tI=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":150386,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeb/dmCRA9TVsSAnZWagAAcukP/0c3EmwyKDdtudAc+aKE\nRAS/6vmiaP6Wkc2gzsMG4l8eXRZRdjjWyLDx0BViFOu4SOzvs+Ars7rmu5xv\n2N4ZPUbLhrHU4t12SDXNVeTBniZ2sm/eGtNIvh06HNEjrsQRyuT+JcQo3YHZ\n7VCTXvLtWuA0P+Yie8/a1SmPjnGvo6HEGyhDl9tUMz5/wr53YTMVcLOh5A4a\n4WdWEmqF/MAQ2jOL2t000EFiZVvX8t+yX4enMZfaBOt8x6lyvA6AMNKg5Ow1\n74yg63Gj8PZwhPhiIdbzLM1GKeDnBXSudgQQGujvRHgpER0BVg8mWZOFYLs0\npaiHSJ/lMTC7YRaPRi9lfll24QaAYkpTmXpP2wmRoXdAEh3BmHFgUT9b6M1f\nINOZmlMhxywfiY+tb1JBIctqzNXQX5EiI81+0A3WcXE81+sbnT3moX6oki/r\nEn86/JlKieVCOD/FtK+bpPBO/7zaGZviGEoSKkdqne30KRymNvD+wGMtLShx\nNedOCJsFIr9QIXavMGHEOzz1p7+qlRsn6Zp2qf0CPbxfd38lUA9UhiC0ZRvs\nRJ24CRbq5mzh1urnxoIUGqcz9TXqzFecnjURfgW7HnbSNRV7xO2w6WA3CEPr\n9GzrSSKI8OuD0EBAgBvnBh5B7C/HLdTMqxn2P5VB6Ky+aUnvbrWz6OpcdE45\nH5s7\r\n=bWUX\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","engines":{"node":">=8.0.0"},"scripts":{"docs":"typedoc --tsconfig tsconfig.json --exclude test/**/*.ts","lint":"gts check","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","watch":"tsc -w","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../","compile":"npm run version:update && tsc -p .","prepare":"npm run compile","lint:fix":"gts fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","precompile":"tsc --version","test:browser":"nyc karma start --single-run","version:update":"node ../../scripts/version-update.js","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../"},"_npmUser":{"name":"mayurkale22","email":"mayurkale22@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"6.4.1","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"10.15.1","dependencies":{"@opentelemetry/context-base":"^0.5.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"gts":"^1.1.0","nyc":"^14.1.1","karma":"^4.4.1","mocha":"^6.1.0","codecov":"^3.6.1","typedoc":"^0.15.0","webpack":"^4.35.2","ts-mocha":"^6.0.0","ts-loader":"^6.0.4","linkinator":"^2.0.3","typescript":"3.7.2","@types/node":"^12.6.8","karma-mocha":"^1.3.0","@types/mocha":"^5.2.7","karma-webpack":"^4.0.2","@types/webpack-env":"1.13.9","karma-spec-reporter":"^0.0.32","karma-chrome-launcher":"^3.1.0","tslint-microsoft-contrib":"^6.2.0","tslint-consistent-codestyle":"^1.16.0","istanbul-instrumenter-loader":"^3.0.1","karma-coverage-istanbul-reporter":"^2.1.0"},"_npmOperationalInternal":{"tmp":"tmp/api_0.5.0_1584396133895_0.5248032846555832","host":"s3://npm-registry-packages"}},"0.5.1":{"name":"@opentelemetry/api","version":"0.5.1","keywords":["opentelemetry","nodejs","browser","tracing","profiling","metrics","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.5.1","maintainers":[{"name":"bg451","email":"brandon.gonzalez.451@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dkhan","email":"daniel@khan.io"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"mayurkale22","email":"mayurkale22@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"0adda4e8cd008994dbcf7162f6999d977f2c80b3","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.5.1.tgz","fileCount":83,"integrity":"sha512-7l57iZ2qdnEzAvORZZjKZ3m8eHqOfjd+DFTG5IEr2+WzPX3BqM142233trRro8smiKN9t5JXYjEM9q8edwEa5Q==","signatures":[{"sig":"MEYCIQDhXWqnZxPni4YZOM516XjWzcE7Yua2WmQnDMzVyT7KoQIhAI1It9Q3Ljaqk3M3hVE0tOu+gk7VQChpYTWKs7UFNSnH","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":144893,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJedBGGCRA9TVsSAnZWagAAJT0P/2pTVPo88FItUCkCfUkk\nFSgfEmO/DZfYw334lj8u5E1RwM2vtOeYcwjBKaKIJW9GWUxYLDnKY7aXVFwn\nQsFpZhqtag+yAn21jKZVrYT8v4RgazYfkbA+4kN6J8dWMQlq1xSWODUE6AsX\nqo/VGtKZLjVFugz6Sr9ou1Q5yBrw3bjlb7+0iiwGC8gYa3IwxQAiN454p0t9\n2si5ekiHTn1Sa5J628b9h4ScylFlncbrjmcXYtsw/R4GxZORDygQIMwVssNF\nDdjM+kcOZRd8cIqT/5DH2HV2mMs37GD+Rzfno5BUmBisjleYQvlaj4GbmZHC\noWpC/W5eOMuUrGM3suZXFWzeWgN8+bEbh5D3Gn+9hT0nWgq0BG/cvwdoishZ\nEwbwMf2a/4zI4zuuUdTL82BjBsCmH6HSPvVxtaPteq67oaeE9CwTiCCuQVHB\nKDi6UQMabiuN5VT1wm19Vc/hBf1gZUj3+YwLVLvu7V6OfBa89M3eDma5ugVH\nBM1hhxjnz4zUybuCH3hcTNFSI6Mayt/wLhxquUc/5PpidX3mdO2dilXg8Myx\nwVMTsEAVT8BpBQWR75Fttn0Rb5J67ZvX8wPpxVoRmlFqK+lsqM+cX8m0Dolt\nFL5a2YUEKzGMzOl7JIwP/jscfHn2nrsTAi6Oab5UAXtDeNkCje+jeyNjxEWP\ngAGY\r\n=NMJv\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","engines":{"node":">=8.0.0"},"scripts":{"docs":"typedoc --tsconfig tsconfig.json --exclude test/**/*.ts","lint":"gts check","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","watch":"tsc -w","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../","compile":"npm run version:update && tsc -p .","prepare":"npm run compile","lint:fix":"gts fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","precompile":"tsc --version","test:browser":"nyc karma start --single-run","version:update":"node ../../scripts/version-update.js","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../"},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"6.14.1","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"12.14.1","dependencies":{"@opentelemetry/context-base":"^0.5.1"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"gts":"^1.1.0","nyc":"^14.1.1","karma":"^4.4.1","mocha":"^6.1.0","codecov":"^3.6.1","typedoc":"^0.15.0","webpack":"^4.35.2","ts-mocha":"^6.0.0","ts-loader":"^6.0.4","linkinator":"^2.0.3","typescript":"3.7.2","@types/node":"^12.6.8","karma-mocha":"^1.3.0","@types/mocha":"^5.2.7","karma-webpack":"^4.0.2","@types/webpack-env":"1.13.9","karma-spec-reporter":"^0.0.32","karma-chrome-launcher":"^3.1.0","tslint-microsoft-contrib":"^6.2.0","tslint-consistent-codestyle":"^1.16.0","istanbul-instrumenter-loader":"^3.0.1","karma-coverage-istanbul-reporter":"^2.1.0"},"_npmOperationalInternal":{"tmp":"tmp/api_0.5.1_1584664965764_0.017873719460831605","host":"s3://npm-registry-packages"}},"0.5.2":{"name":"@opentelemetry/api","version":"0.5.2","keywords":["opentelemetry","nodejs","browser","tracing","profiling","metrics","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.5.2","maintainers":[{"name":"bg451","email":"brandon.gonzalez.451@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dkhan","email":"daniel@khan.io"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"mayurkale22","email":"mayurkale22@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"b36c45a0f2bca74ac551d52d4ae8c29f074b211c","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.5.2.tgz","fileCount":83,"integrity":"sha512-SLahDSBn08zxz+zd0kq3XXn29HyUegWX/EUD79RuF7qBoXfMlwnCOx8eIzLsIRUDY4S9Qq7BYGOHdKz2p8oeeQ==","signatures":[{"sig":"MEUCIQCE4D9x6wLU4LE/fvdS1iBZThuA5Dapa3/0hWI5jO4rzwIgL0iVuOsg3VyalbUaNHlU+UHcFEVYIENIXiw+eonLqOs=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":144698,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJefkAJCRA9TVsSAnZWagAAW4UP/i4+EPq7rxe31X4ZREHG\nYH8eiSaJZQzQ+IMVhnf2Py44jV4E+SZgqUZyF7Vp+RUuFVvmiublrs03Syif\nFKL6akE7ThrH4Fwl2mV6v/INKxnd+S98JCp/9oVtrjtdqwJz8GSE2Bw6Q9Wl\noYvFne62bLXCWrMsiuWmo5VPEHjNcVOzdUtxyAa0RWsI72Qen1x5N43DTOXe\nPRdd90lq/VqBWtclILHTgwSgtUUx3rbxW7GYemeXgwjRQVSQ7lH6IAZWIYh8\nM+UzSfEjEMKxyiTcxHnF78TMpGSuIT18OgTN6unO+QKz59qDeet7+t1BAe44\nWRWp5eLiVeflDrcllETCtdvG0qaWrWkc75wUcsjo5X3+I6yQZWx/vgUA+hPA\nJHmE5Bbtkq8OrRQjaMHrczxIHZtIcXq45N80gFTCCDWVv5XlJMilbttZ1PE6\nGrMHkG1mdEFsdedPT/DjRod3SaEl6Wlwsulr5PPDpVlqIY9tTuBlPyflC+4t\nc+TwY1NbvriX9/djN3ccL3UxAe8gbnOXkvHJhaPkFfLaMLs8IX4tE78iqe/G\nNkYgGyohTdNrhzjp6LExnEXtaImKLOO3fX8Fc9OcnAk+LojaRooHnJ6WppnX\nfnrg3uh27uJavEmIYr2OebwurqW4yg5vTvOtlAxTH9EHnQ6sVXER7y7xqRNs\n8SqE\r\n=6d1D\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","engines":{"node":">=8.0.0"},"scripts":{"docs":"typedoc --tsconfig tsconfig.json --exclude test/**/*.ts","lint":"gts check","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","watch":"tsc -w","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../","compile":"npm run version:update && tsc -p .","prepare":"npm run compile","lint:fix":"gts fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","precompile":"tsc --version","test:browser":"nyc karma start --single-run","version:update":"node ../../scripts/version-update.js","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../"},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"6.14.1","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"12.14.1","dependencies":{"@opentelemetry/context-base":"^0.5.2"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"gts":"^1.1.0","nyc":"^14.1.1","karma":"^4.4.1","mocha":"^6.1.0","codecov":"^3.6.1","typedoc":"^0.15.0","webpack":"^4.35.2","ts-mocha":"^6.0.0","ts-loader":"^6.0.4","linkinator":"^2.0.3","typescript":"3.7.2","@types/node":"^12.6.8","karma-mocha":"^1.3.0","@types/mocha":"^5.2.7","karma-webpack":"^4.0.2","@types/webpack-env":"1.13.9","karma-spec-reporter":"^0.0.32","karma-chrome-launcher":"^3.1.0","tslint-microsoft-contrib":"^6.2.0","tslint-consistent-codestyle":"^1.16.0","istanbul-instrumenter-loader":"^3.0.1","karma-coverage-istanbul-reporter":"^2.1.0"},"_npmOperationalInternal":{"tmp":"tmp/api_0.5.2_1585332233547_0.14772137772167837","host":"s3://npm-registry-packages"}},"0.6.0":{"name":"@opentelemetry/api","version":"0.6.0","keywords":["opentelemetry","nodejs","browser","tracing","profiling","metrics","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.6.0","maintainers":[{"name":"bg451","email":"brandon.gonzalez.451@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dkhan","email":"daniel@khan.io"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"mayurkale22","email":"mayurkale22@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"f23bca57b9ae15741a52047ec7ea9c8b0c69b501","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.6.0.tgz","fileCount":83,"integrity":"sha512-Y3rEz7E1O40bKQMRfPIvQr9WiQQ2ieuIrDYz1kHSiBhQqVcu60Pon1NVWjXVMv2jj3DNKskFQDDGdliWZLx5/g==","signatures":[{"sig":"MEYCIQCxTMZv4CtVE/hmA2sy5IBY6WaWnrHPltsSJ+oYDDyyjgIhAMH0hdIR3gnP37eGlv+W3gAIxQI/2yg2n+6LFNU99SVr","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":143961,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJehh/rCRA9TVsSAnZWagAAtR4P/R6zPPqnIbTyJ/jtyquL\npH1MGt3ZxVHXRtmBq5URig0LTqcM3k097ZY6cpT4tGFhuY0duIqxm4dBJYtU\nXFy1/PF+sgx6+g/zdcFClWYgNtDRjIUBizEU5iI5bKwGKbd2NNFyZqaFwp3I\n1SHajav6xhhvip5x48jbiUcM7IO20ALkWql+9915MFOnyol79J2l4ABc+l5u\nUGdvXpx5IP+POkJvO3mu+X0W9pNae+P+4Sg+SUqEdt7NX+RABdpvY9rSKbOj\nDR1k2ZFpsE6rPD/BMIN9WsTR3gXwD3qo+/n4ktCsDttHt+C5CmQmaU3015PF\n8aWlAm90bj2klFP/1CY/OHZbncVO2rHLC8EUuaPKiwJ9whoJuHze41PY5WAS\nxh4z8Kkai7oPSoEP4c17wM9jW1ucueNU+tDq2m8fmGcSCCe+QsCl3mOrumd1\nKH7mHNEe2kyQECBuSvAVmgJ/fbkwYFNgopRMu4phL/NPL3pinfW+wRlxaHrx\n5yp5tUUK1ivTOrPEfhs7e0fa2VHVjuobG9frtPjfgzgivWtvvYjRZXWfoTCD\nGBnYWcackROX8TqZreMfLL0Z/CSShMZDDzalMMTz0IOjpwISCl4wDYhJrt9G\njFzwCcZ44NmfwwRMlQUrOqhNUOfp16tdCbdNIlPChX4PGaZmNiL8uE+8xQ+f\n8mwK\r\n=wSwS\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","engines":{"node":">=8.0.0"},"scripts":{"docs":"typedoc --tsconfig tsconfig.json --exclude test/**/*.ts","lint":"gts check","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","watch":"tsc -w","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../","compile":"npm run version:update && tsc -p .","prepare":"npm run compile","lint:fix":"gts fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","precompile":"tsc --version","test:browser":"nyc karma start --single-run","version:update":"node ../../scripts/version-update.js","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../"},"_npmUser":{"name":"mayurkale22","email":"mayurkale22@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"6.4.1","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"10.15.1","dependencies":{"@opentelemetry/context-base":"^0.6.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"gts":"^1.1.0","nyc":"^15.0.0","karma":"^4.4.1","mocha":"^6.1.0","codecov":"^3.6.1","typedoc":"^0.15.0","webpack":"^4.35.2","ts-mocha":"^6.0.0","ts-loader":"^6.0.4","linkinator":"^2.0.3","typescript":"3.7.2","@types/node":"^12.6.8","karma-mocha":"^1.3.0","@types/mocha":"^5.2.7","karma-webpack":"^4.0.2","@types/webpack-env":"1.13.9","karma-spec-reporter":"^0.0.32","karma-chrome-launcher":"^3.1.0","tslint-microsoft-contrib":"^6.2.0","tslint-consistent-codestyle":"^1.16.0","istanbul-instrumenter-loader":"^3.0.1","karma-coverage-istanbul-reporter":"^2.1.0"},"_npmOperationalInternal":{"tmp":"tmp/api_0.6.0_1585848298539_0.4120334110309982","host":"s3://npm-registry-packages"}},"0.6.1":{"name":"@opentelemetry/api","version":"0.6.1","keywords":["opentelemetry","nodejs","browser","tracing","profiling","metrics","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.6.1","maintainers":[{"name":"bg451","email":"brandon.gonzalez.451@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dkhan","email":"daniel@khan.io"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"mayurkale22","email":"mayurkale22@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"a00b504801f408230b9ad719716fe91ad888c642","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.6.1.tgz","fileCount":83,"integrity":"sha512-wpufGZa7tTxw7eAsjXJtiyIQ42IWQdX9iUQp7ACJcKo1hCtuhLU+K2Nv1U6oRwT1oAlZTE6m4CgWKZBhOiau3Q==","signatures":[{"sig":"MEYCIQC+pqEB2svUaHFj1vBr2fFPQSwbZ3uVB0LueXL1GVsItAIhAIBMc//A+30EikQLFBu2HT3ERaj08Su1+w2+ygtq01aR","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":143965,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJejhnmCRA9TVsSAnZWagAAKk0P/Ai/p0Rr8Soj6+TIP9EQ\noYdlsaY12Qmoo+WbHnJYYqQwwIIrfkHQfPSkOJHrCABLWLtQZX+kaXFSpSF5\nIu8X1PZxcWQ9ar3DOEXY4zoWESiUxwPNMiJ40YbdBAmQGMQUhbhOELwHJ3u0\nwVhLwY5q2zdvGAUGPUvLT8h+I3VStD+uTotqhuyvZyJHBjtkC6KbDL6m908C\nAvbaU0QzfTtnorG/n4TasUGv+Ayqr6O84qFpjhaNa5VIOtxxjvsqLwNAdRyz\nJE4D9NJEEbiDzqvlGtRzySRaNQNe2FhV6RN6eLxZ1Gr+1N5zj2n0whtGPSoF\nHKMhjluzQTPxY+Q5WOtHJ+x8nu/2E3zJSJBn5w0zCQP8Lla1V2rBJLeHh5VL\neLTSF3oC27W5RiAQOptUJC+fa0WWbEJbyEMYsUudN82n9PwRvnqwGvcTaXV6\nYq05z5tTiZfHrWtjON4ki1VXiNLHIOwIguZAR6vny6fqJLj8G6o7F/hVS2rk\nlTO++Ih2U/xFH9T6kRASfeiA+iLgZiyvoIXCes2FfjEEDUAFHjc7TD+bT8Fi\ncF2GB86tT2SUzSWzaqdaovJmisLv8bg6FAAzIDkY5FndzHbOKa6m1oXroPfH\nfadQRR5aMqoYemlAymsqbDU/R0X3T2n37uFzGH/WdWabn56tYs32j7t5LU1D\nySdw\r\n=5Jw8\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","engines":{"node":">=8.0.0"},"scripts":{"docs":"typedoc --tsconfig tsconfig.json --exclude test/**/*.ts","lint":"gts check","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","watch":"tsc -w","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../","compile":"npm run version:update && tsc -p .","prepare":"npm run compile","lint:fix":"gts fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","precompile":"tsc --version","test:browser":"nyc karma start --single-run","version:update":"node ../../scripts/version-update.js","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../"},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"6.14.1","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"12.14.1","dependencies":{"@opentelemetry/context-base":"^0.6.1"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"gts":"^1.1.0","nyc":"^15.0.0","karma":"^4.4.1","mocha":"^6.1.0","codecov":"^3.6.1","typedoc":"^0.15.0","webpack":"^4.35.2","ts-mocha":"^6.0.0","ts-loader":"^6.0.4","linkinator":"^2.0.3","typescript":"3.7.2","@types/node":"^12.6.8","karma-mocha":"^1.3.0","@types/mocha":"^7.0.0","karma-webpack":"^4.0.2","@types/webpack-env":"1.13.9","karma-spec-reporter":"^0.0.32","karma-chrome-launcher":"^3.1.0","tslint-microsoft-contrib":"^6.2.0","tslint-consistent-codestyle":"^1.16.0","istanbul-instrumenter-loader":"^3.0.1","karma-coverage-istanbul-reporter":"^2.1.0"},"_npmOperationalInternal":{"tmp":"tmp/api_0.6.1_1586371045572_0.9899006818100518","host":"s3://npm-registry-packages"}},"0.7.0":{"name":"@opentelemetry/api","version":"0.7.0","keywords":["opentelemetry","nodejs","browser","tracing","profiling","metrics","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.7.0","maintainers":[{"name":"bg451","email":"brandon.gonzalez.451@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dkhan","email":"daniel@khan.io"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"mayurkale22","email":"mayurkale22@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"99be9ae3aa64c0e73077ac7c093ea81303aa609d","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.7.0.tgz","fileCount":85,"integrity":"sha512-h4wdvfZ7y3Md3gRr0zycv6oFuqHjWdZ5oJGSoDGoyG6vQSPdIJorWH4SSalif8yW9l9T+bsAkHAt2VVG/BiW8g==","signatures":[{"sig":"MEUCIC5eb+AQG2b1UTMoRsZVXZMgbXvXGwNwbD5vNVHYoT/6AiEA/g13XKUQ73C5CSwAyHQKfEm44jKFtwDn6EjeGMdWvnI=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":145885,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeoyxoCRA9TVsSAnZWagAAN7QP/3MoW0foS/+pPsZzAAEH\ntGXNLncM2v3F0aIGeayRu4PlNJfmCPQBdihjshonEL71WG4TTMkodPTWU72O\nQQRaaBkvQwV9k0emZgBHmhxC0S/V19R0kOP1BY2iZ80U+MdZlHf5rMzNz4Ii\nf7fVfmOk/ZXs1r0kMCK0viVFANztZPJNHpjmt4sDRalR9HExOYK1KuF1Gp/5\nuP8LuRk+Z9OO8Ldhd27oWsfT84Yg83cLXdWvntK/XDhwTs9L8XUcG7n6uYk7\n7C1FqyRaquwaOfPAap5AbLOG9pQre7EfY5p1h0ASGa6WUDFtY8Ejh1sMvaOO\nPDouQnS7Pn3TQfzW/VJLLT5GnoskfZgbZG/qce6Q8qQ1C1QaIZqAXHx53SZ1\nWE0c58TdThLB6l6GwxPpPhmCL3T3EIsbyj65VzpdWpTnw1SIBgk/St+Om03/\nO84ib7TDQwUG/WRmiuFcEzl9IbQlwmrElhhyiCeHidfHTegL1axHzhxwDET2\nP//75PaWF+Gq/WCeDDNO51CbJ7GRF+UMtrSVjjvP9XDZPtMaFPZdQY00FlMi\nfSHTXK16+4JeLr1FiK2/W8VplEGjGooXzgQb8UAqWdqnCDbQyG3Vqs79Ytnp\nYiWD5O7mHrAH3RtkTppjrTwv6L9mbF4L5RhbS3BtTnxyLxo3wogoITkwKILP\nB3vU\r\n=AfyL\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","engines":{"node":">=8.0.0"},"scripts":{"docs":"typedoc --tsconfig tsconfig.json --exclude test/**/*.ts","lint":"gts check","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","watch":"tsc -w","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../","compile":"npm run version:update && tsc -p .","prepare":"npm run compile","lint:fix":"gts fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","precompile":"tsc --version","test:browser":"nyc karma start --single-run","version:update":"node ../../scripts/version-update.js","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../"},"_npmUser":{"name":"mayurkale22","email":"mayurkale22@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"6.4.1","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"10.15.1","dependencies":{"@opentelemetry/context-base":"^0.7.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"gts":"^1.1.0","nyc":"^15.0.0","karma":"^4.4.1","mocha":"^6.1.0","codecov":"^3.6.1","typedoc":"^0.15.0","webpack":"^4.35.2","ts-mocha":"^6.0.0","ts-loader":"^6.0.4","linkinator":"^2.0.3","typescript":"3.7.2","@types/node":"^12.6.8","karma-mocha":"^1.3.0","@types/mocha":"^7.0.0","karma-webpack":"^4.0.2","@types/webpack-env":"1.13.9","karma-spec-reporter":"^0.0.32","karma-chrome-launcher":"^3.1.0","tslint-microsoft-contrib":"^6.2.0","tslint-consistent-codestyle":"^1.16.0","istanbul-instrumenter-loader":"^3.0.1","karma-coverage-istanbul-reporter":"^2.1.0"},"_npmOperationalInternal":{"tmp":"tmp/api_0.7.0_1587752039689_0.8114466727729208","host":"s3://npm-registry-packages"}},"0.8.0":{"name":"@opentelemetry/api","version":"0.8.0","keywords":["opentelemetry","nodejs","browser","tracing","profiling","metrics","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.8.0","maintainers":[{"name":"bg451","email":"brandon.gonzalez.451@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dkhan","email":"daniel@khan.io"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"mayurkale22","email":"mayurkale22@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"3f7c49375649ebc09981d528efcad95a0efc85e9","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.8.0.tgz","fileCount":87,"integrity":"sha512-P7+9cdg55aBQxUPj/hst9uu3aPmbIxlqB9//pwa3XPDXtFsKEDH517Rq/TEZQob3255KDyE2JoTIpWDb2isYhg==","signatures":[{"sig":"MEUCIFMzehJLIWFQlEs6xP7ICHST/2EIsk/V0rLaxHAFYq+QAiEA8mq+2c2p9EzWbJaesw/LHp6QB6tosiKdoL7FXUGiKW8=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":155783,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeutBsCRA9TVsSAnZWagAAQbsP/R0HGNiR1eVDbyz8mG5N\nz69ecbeFVmHZZpZBO8PMMYC78Q05XSfOkXo0L/KtkvIx3GWAKdLdaAUT6gd/\nWcQ140nUQLrp2qI73nYFWf9nmi8TmLBfMBKCSRUyKoadHjNNZeIb0o36s4Ch\nRMALkAcv9e0KGh5IawwGeX1/V3CILa4KlVbvTm8SsfBcl0hraKSDLb9zW70R\n3JZ18kKSVk79zgXQRuXZQGL1fhcK7Bh2e3BgmgdVLKfFzcM1Tshacr9ueGkN\nv1diZUy/+shIwhemF/cDwcbuXT+AfGfqwkoYjmiltA8keQVFmXIcinC7Jo3j\ney/Kkqxgd4jFLwCgLWxn/i33QvwEjLn9HiXJ8OT6PkcjnT7+Afw+ZWkZhUH5\nGuxakGWkVP+dTMVnW47MSmSrVoK1Kl3EiMhI+l4f+ckZufxhCX5AemrqHzM4\nyMIXOpKJkrOAuNK7dAl3wv58mOAUHBhDnDPBCYCuWCZr7Fi6L2dwAa8wWyHY\nhZsbLqWYh0NQaU9yOvxzZzctdkP9MCsAB/OGJpK+SCN0hHMiPwmPxkPsRWgV\n814z+o4vfRo6pWI0VEcsc534WNGHTFu/IvEJruMtyRlTtJpjjmM2+nCZVY4n\nxaRxara67/EFbMfXUeenuBk/F/OqvgfqHGrP46g/KntQymHl26h9r0C+qIHq\n5gZi\r\n=SQ9/\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","engines":{"node":">=8.0.0"},"scripts":{"docs":"typedoc --tsconfig tsconfig.json --exclude test/**/*.ts","lint":"gts check","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","watch":"tsc -w","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../","compile":"npm run version:update && tsc -p .","prepare":"npm run compile","lint:fix":"gts fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","precompile":"tsc --version","test:browser":"nyc karma start --single-run","version:update":"node ../../scripts/version-update.js","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../"},"_npmUser":{"name":"mayurkale22","email":"mayurkale22@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"6.4.1","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"10.15.1","dependencies":{"@opentelemetry/context-base":"^0.8.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"gts":"^1.1.0","nyc":"^15.0.0","karma":"^4.4.1","mocha":"^6.1.0","codecov":"^3.6.1","typedoc":"^0.15.0","webpack":"^4.35.2","ts-mocha":"^6.0.0","ts-loader":"^6.0.4","linkinator":"^2.0.3","typescript":"3.7.2","@types/node":"^12.6.8","karma-mocha":"^1.3.0","@types/mocha":"^7.0.0","karma-webpack":"^4.0.2","@types/webpack-env":"1.13.9","karma-spec-reporter":"^0.0.32","karma-chrome-launcher":"^3.1.0","tslint-microsoft-contrib":"^6.2.0","tslint-consistent-codestyle":"^1.16.0","istanbul-instrumenter-loader":"^3.0.1","karma-coverage-istanbul-reporter":"^2.1.0"},"_npmOperationalInternal":{"tmp":"tmp/api_0.8.0_1589301355963_0.1757731128490918","host":"s3://npm-registry-packages"}},"0.8.1":{"name":"@opentelemetry/api","version":"0.8.1","keywords":["opentelemetry","nodejs","browser","tracing","profiling","metrics","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.8.1","maintainers":[{"name":"bg451","email":"brandon.gonzalez.451@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dkhan","email":"daniel@khan.io"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"mayurkale22","email":"mayurkale22@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"ae71a1452b21aeca19aae5c9405d04f0c66ad21f","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.8.1.tgz","fileCount":87,"integrity":"sha512-fb2mLSjLUYf2hs6Brg1uGENOSvrM5Gt56AvnHfKer2zMmGZJAPSJbCJBVrP+aeJLTI143CnME8X9v88Go8QAxQ==","signatures":[{"sig":"MEUCIHoZQXwLswiDXuxEjw0c/rf5eJskaRF38ouIH9ir9QEXAiEA46mLz0RGb3QjUPXXvGVXT+XIXuTy7VEwubiuXrMAaEE=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":155785,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJewuP3CRA9TVsSAnZWagAAMqIP/3VUIecWi/u4FdctyrR4\nHMNQk1fsD1/cXTlGhnclsuK9pcoDQZ+1G8IrdANM+KqFleXJ2whvEC3LGMZy\nVZyjQPTy9WV3k2VnrGTsEuzLw8ACLg+jL2Tghyi5SIRDxugN5v5KvunZQfd/\nSxHKu1oNeo3NjMwtvxFsHObEkK8AUqjzG8FszOk56HdqSE4IXKVdCoH5fbJ9\n0HvJl546ukpOSxzvlFmufNlWYo7sjT1V7UC7QhK6WKs/299rWvi6st9sjFd9\nmktlP8X/Hjj2/CEBM4HWb+rCT5eXHdCmrQTT/1Q4pAY0dV+6PalY670Pdrgk\nFnAk1+4hwwIOEU3FQ6zhnTYV1r50eC6MuOHKEKR4alvnObMGDyrlcmgDqdFj\nQ4vZ/wa1iOynZ6bMpz3boF5pf++4+JdxD9tQsHWcX0wFZ8LYA1/K78LwwMUX\n+AIWbQl9pbjCRcZ+0g23rh71VcGRtWU8rhv+y59mRBPsykE5k9ONZI+DA+FT\n6z6C3tTrvYS9nY3jF8xfwmDOSdc9Xaha/Gy7IJXuw77RQrHnO+DMnFSIX1E5\nuzoNMTUp9/T2LSkC2xEEcwRmHqF7JPq/VuaNf9Ma791HYz/1js3kuJGuDWKH\nAlqIZIjzxmPSMAswyxc3telHeuBcNjXE6z5j0Exlh4ICLoa6xFICpWe3YPhH\nnoiR\r\n=5gD0\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","engines":{"node":">=8.0.0"},"scripts":{"docs":"typedoc --tsconfig tsconfig.json --exclude test/**/*.ts","lint":"gts check","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","watch":"tsc -w","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../","compile":"npm run version:update && tsc -p .","prepare":"npm run compile","lint:fix":"gts fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","precompile":"tsc --version","test:browser":"nyc karma start --single-run","version:update":"node ../../scripts/version-update.js","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../"},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"6.14.4","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"12.14.1","dependencies":{"@opentelemetry/context-base":"^0.8.1"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"gts":"^1.1.0","nyc":"^15.0.0","karma":"^5.0.5","mocha":"^7.1.2","codecov":"^3.6.1","typedoc":"^0.15.0","webpack":"^4.35.2","ts-mocha":"^7.0.0","ts-loader":"^6.0.4","linkinator":"^2.0.3","typescript":"3.7.2","@types/node":"^12.6.8","karma-mocha":"^2.0.1","@types/mocha":"^7.0.0","karma-webpack":"^4.0.2","@types/webpack-env":"1.13.9","karma-spec-reporter":"^0.0.32","karma-chrome-launcher":"^3.1.0","tslint-microsoft-contrib":"^6.2.0","tslint-consistent-codestyle":"^1.16.0","istanbul-instrumenter-loader":"^3.0.1","karma-coverage-istanbul-reporter":"^3.0.2"},"_npmOperationalInternal":{"tmp":"tmp/api_0.8.1_1589830647098_0.3755800297149312","host":"s3://npm-registry-packages"}},"0.8.2":{"name":"@opentelemetry/api","version":"0.8.2","keywords":["opentelemetry","nodejs","browser","tracing","profiling","metrics","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.8.2","maintainers":[{"name":"bg451","email":"brandon.gonzalez.451@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dkhan","email":"daniel@khan.io"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"mayurkale22","email":"mayurkale22@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"2bfb666db95052823a427621f6ee35102c70e3c8","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.8.2.tgz","fileCount":97,"integrity":"sha512-+BwodLiysWWcqLeGmO7LoGsFViPRb4pH1VbRJmZJIU0v19mm97SXCQTScgjx4U5kQjoUGuBOTeqz2QoGjNhFGQ==","signatures":[{"sig":"MEUCIQCq0JmsaLaljnxcSTsHAKGO1A1bB1JFb325c7VneqKyqAIgRk2DQkUxy1vEJbEBIJM4MbidIp5I3CUE1Kb5v2egpEg=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":163291,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJextasCRA9TVsSAnZWagAAXQEQAIeRGPi4w0x8ewz+zIhz\nqVy2sfE+5fx9Ptyc4tB6BPwpwCUJWESMvfcTafZG8PIfvbEFmhfGlINIpqrz\nU3JZXsuVjVKc+twoNlXIKHrT5QbECU9N1D8i58qq9aZF/m7qdnv5lZN/DrIH\n9OJmjEoE1GPRPiCDD06FzD98uw4lvF43MtVOjT6EuIOmwPwUfG0pthCwOIxr\nK8/7E2FrcgBILnWyx3mh/f3KA3JjsFmeVPMWL58dCgoBd7Aar7aJ7JdWmX3Z\n0uy6aK82d1RaVx7TjHlm7XUp1utt21LHZsdGVgLAQLUNbkgx6BtsCuTa+cbG\nEXjUepWrS0z2UMH+9IclAeU1GuL6db+JwBCiJUX81ahSzosUI1nBVHeWi8sb\nRebrKYlXW9slC6gDr+RqXaYII9sYDTcyMPC1DjxZT4KP0+k5tcRclLZK3LRs\nDU//qQYjvX/WEmxJgDG41gmFSuflid9cqQAqfm6y09B8iDpRG0C+se7SqBIo\n10ah2hw60npr7v3DjtwVmGd//54zJsmp7hvp+kdQy+ZtoJvsabBRexMuUgnu\nxJijzKxOWrqOIq6eLtOhnR3i1IGbr1X47u7A52pzWVvFIUioqrltijhzTDSN\nA87GNR0PWf8XTQtSwS1HucAwQ9tyrsmKcxplIxzJObzqTuvtugWLVbVqBVVT\nSYAU\r\n=Fd5j\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"scripts":{"docs":"typedoc --tsconfig tsconfig.json --exclude test/**/*.ts","lint":"eslint . --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","watch":"tsc -w","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../","compile":"npm run version:update && tsc -p .","prepare":"npm run compile","lint:fix":"eslint . --ext .ts --fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","precompile":"tsc --version","test:browser":"nyc karma start --single-run","version:update":"node ../../scripts/version-update.js","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../"},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"6.14.4","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"12.14.1","dependencies":{"@opentelemetry/context-base":"^0.8.2"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"gts":"^2.0.0","nyc":"^15.0.0","karma":"^5.0.5","mocha":"^7.1.2","codecov":"^3.6.1","typedoc":"^0.15.0","webpack":"^4.35.2","ts-mocha":"^7.0.0","ts-loader":"^6.0.4","linkinator":"^2.0.3","typescript":"3.7.2","@types/node":"^12.6.8","karma-mocha":"^2.0.1","@types/mocha":"^7.0.0","karma-webpack":"^4.0.2","@types/webpack-env":"1.13.9","karma-spec-reporter":"^0.0.32","karma-chrome-launcher":"^3.1.0","istanbul-instrumenter-loader":"^3.0.1","karma-coverage-istanbul-reporter":"^3.0.2"},"_npmOperationalInternal":{"tmp":"tmp/api_0.8.2_1590089388024_0.363528352160863","host":"s3://npm-registry-packages"}},"0.8.3":{"name":"@opentelemetry/api","version":"0.8.3","keywords":["opentelemetry","nodejs","browser","tracing","profiling","metrics","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.8.3","maintainers":[{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"mayurkale22","email":"mayurkale22@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"6048f17e5ab565d1325092c4eed2ee4c6d24aec0","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.8.3.tgz","fileCount":97,"integrity":"sha512-CRd8kKrMN1yisbw2zc2IiXM31zdS8mvQ4sivxPFgWS/eQEW9XuNxMVtSWv5k/tDcqbcLzUHcX6JW0SpVNA5h+g==","signatures":[{"sig":"MEUCIGpFb13C3Q0+x/+etvzUthavZ5fAOV9YCJl0p6SBZaGfAiEAs/WAGKhVvIfHVgLezZ5ztaIx8lrCTqoBeql3naNPAhM=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":166325,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJe0BzOCRA9TVsSAnZWagAAHJQP/iYT+Rx8nSu6Bs2TeZ7S\njVsG0jlOF08AesfGv3pDH2Ku800DZ4sIvqAWDrKcD2Dpt2+S2eS0cSoYPdYb\nzbc7HuotEepyHDvmA370WlN4YyivMRVE2FkSb9514kx/5Y9NhAREGimnwBER\nLhF9Oq1YuEXZpi1tdWnBPEHn9qOSsgTxT6ntuA9DB9Ds9Xg2MIzfiFckDfib\na7L+WkPVYw13XYFWeicMU1BWjccveMNlUKLFTf7NUkZrvTETSmsZA6mFjmCH\nYXRg9utEg/5WD446wqD2eI8mLiIU9n3XoNkDhPwyyJ9LkVyKQkDEW5JYe7Wg\nDQf7Q6SQR0DWEgHYLCjobdjIBe/rSVLgHf4wRK5nfm4NKKmmvpztZXCgqSSv\nYgXx2jo5CxbgUxgKebivLAi6KWiaq94WpWNvp4lv732b/cSz75DEp+b+vUJM\nISSlKTpIleQ79Oy4tNRhjJbWtMZ9aWD/ac6GUdeLvk5/P0aunm5JOi3VYf11\nLfQjZXXbj3rgML0Ng00QSY2uQNB9VrKF2nVRHN+97K4yhSsStyVZ47DSYe0Q\nc3b1wQmpZ/3WppZVFjO5DJNQOAPz62PQ7jMcY6WTmxbsubXDIwhdgFfLSTZG\n75Lgl1gvq73jk01Mo91Pw62bZyFmIzW0USieegAMVyeEFR48I2STNMWqqm/q\nEtyM\r\n=s+o2\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"scripts":{"docs":"typedoc --tsconfig tsconfig.json --exclude test/**/*.ts","lint":"eslint . --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","watch":"tsc -w","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../","compile":"npm run version:update && tsc -p .","prepare":"npm run compile","lint:fix":"eslint . --ext .ts --fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","precompile":"tsc --version","test:browser":"nyc karma start --single-run","version:update":"node ../../scripts/version-update.js","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../"},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"6.14.4","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"12.14.1","dependencies":{"@opentelemetry/context-base":"^0.8.3"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"gts":"^2.0.0","nyc":"^15.0.0","karma":"^5.0.5","mocha":"^7.1.2","codecov":"^3.6.1","typedoc":"^0.15.0","webpack":"^4.35.2","ts-mocha":"^7.0.0","ts-loader":"^6.0.4","linkinator":"^2.0.3","typescript":"3.7.2","@types/node":"^14.0.5","karma-mocha":"^2.0.1","@types/mocha":"^7.0.0","karma-webpack":"^4.0.2","@types/webpack-env":"1.15.2","karma-spec-reporter":"^0.0.32","karma-chrome-launcher":"^3.1.0","istanbul-instrumenter-loader":"^3.0.1","karma-coverage-istanbul-reporter":"^3.0.2"},"_npmOperationalInternal":{"tmp":"tmp/api_0.8.3_1590697166118_0.29885821269445323","host":"s3://npm-registry-packages"}},"0.9.0":{"name":"@opentelemetry/api","version":"0.9.0","keywords":["opentelemetry","nodejs","browser","tracing","profiling","metrics","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.9.0","maintainers":[{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"mayurkale22","email":"mayurkale22@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"23dc68851f98eabfb981f0b0cc5b1c34d715fdcb","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.9.0.tgz","fileCount":99,"integrity":"sha512-fJ0CzUf4favXihuD6dDUh4U6GPfEjswUy9w+N4SrIrX3wFi43bGb3BXPSctaWx3PQaRC3Rjsw12HWR+oRl9pRQ==","signatures":[{"sig":"MEUCIB5G4+HCQsd7avIyzigwMww95DCyv9hryHcXW1FjUm4gAiEA5xLWTS10etJ3KezelE+XeXvE/cTCF1d34UDXKLRKaAg=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":142863,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJe69skCRA9TVsSAnZWagAAsWcQAI9yQkxaomSPu75W4Lva\nIafkSFnPziMdasaTDGQVYFMDdAcdhQA8bBAVFYzjgWyCbT6N0UZEUjLDR3UG\nT+wq06B8PlUbI45XjIyigOwyMaI4+6P3nlY4o7OZyEChXjZ/Me3gM3aWDk7p\nPDz+89zofsxuOH1sDjqaP7z3erHMyHl7oeH7HgPdS0469t5y93N9Ttlo+qvZ\n/0dR6YQ3ERPRqFWCuHsMfG6cm6mnYsQuK87dMGqvP862m9OcwOnTxZrrptjE\n5K9NX6ZsnS7bh4PkETXBMAlebefoNCs5NJiYKrFfy6PXXz7TTZF7Fg4t1+bH\nJ6Ca1W+UM8PRgIJ4BXkE9qczc3Yhi8JMCYnBNQBc9RLpXZMtwdgphs+1+rPf\n1NQzw2b5WKmYQ9AMjyBkk8mFGYxp6JlXohEAUWthY3Bh1NgIuDX8sYssmtxZ\nHMheTZof7vxUHCEi7bBhdKB63a4DQW2++bUF9Sp6LfvFSDA/apwSoSFVdASB\nmai6GQ+1rp4TjiF4GyuUaCUvTqBUBdbMrI2lzVIANgu/25NQI9JCQeHZKkB9\n7l5iU/CHxwkx4wOjzvRs43EjDArqE5tmH1ImvT2sOArAExfSmZnkDyXfb7JP\n6w/7IhB9gbT0pymYKAdl5yLuOMFB1/gMuzR8pSHbEZG5ISiHk21CHWxqNnc+\nZca1\r\n=9o5l\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"scripts":{"docs":"typedoc --tsconfig tsconfig.json --exclude test/**/*.ts","lint":"eslint . --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","watch":"tsc -w","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../","compile":"npm run version:update && tsc -p .","prepare":"npm run compile","lint:fix":"eslint . --ext .ts --fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","precompile":"tsc --version","test:browser":"nyc karma start --single-run","version:update":"node ../../scripts/version-update.js","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../"},"_npmUser":{"name":"mayurkale22","email":"mayurkale22@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"6.4.1","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"10.15.1","dependencies":{"@opentelemetry/context-base":"^0.9.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"gts":"2.0.2","nyc":"15.1.0","karma":"5.1.0","mocha":"7.2.0","codecov":"3.7.0","typedoc":"0.17.7","webpack":"4.43.0","ts-mocha":"7.0.0","ts-loader":"7.0.5","linkinator":"2.1.1","typescript":"3.9.5","@types/node":"14.0.13","karma-mocha":"2.0.1","@types/mocha":"7.0.2","karma-webpack":"4.0.2","@types/webpack-env":"1.15.2","karma-spec-reporter":"0.0.32","karma-chrome-launcher":"3.1.0","istanbul-instrumenter-loader":"3.0.1","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_0.9.0_1592515364181_0.2550123533834585","host":"s3://npm-registry-packages"}},"0.10.0":{"name":"@opentelemetry/api","version":"0.10.0","keywords":["opentelemetry","nodejs","browser","tracing","profiling","metrics","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.10.0","maintainers":[{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"mayurkale22","email":"mayurkale22@gmail.com"},{"name":"obecny","email":"bobecny@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"275cb729e7979df89df12636d3131984c7582b43","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.10.0.tgz","fileCount":150,"integrity":"sha512-gK0Ydjqa19WoHjUCh22kEAV45/xS4vgKZKXDEYxWL9EBO4VRe4TjwS64LOwsQQMIT+zTWH1Bt1OuZPtDCiBa9w==","signatures":[{"sig":"MEQCIB7IC4Ovl5le/FFbHex3CQizX2ak+9PWYb5rwUPlfcaxAiAYTc9LYLUX5cK8FEFUJ2R/e4j+/eTazKoTzJaV4Kttmg==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":166863,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfH0AVCRA9TVsSAnZWagAA6w8P/j/pa12ROP5yrVFZXl46\nSK9R7XOHp16ZjgtmCTFu1QX+SekjLYEkL1TWsAiHAc4djHXSEjvZiLrvTLBr\nFOO784XxRBicMGUy3pyjqrlOiVxul2ysrTxV5XxTHUe/78GDbKUpp+lkZo/t\nUlphZsmNfvbFqZiVw3Ap7d8hpOIvzTUHNdopqZjmcQExnbTpIOwKO7+41g5r\nMCGl/Kq34D0PWEdzPrGnkfndQ9LaQoxsGztX1h0ql4ga0RAEzOGXrLqwQ6Bd\nqiJAFXG64SjX+ElqyKUQbcvFnHxUDCHv71dwqwn7uVDvjgjEfaJSMFRzUT/0\n4V+xzqUt5CdNxSAzW/zwKqA9N6CmaXl6sJxPVSBitX3MUx/QUQho3xjOrcU1\nPiauvDEoV+75KIfRIJ5y9QDA+9AZYWqjVRoMG0WD+Tf9DMQgJD2xyiFw+VgI\nkQvQgzwU1mMljRqtaBO9XuQRImrY4I0jsG7prHGyxK7AkqaclOYiMa1PSEfG\nh6tsHwP8Jl8ggF/DCkrEMIsw1uhlXPwmbuRtYVLqEupbKDBUF0C49jJ9UXyF\nQ6UdsRHdD7Yks2VSFjvp3xYiHcZJzAyXW1w6Dnonf31v15+G83JSxvY9E7cY\nGGBTdraYvqlnwEiUD3/qfaFOBqpDVOFm6Se2Zymj3EU9PehqBL0IEQZ9hOkF\nac81\r\n=YcBb\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"ab62a4d69b99b3a8c9c26100c04f3226af7859df","scripts":{"docs":"typedoc --tsconfig tsconfig.json --exclude test/**/*.ts","lint":"eslint . --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","watch":"tsc -w","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../","compile":"npm run version:update && tsc -p .","prepare":"npm run compile","lint:fix":"eslint . --ext .ts --fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","precompile":"tsc --version","test:browser":"nyc karma start --single-run","version:update":"node ../../scripts/version-update.js","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../"},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"lerna/3.22.1/node@v12.14.1+x64 (darwin)","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"12.14.1","dependencies":{"@opentelemetry/context-base":"^0.10.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"gts":"2.0.2","nyc":"15.1.0","karma":"5.1.0","mocha":"7.2.0","codecov":"3.7.2","typedoc":"0.17.8","webpack":"4.44.0","ts-mocha":"7.0.0","ts-loader":"8.0.1","linkinator":"2.1.1","typescript":"3.9.7","@types/node":"14.0.25","karma-mocha":"2.0.1","@types/mocha":"8.0.0","karma-webpack":"4.0.2","@types/webpack-env":"1.15.2","karma-spec-reporter":"0.0.32","karma-chrome-launcher":"3.1.0","istanbul-instrumenter-loader":"3.0.1","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_0.10.0_1595883541028_0.4184840866578965","host":"s3://npm-registry-packages"}},"0.10.1":{"name":"@opentelemetry/api","version":"0.10.1","keywords":["opentelemetry","nodejs","browser","tracing","profiling","metrics","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.10.1","maintainers":[{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"mayurkale22","email":"mayurkale22@gmail.com"},{"name":"obecny","email":"bobecny@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"da0a6adad7f388b4e722e6f286390a2eb0485ac8","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.10.1.tgz","fileCount":150,"integrity":"sha512-t1Oc5lJdrV4HOv+wbCaui/cUrSstCD42JJG6qQnhJkENzmHeV7RT8gp1Q5TuTM4HRgHR07q696qXtvCjmC9FLQ==","signatures":[{"sig":"MEUCIDYM5hzO49pyV4Ihe5TtPeUOaZuBEmSwbRxE0slYkkunAiEAyH6/zCZN38d3XtPAQoT6vCC6fC1sNSGV9zWFvDUHRhU=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":166863,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfIEBaCRA9TVsSAnZWagAAxvUP/3qInBlUzBSMnEwpNe8n\nWBTj8pjSO6lKZOG2eXSBmTGH8Ot/aHNa0v/a8KpEC0G0zf53/Ku9FD8cAWzw\nShHBGKXFVYLx4gD4G/NAc2v3e7FdmRaP/3/dapSwrz4Ud6gR8f9JKc1TuEku\nS021JUk9SPzjGClhIO/sgFjIChZePJsbGdjL9CJJnAsfrSI0VyQerYYqhBd9\nNheBxzzpmv9cI/TWPbrGHNBCHUbBGGNpOIiLJlKlz0qe8DxYXf2i0RhIVDg1\niKdguBR6p4PuRfmfoIxb45h5IdH+6OlgFohQy0XTh8EDk/P89CH8PYykxl3G\nEaO7nJzi3tjXoYA1i3xhkD2Fo0qR8Hr35zwT8YxePgVdmvZcv4VvmZXOq+Ax\nQJ/9WcWixGUTuYoTkchXo8fPiIU/NqDl/FG31t0FxnBmvmMTOw1ZuHivqdHQ\nbypHc5eKydT0HokN+gFc/iQ7ODd/EiOmdmz3eNvYR1GIHGNh0fEzDmTHL8Dq\nm0LPWaEQj8FnpRf6aTKU/CDCRieIei2qXTflbSHRMpJPS/ZiR19vzC3jL5mC\nkbNTjlvhX/CP32pxEacNwHeEoUWxQsNw9AcYUwnsaqqmyQAQ33on99tonxTf\n92xQWhMEb8ZfPS24X3fmVKucCmuxlZ1wFwh/qpysyY6rXMRJBZrgU+r1nPmS\nbLvK\r\n=fLWL\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"03981e4299282d0611d1255ab0076368d5830753","scripts":{"docs":"typedoc --tsconfig tsconfig.json --exclude test/**/*.ts","lint":"eslint . --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","watch":"tsc -w","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../","compile":"npm run version:update && tsc -p .","prepare":"npm run compile","lint:fix":"eslint . --ext .ts --fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","precompile":"tsc --version","test:browser":"nyc karma start --single-run","version:update":"node ../../scripts/version-update.js","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../"},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"lerna/3.22.1/node@v12.14.1+x64 (darwin)","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"12.14.1","dependencies":{"@opentelemetry/context-base":"^0.10.1"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"gts":"2.0.2","nyc":"15.1.0","karma":"5.1.0","mocha":"7.2.0","codecov":"3.7.2","typedoc":"0.17.8","webpack":"4.44.0","ts-mocha":"7.0.0","ts-loader":"8.0.1","linkinator":"2.1.1","typescript":"3.9.7","@types/node":"14.0.25","karma-mocha":"2.0.1","@types/mocha":"8.0.0","karma-webpack":"4.0.2","@types/webpack-env":"1.15.2","karma-spec-reporter":"0.0.32","karma-chrome-launcher":"3.1.0","istanbul-instrumenter-loader":"3.0.1","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_0.10.1_1595949146030_0.4512127188607109","host":"s3://npm-registry-packages"}},"0.10.2":{"name":"@opentelemetry/api","version":"0.10.2","keywords":["opentelemetry","nodejs","browser","tracing","profiling","metrics","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.10.2","maintainers":[{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"mayurkale22","email":"mayurkale22@gmail.com"},{"name":"obecny","email":"bobecny@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"9647b881f3e1654089ff7ea59d587b2d35060654","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.10.2.tgz","fileCount":150,"integrity":"sha512-GtpMGd6vkzDMYcpu2t9LlhEgMy/SzBwRnz48EejlRArYqZzqSzAsKmegUK7zHgl+EOIaK9mKHhnRaQu3qw20cA==","signatures":[{"sig":"MEQCICOpdgY8CqGl5XhhRhTAy6aRYnFfnA/wfBfm7MUTcS6JAiByvtg0zkpJmorPhvhkUSUEM90gePuInD02BXT24czqog==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":172537,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfKJzrCRA9TVsSAnZWagAAkiIP/Rz7Q60L1j/d+WVByy+K\n2LnN5uVRzLc5juqQghLuZAeiekq6GhkOZVVDLCJP2kcwHGQs9lwCdVbEAxMd\nsiol14HHGQ7ifpbVgSrrQi99YcuhcuCm79PC4in5RC0WJ6vH6E9W4B3SEbF7\nxN3EmAi2YZD6YBvKITO4nquVV+8tTCnrVgY4sN08QEdeLuvtuuxq/+s2R3qJ\nsvVvVcvzayjtv9ME+5ieZxHwmH7YOWo8fDQNoe8AFumTjPfhDyYkB1m230tt\nK/I/mzk7KC9n/ceRdQisJQgRDY+ZwPGYCIABVCOXWaHsSa+6njUY9QHWgvd1\nhXKFmPgAK+rm5eN4eaBKbrXKOG6/WujRy6gD2f69Av9SIUA3ggoP7pi93LiA\nfc8+JL0b/DEruOILUsOAz/AEv2J109XVPFTiFTAp8iYDqUQvK8u5g6j/Y2Mh\n3WZcuToOA6KB614N/89wrvJXxWVZhnfKsVkKTIyoGN2bUsjL8AANkFwn4EER\n1pA8J4VIHGntIuNLi5aC8RIyPCyj9Y/Gpss3zPJgDRBxxf+pPcpjlO2iQMVR\nvBJ1r9MyYwoxhyJXGU2HrCfi1ZfFxkAhuKY6JRYqjKS+7xTklngVq5J2/qFJ\nuSd0RxPsOod2dZFiNfQ4IUzz6+u7Lng2BI0uvpoHs2nQrdQQKlUXEqPRlhlI\neL3h\r\n=85jB\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"b247e69034a7888a842fe75e0a5ff06f8bea44a8","scripts":{"docs":"typedoc --tsconfig tsconfig.json --exclude test/**/*.ts","lint":"eslint . --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","watch":"tsc -w","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../","compile":"npm run version:update && tsc -p .","prepare":"npm run compile","lint:fix":"eslint . --ext .ts --fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","precompile":"tsc --version","test:browser":"nyc karma start --single-run","version:update":"node ../../scripts/version-update.js","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../"},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"lerna/3.22.1/node@v12.14.1+x64 (darwin)","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"12.14.1","dependencies":{"@opentelemetry/context-base":"^0.10.2"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"gts":"2.0.2","nyc":"15.1.0","karma":"5.1.1","mocha":"7.2.0","codecov":"3.7.2","typedoc":"0.17.8","webpack":"4.44.1","ts-mocha":"7.0.0","ts-loader":"8.0.1","linkinator":"2.1.1","typescript":"3.9.7","@types/node":"14.0.27","karma-mocha":"2.0.1","@types/mocha":"8.0.0","karma-webpack":"4.0.2","@types/webpack-env":"1.15.2","karma-spec-reporter":"0.0.32","karma-chrome-launcher":"3.1.0","istanbul-instrumenter-loader":"3.0.1","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_0.10.2_1596497131197_0.5464949590761854","host":"s3://npm-registry-packages"}},"0.10.3-canary.0":{"name":"@opentelemetry/api","version":"0.10.3-canary.0","keywords":["opentelemetry","nodejs","browser","tracing","profiling","metrics","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.10.3-canary.0","maintainers":[{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"mayurkale22","email":"mayurkale22@gmail.com"},{"name":"obecny","email":"bobecny@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"9bb26ff3281d639281d3e9df053c8688640fbd10","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.10.3-canary.0.tgz","fileCount":150,"integrity":"sha512-Oq3YI4gnhU/FnNSR6EN/9HRtNhBd/iUbAaJNcAGYgAYRzGltMsiYHmUjOzfMOutfHd/+qhUM7TszYNohxm1iew==","signatures":[{"sig":"MEUCIQCHi3ytGkmFVl/GK7BKQWud3taCc4WmK9o9KcUUJf9v+AIgHPoq3GLIXCqieGKUWgCwp0FbL9Oind+YfUeJ1SGkEW8=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":172607,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfLYWQCRA9TVsSAnZWagAAFBQP/3uHgKbllN4DajFVFG3c\ndhzaPcvX/sYMcyOMjikyIhPK/z7kwTr+uvoIC/acSYCEENp9QFuhBqsrtnXl\nGl/efbvFCC4InybSVHB7oZBTclBxCz1/LJA4ugz+Tnmfgdnh43T5k64DdICt\nivo30AvKppGjqVoCgP6Jr+BfDUhm5oaxVZGSxDg7PE0v7wLR5QjibRF+4S+I\ni2kr4PxNHepXZMixIBqZmLpCNv9nwY1DxrLHIxPItdzg6dcZqdyRHrw4hdAi\nkzUOeeRluGGrebifidkArPDsr/SYNO1ks9EXNkE2nn7DRNtycmWLEmhR507p\nzi0VRlUgSGdqVm2QBZKwB5KzJ/fx3jOBNBlYxW61hPTs1ALQyVSiCvcHZAIR\n8ROFReqA6dV+FlEDQMT/HbLJPHR841adgBwnbmJp66q8Yb4wQDFB8IryhhIv\nzofHk7fm5KWhNHrKBNXK+AAMvDBbyXv70nm0hPDUL5rhlWobz/XOpv2Xmxa1\n3tl/lKieJKbEbkJhqC6REsORcT+BCp5n0Q0k5ckcu/0zGT/Aj+uwIQG7rwox\nGeV6F/jVf2fpNeKLSoxQzHZQBt0fR5NKed7EXe/SFIcZiEGEbz9pmtYWwG1c\njO9gKU9YhXfy01ECNlOjxee+3Qofi+q4lmAveiUEnuPhyDaJgAft4tGRa9qG\nQvia\r\n=7T4b\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","readme":"# OpenTelemetry API for JavaScript\n\n[![Gitter chat][gitter-image]][gitter-url]\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the OpenTelemetry API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Quick Start\n\nTo get started you need to install the SDK and plugins, create a TracerProvider and/or MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install tracing dependencies\n$ npm install \\\n    @opentelemetry/api \\\n    @opentelemetry/core \\\n    @opentelemetry/node \\\n    @opentelemetry/tracing \\\n    @opentelemetry/exporter-jaeger \\ # add exporters as needed\n    @opentelemetry/plugin-http # add plugins as needed\n\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/master/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Tracing\n\n```javascript\nconst { NodeTracerProvider } = require(\"@opentelemetry/node\");\nconst { SimpleSpanProcessor } = require(\"@opentelemetry/tracing\");\nconst { JaegerExporter } = require(\"@opentelemetry/exporter-jaeger\");\n\nconst tracerProvider = new NodeTracerProvider();\n\n/**\n * The SimpleSpanProcessor does no batching and exports spans\n * immediately when they end. For most production use cases,\n * OpenTelemetry recommends use of the BatchSpanProcessor.\n */\ntracerProvider.addSpanProcessor(\n  new SimpleSpanProcessor(\n    new JaegerExporter({\n      serviceName: 'my-service'\n    })\n  )\n);\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries. The OpenTelemetry API provides\n * methods to set global SDK implementations, but the default SDK provides\n * a convenience method named `register` which registers same defaults\n * for you.\n *\n * By default the NodeTracerProvider uses Trace Context for propagation\n * and AsyncHooksScopeManager for context management. To learn about\n * customizing this behavior, see API Registration Options below.\n */\ntracerProvider.register();\n```\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Registration Options\n\nIf you prefer to choose your own propagator or context manager, you may pass an options object into the `tracerProvider.register()` method. Omitted or `undefined` options will be replaced by a default value and `null` values will be skipped.\n\n```javascript\nconst { B3Propagator } = require(\"@opentelemetry/core\");\n\ntracerProvider.register({\n  // Use B3 Propagation\n  propagator: new B3Propagator(),\n\n  // Skip registering a default context manager\n  contextManager: null,\n});\n```\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Trace API Documentation][trace-api-docs]\n- [Metrics API Documentation][metrics-api-docs]\n- [Propagation API Documentation][propagation-api-docs]\n- [Context API Documentation][context-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\n\n/* Initialize TracerProvider */\napi.trace.setGlobalTracerProvider(tracerProvider);\n/* returns tracerProvider (no-op if a working provider has not been initialized) */\napi.trace.getTracerProvider();\n/* returns a tracer from the registered global tracer provider (no-op if a working provider has not been initialized) */\napi.trace.getTracer(name, version);\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n\n/* Initialize Propagator */\napi.propagation.setGlobalPropagator(httpTraceContextPropagator);\n\n/* Initialize Context Manager */\napi.context.setGlobalContextManager(asyncHooksContextManager);\n```\n\n### Library Authors\n\nLibrary authors need only to depend on the `@opentelemetry/api` package and trust that the application owners which use their library will initialize an appropriate SDK.\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\n\nconst tracer = api.trace.getTracer(\"my-library-name\", \"0.2.3\");\n\nasync function doSomething() {\n  const span = tracer.startSpan(\"doSomething\", { parent: tracer.getCurrentSpan() });\n  try {\n    const result = await doSomethingElse();\n    span.end();\n    return result;\n  } catch (err) {\n    span.setStatus({\n      // use an appropriate status code here\n      code: api.CanonicalCode.INTERNAL,\n      message: err.message,\n    });\n    span.end();\n    return null;\n  }\n}\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us on [gitter][gitter-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[gitter-image]: https://badges.gitter.im/open-telemetry/opentelemetry-js.svg\n[gitter-url]: https://gitter.im/open-telemetry/opentelemetry-node?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/master/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/status.svg?path=packages/opentelemetry-api\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api\n[devDependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/dev-status.svg?path=packages/opentelemetry-api\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"f4f2f84bc087389b3206a2e17837b7b0b95fb2f2","scripts":{"docs":"typedoc --tsconfig tsconfig.json --exclude test/**/*.ts","lint":"eslint . --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","watch":"tsc -w","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../","compile":"npm run version:update && tsc -p .","prepare":"npm run compile","lint:fix":"eslint . --ext .ts --fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","precompile":"tsc --version","test:browser":"nyc karma start --single-run","version:update":"node ../../scripts/version-update.js","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../"},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"lerna/3.22.1/node@v14.7.0+x64 (linux)","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"14.7.0","dependencies":{"@opentelemetry/context-base":"^0.10.3-canary.0+f4f2f84"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"gts":"2.0.2","nyc":"15.1.0","karma":"5.1.1","mocha":"7.2.0","codecov":"3.7.2","typedoc":"0.17.8","webpack":"4.44.1","ts-mocha":"7.0.0","ts-loader":"8.0.1","linkinator":"2.1.1","typescript":"3.9.7","@types/node":"14.0.27","karma-mocha":"2.0.1","@types/mocha":"8.0.0","karma-webpack":"4.0.2","@types/webpack-env":"1.15.2","karma-spec-reporter":"0.0.32","karma-chrome-launcher":"3.1.0","istanbul-instrumenter-loader":"3.0.1","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_0.10.3-canary.0_1596818832482_0.74528530915083","host":"s3://npm-registry-packages"}},"0.10.3-alpha.34":{"name":"@opentelemetry/api","version":"0.10.3-alpha.34","keywords":["opentelemetry","nodejs","browser","tracing","profiling","metrics","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.10.3-alpha.34","maintainers":[{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"mayurkale22","email":"mayurkale22@gmail.com"},{"name":"obecny","email":"bobecny@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"58b2aaee9a8a1a02be4b183529ccc35e8b0c561e","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.10.3-alpha.34.tgz","fileCount":150,"integrity":"sha512-vVyMG0YKUaUjYqhicQtBHV3KZOVdlQNGEppeOVKnl65u9kNLKB2EKj/UvjXm/bMDr8wY39PvfdLX984Ot+iYEg==","signatures":[{"sig":"MEYCIQDWmdpquZs+lWv57oQuKouffyVkxUBtD51nCtm/T4zkeQIhAIzmUYzcK4s/vg0A7zxepCCF9/hnRmA21XDQrXxMs2xB","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":172581,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfQ+5iCRA9TVsSAnZWagAAMRwP/3BlXoNJSMH1+zr6tt92\nr/fzuOHP/I7/NETsInbcol6NWysSV1azjY+0w1TUydntFGvtJepUIl6n0xS9\nUC6/AQ6YQZyv3+b8RoE67J9TQ6FWV0aoMH3y3H4+X//PC5eNBuBhwt1IEQVj\nxG62NCPFEBHed1u4eH3rKyqXdNuyMibkeky0W/eF6pMjDqr3QIYw4XeRmHbe\nEZNmTLcMWnWvXXQ78HXcV7rF8xejYu3PKpXWBpwflIh+q/Em/rAgNVG/5Ve6\n++cgmTqiFnWcYKxtxP9qpLk9q6iyHgGoNFskhWvquNMk/MSpB3d2bHpTHPEk\neVxwpDAlLMhoWXIvV208xY0S6lKp7cqCnzWX9tTBk0ddyCTQw6C42dZMahd9\nF9eOqR+hsu6tgnFrcixV6K5aJUKpe4KJHrtZWaGMsxtp4QpBpcGcPp+MZ1BI\ni8LHqGWewYtnZveDeY9528L2RDsStkCc35574Ac6nTAYp7pr9DRllWtkNhma\n899BY2CpN919b5oTTBLb4DkkbujqoCIZgDAvoexRR3/hcr7h0Tn9wI/gqKRb\nYvvLavN19CDNcZ3UBZhpHYuHT+ecyyePV/7wKHfJrePGpLbd2GkgmfgpleBI\nsihmOvnDM62NkwWUmvJeY6KKVqjTWrJrs3JGW92Miwtk34BFsguyV6VMlb/Z\nVrdV\r\n=vTWT\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","readme":"# OpenTelemetry API for JavaScript\n\n[![Gitter chat][gitter-image]][gitter-url]\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the OpenTelemetry API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Quick Start\n\nTo get started you need to install the SDK and plugins, create a TracerProvider and/or MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install tracing dependencies\n$ npm install \\\n    @opentelemetry/api \\\n    @opentelemetry/core \\\n    @opentelemetry/node \\\n    @opentelemetry/tracing \\\n    @opentelemetry/exporter-jaeger \\ # add exporters as needed\n    @opentelemetry/plugin-http # add plugins as needed\n\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/master/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Tracing\n\n```javascript\nconst { NodeTracerProvider } = require(\"@opentelemetry/node\");\nconst { SimpleSpanProcessor } = require(\"@opentelemetry/tracing\");\nconst { JaegerExporter } = require(\"@opentelemetry/exporter-jaeger\");\n\nconst tracerProvider = new NodeTracerProvider();\n\n/**\n * The SimpleSpanProcessor does no batching and exports spans\n * immediately when they end. For most production use cases,\n * OpenTelemetry recommends use of the BatchSpanProcessor.\n */\ntracerProvider.addSpanProcessor(\n  new SimpleSpanProcessor(\n    new JaegerExporter({\n      serviceName: 'my-service'\n    })\n  )\n);\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries. The OpenTelemetry API provides\n * methods to set global SDK implementations, but the default SDK provides\n * a convenience method named `register` which registers same defaults\n * for you.\n *\n * By default the NodeTracerProvider uses Trace Context for propagation\n * and AsyncHooksScopeManager for context management. To learn about\n * customizing this behavior, see API Registration Options below.\n */\ntracerProvider.register();\n```\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Registration Options\n\nIf you prefer to choose your own propagator or context manager, you may pass an options object into the `tracerProvider.register()` method. Omitted or `undefined` options will be replaced by a default value and `null` values will be skipped.\n\n```javascript\nconst { B3Propagator } = require(\"@opentelemetry/core\");\n\ntracerProvider.register({\n  // Use B3 Propagation\n  propagator: new B3Propagator(),\n\n  // Skip registering a default context manager\n  contextManager: null,\n});\n```\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Trace API Documentation][trace-api-docs]\n- [Metrics API Documentation][metrics-api-docs]\n- [Propagation API Documentation][propagation-api-docs]\n- [Context API Documentation][context-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\n\n/* Initialize TracerProvider */\napi.trace.setGlobalTracerProvider(tracerProvider);\n/* returns tracerProvider (no-op if a working provider has not been initialized) */\napi.trace.getTracerProvider();\n/* returns a tracer from the registered global tracer provider (no-op if a working provider has not been initialized) */\napi.trace.getTracer(name, version);\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n\n/* Initialize Propagator */\napi.propagation.setGlobalPropagator(httpTraceContextPropagator);\n\n/* Initialize Context Manager */\napi.context.setGlobalContextManager(asyncHooksContextManager);\n```\n\n### Library Authors\n\nLibrary authors need only to depend on the `@opentelemetry/api` package and trust that the application owners which use their library will initialize an appropriate SDK.\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\n\nconst tracer = api.trace.getTracer(\"my-library-name\", \"0.2.3\");\n\nasync function doSomething() {\n  const span = tracer.startSpan(\"doSomething\", { parent: tracer.getCurrentSpan() });\n  try {\n    const result = await doSomethingElse();\n    span.end();\n    return result;\n  } catch (err) {\n    span.setStatus({\n      // use an appropriate status code here\n      code: api.CanonicalCode.INTERNAL,\n      message: err.message,\n    });\n    span.end();\n    return null;\n  }\n}\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us on [gitter][gitter-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[gitter-image]: https://badges.gitter.im/open-telemetry/opentelemetry-js.svg\n[gitter-url]: https://gitter.im/open-telemetry/opentelemetry-node?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/master/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/status.svg?path=packages/opentelemetry-api\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api\n[devDependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/dev-status.svg?path=packages/opentelemetry-api\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"fb06b5bb1142286acf5b326925f3af3353aa9d90","scripts":{"docs":"typedoc --tsconfig tsconfig.json --exclude test/**/*.ts","lint":"eslint . --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","watch":"tsc -w","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../","compile":"npm run version:update && tsc -p .","prepare":"npm run compile","lint:fix":"eslint . --ext .ts --fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","precompile":"tsc --version","test:browser":"nyc karma start --single-run","version:update":"node ../../scripts/version-update.js","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../"},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"lerna/3.22.1/node@v14.8.0+x64 (linux)","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"14.8.0","dependencies":{"@opentelemetry/context-base":"^0.10.2"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"gts":"2.0.2","nyc":"15.1.0","karma":"5.1.1","mocha":"7.2.0","codecov":"3.7.2","typedoc":"0.18.0","webpack":"4.44.1","ts-mocha":"7.0.0","ts-loader":"8.0.2","linkinator":"2.1.1","typescript":"3.9.7","@types/node":"14.0.27","karma-mocha":"2.0.1","@types/mocha":"8.0.2","karma-webpack":"4.0.2","@types/webpack-env":"1.15.2","karma-spec-reporter":"0.0.32","karma-chrome-launcher":"3.1.0","istanbul-instrumenter-loader":"3.0.1","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_0.10.3-alpha.34_1598287458272_0.783326051893291","host":"s3://npm-registry-packages"}},"0.10.3-alpha.35":{"name":"@opentelemetry/api","version":"0.10.3-alpha.35","keywords":["opentelemetry","nodejs","browser","tracing","profiling","metrics","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.10.3-alpha.35","maintainers":[{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"mayurkale22","email":"mayurkale22@gmail.com"},{"name":"obecny","email":"bobecny@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"39744208f794b4cffdeb38e439426cd2ba50a3f4","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.10.3-alpha.35.tgz","fileCount":153,"integrity":"sha512-nedx1cSst4i4Mp9n0L3LAVf2Z1O2nJA9sfdo9Wl8V1U3220fDC8rNxyTWipTyYs8gCgPBa6mC04Io/dWn34HeQ==","signatures":[{"sig":"MEUCICkiPfXOwLW1vQtIF70JkZLV3TVTemkF1GZj2mew907IAiEApmqEjBcuGl9C9mqAzEC+EI3cBgd8JBoFx/lsQqM3tJc=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":174797,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfREL4CRA9TVsSAnZWagAAivcP/RJNmORoh8vL6bk7qABI\njxEbO5amd2D4ZVM2x9w4iKvckOja3KCT+zVo2aJxP7D+Kz+qjtYjrF7lUqJB\nYbAyZTrDqzV9Q7V1/L9S+/Z5dtG0CBGPp/p81Jws9qXeHzBAz3wVczDILBbo\n5w57QN9nAynyz8+K2bsJpwhc2KKkyApYCoO/hNxO2KSIzc4QM5Acfyywh/A0\n0+iqr9HpcTadzRq+N2CN0YL4EzW4tx0VOaRdJkO7xgWFfhJwfgX4i7mbGOqs\nxSZrpqB+2MRSyQysa5m1tFlJG5gOf4CfPeQK8WY33/kA3nuq5MpuFEd7esDu\nJ5OmS9YUyh5UvTDhol9N9nK0BTF+qPXNsOrHHLpU7hUTQ3mt+Zq1G+tYa+L+\nT95qo9c1zI95GrfZGmk5vJKHC44JHeygOaazc+r3Vf9BZN+/xZHKddCgYZ3c\nu7c8Ump2P3VK7uq+PhCjzjPnu+ZPIDBtib94AfBnNFDSLmtHIaSnoizkSrIy\nwTzaDc8xIp+BlntGi8Pnrml448AiGNelaVhK5qsa9ie6i1ebQHHt6QNOfFKd\nuuyfOgJUB3YS6SPm+gfLYYAgZEAQwAzBTaOugpXojQhNOHavM/8SGOC6MNt+\nRNOZrRGpyFZHP9+q3GMg+2wI367caEfDy4KRmgurw/Qeatp29InVvwXWhXQC\noF6A\r\n=X3P0\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","readme":"# OpenTelemetry API for JavaScript\n\n[![Gitter chat][gitter-image]][gitter-url]\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the OpenTelemetry API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Quick Start\n\nTo get started you need to install the SDK and plugins, create a TracerProvider and/or MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install tracing dependencies\n$ npm install \\\n    @opentelemetry/api \\\n    @opentelemetry/core \\\n    @opentelemetry/node \\\n    @opentelemetry/tracing \\\n    @opentelemetry/exporter-jaeger \\ # add exporters as needed\n    @opentelemetry/plugin-http # add plugins as needed\n\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/master/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Tracing\n\n```javascript\nconst { NodeTracerProvider } = require(\"@opentelemetry/node\");\nconst { SimpleSpanProcessor } = require(\"@opentelemetry/tracing\");\nconst { JaegerExporter } = require(\"@opentelemetry/exporter-jaeger\");\n\nconst tracerProvider = new NodeTracerProvider();\n\n/**\n * The SimpleSpanProcessor does no batching and exports spans\n * immediately when they end. For most production use cases,\n * OpenTelemetry recommends use of the BatchSpanProcessor.\n */\ntracerProvider.addSpanProcessor(\n  new SimpleSpanProcessor(\n    new JaegerExporter({\n      serviceName: 'my-service'\n    })\n  )\n);\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries. The OpenTelemetry API provides\n * methods to set global SDK implementations, but the default SDK provides\n * a convenience method named `register` which registers same defaults\n * for you.\n *\n * By default the NodeTracerProvider uses Trace Context for propagation\n * and AsyncHooksScopeManager for context management. To learn about\n * customizing this behavior, see API Registration Options below.\n */\ntracerProvider.register();\n```\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Registration Options\n\nIf you prefer to choose your own propagator or context manager, you may pass an options object into the `tracerProvider.register()` method. Omitted or `undefined` options will be replaced by a default value and `null` values will be skipped.\n\n```javascript\nconst { B3Propagator } = require(\"@opentelemetry/core\");\n\ntracerProvider.register({\n  // Use B3 Propagation\n  propagator: new B3Propagator(),\n\n  // Skip registering a default context manager\n  contextManager: null,\n});\n```\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Trace API Documentation][trace-api-docs]\n- [Metrics API Documentation][metrics-api-docs]\n- [Propagation API Documentation][propagation-api-docs]\n- [Context API Documentation][context-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\n\n/* Initialize TracerProvider */\napi.trace.setGlobalTracerProvider(tracerProvider);\n/* returns tracerProvider (no-op if a working provider has not been initialized) */\napi.trace.getTracerProvider();\n/* returns a tracer from the registered global tracer provider (no-op if a working provider has not been initialized) */\napi.trace.getTracer(name, version);\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n\n/* Initialize Propagator */\napi.propagation.setGlobalPropagator(httpTraceContextPropagator);\n\n/* Initialize Context Manager */\napi.context.setGlobalContextManager(asyncHooksContextManager);\n```\n\n### Library Authors\n\nLibrary authors need only to depend on the `@opentelemetry/api` package and trust that the application owners which use their library will initialize an appropriate SDK.\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\n\nconst tracer = api.trace.getTracer(\"my-library-name\", \"0.2.3\");\n\nasync function doSomething() {\n  const span = tracer.startSpan(\"doSomething\", { parent: tracer.getCurrentSpan() });\n  try {\n    const result = await doSomethingElse();\n    span.end();\n    return result;\n  } catch (err) {\n    span.setStatus({\n      // use an appropriate status code here\n      code: api.CanonicalCode.INTERNAL,\n      message: err.message,\n    });\n    span.end();\n    return null;\n  }\n}\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us on [gitter][gitter-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[gitter-image]: https://badges.gitter.im/open-telemetry/opentelemetry-js.svg\n[gitter-url]: https://gitter.im/open-telemetry/opentelemetry-node?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/master/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/status.svg?path=packages/opentelemetry-api\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api\n[devDependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/dev-status.svg?path=packages/opentelemetry-api\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"2ee9f1aaf7b61c4b4ae6b748f0a07f8fc708f07e","scripts":{"docs":"typedoc --tsconfig tsconfig.json --exclude test/**/*.ts","lint":"eslint . --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","watch":"tsc -w","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../","compile":"npm run version:update && tsc -p .","prepare":"npm run compile","lint:fix":"eslint . --ext .ts --fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","precompile":"tsc --version","test:browser":"nyc karma start --single-run","version:update":"node ../../scripts/version-update.js","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../"},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"lerna/3.22.1/node@v14.8.0+x64 (linux)","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"14.8.0","dependencies":{"@opentelemetry/context-base":"^0.10.2"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"gts":"2.0.2","nyc":"15.1.0","karma":"5.1.1","mocha":"7.2.0","codecov":"3.7.2","typedoc":"0.18.0","webpack":"4.44.1","ts-mocha":"7.0.0","ts-loader":"8.0.2","linkinator":"2.1.1","typescript":"3.9.7","@types/node":"14.0.27","karma-mocha":"2.0.1","@types/mocha":"8.0.2","karma-webpack":"4.0.2","@types/webpack-env":"1.15.2","karma-spec-reporter":"0.0.32","karma-chrome-launcher":"3.1.0","istanbul-instrumenter-loader":"3.0.1","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_0.10.3-alpha.35_1598309112196_0.05350171660972647","host":"s3://npm-registry-packages"}},"0.10.3-alpha.41":{"name":"@opentelemetry/api","version":"0.10.3-alpha.41","keywords":["opentelemetry","nodejs","browser","tracing","profiling","metrics","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.10.3-alpha.41","maintainers":[{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"mayurkale22","email":"mayurkale22@gmail.com"},{"name":"obecny","email":"bobecny@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"893d10e5758be3a9be96bd308edf0a08b3016413","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.10.3-alpha.41.tgz","fileCount":159,"integrity":"sha512-RvEiQ1gDcgsi8kf3gk8jggLtRAV+Btme976tfzFYYJ2BKtftQEuFb80W+pUs7bu7Nw2yfMCsWeItc4/9suDgrA==","signatures":[{"sig":"MEYCIQDa+jsok3Lmnm+7TeeYk/Ak8R+G5aRXtrgW50lh/2ZL+gIhAKvWuqKX6sR7W4cbvhC4gn80sM/kxccExf4s9GTdqjIe","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":183533,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfR9p+CRA9TVsSAnZWagAAcH8QAJr5JSUWJSHqsAol0r/V\n1QjmTSAjZn0CshzcrBblkiUXIUGFLpML8Ey0e0RtEiKk6Z66OdkWvI86S6FF\n1cktoDg94C7QzzAtdt5i19ViUskEqA3/RHNiQ/nkj7D8jcWK+Fk6n7p6o4ty\nlqxLAeBe9AM3y22GZJ0uwoy9a40yhSHEtYyhMwx0UWON9U0T43zzH6cvSnhj\nuxppTXmmTVBA41d/DFyjm0aUneykqnDFk+ggZktRHqiMS42HsUllqgzPtlJ+\n1Gqihwd7rPzuK8gj4v4HsORtSSvMVCpWy7ju7UuclugABpO9gGnfVrVokneh\nmbDjzSbLcj/HNWVs6A+/6y6dWG7mz5hbKE3xlJH2FkKbsgksw08c+xbVh1E+\nw8N6pkKhb5xIk0kdafPfu1Fp+aR8UGbsx4VbFo2my2mQbjk3QAGV0ZOuPh5K\n+mbMARrUDmv2GFPFFNTa5NGIN3z2AHaBPksaxKVkDshBVD6+s2j4xNmkomU+\nuaRWpA/zDWg3rAjGObPtzXUCeiQdWfgTzIdMbBqgKxg5dpCnrVROlEavLi/B\nWHKuOB3AeznBYH0XUkV2NevCRpTW1+aKdBP7Y6iWmHOwPQs0Abyl8hw9hOAM\n8LT4MFXYRC/9lrmqRI/SuOM8//frz1oXyGDJfLNr9KtMzPP5i9EuPlca/dkZ\n9IHW\r\n=Bct9\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","readme":"# OpenTelemetry API for JavaScript\n\n[![Gitter chat][gitter-image]][gitter-url]\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the OpenTelemetry API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Quick Start\n\nTo get started you need to install the SDK and plugins, create a TracerProvider and/or MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install tracing dependencies\n$ npm install \\\n    @opentelemetry/api \\\n    @opentelemetry/core \\\n    @opentelemetry/node \\\n    @opentelemetry/tracing \\\n    @opentelemetry/exporter-jaeger \\ # add exporters as needed\n    @opentelemetry/plugin-http # add plugins as needed\n\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/master/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Tracing\n\n```javascript\nconst { NodeTracerProvider } = require(\"@opentelemetry/node\");\nconst { SimpleSpanProcessor } = require(\"@opentelemetry/tracing\");\nconst { JaegerExporter } = require(\"@opentelemetry/exporter-jaeger\");\n\nconst tracerProvider = new NodeTracerProvider();\n\n/**\n * The SimpleSpanProcessor does no batching and exports spans\n * immediately when they end. For most production use cases,\n * OpenTelemetry recommends use of the BatchSpanProcessor.\n */\ntracerProvider.addSpanProcessor(\n  new SimpleSpanProcessor(\n    new JaegerExporter({\n      serviceName: 'my-service'\n    })\n  )\n);\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries. The OpenTelemetry API provides\n * methods to set global SDK implementations, but the default SDK provides\n * a convenience method named `register` which registers same defaults\n * for you.\n *\n * By default the NodeTracerProvider uses Trace Context for propagation\n * and AsyncHooksScopeManager for context management. To learn about\n * customizing this behavior, see API Registration Options below.\n */\ntracerProvider.register();\n```\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Registration Options\n\nIf you prefer to choose your own propagator or context manager, you may pass an options object into the `tracerProvider.register()` method. Omitted or `undefined` options will be replaced by a default value and `null` values will be skipped.\n\n```javascript\nconst { B3Propagator } = require(\"@opentelemetry/core\");\n\ntracerProvider.register({\n  // Use B3 Propagation\n  propagator: new B3Propagator(),\n\n  // Skip registering a default context manager\n  contextManager: null,\n});\n```\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Trace API Documentation][trace-api-docs]\n- [Metrics API Documentation][metrics-api-docs]\n- [Propagation API Documentation][propagation-api-docs]\n- [Context API Documentation][context-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\n\n/* Initialize TracerProvider */\napi.trace.setGlobalTracerProvider(tracerProvider);\n/* returns tracerProvider (no-op if a working provider has not been initialized) */\napi.trace.getTracerProvider();\n/* returns a tracer from the registered global tracer provider (no-op if a working provider has not been initialized) */\napi.trace.getTracer(name, version);\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n\n/* Initialize Propagator */\napi.propagation.setGlobalPropagator(httpTraceContextPropagator);\n\n/* Initialize Context Manager */\napi.context.setGlobalContextManager(asyncHooksContextManager);\n```\n\n### Library Authors\n\nLibrary authors need only to depend on the `@opentelemetry/api` package and trust that the application owners which use their library will initialize an appropriate SDK.\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\n\nconst tracer = api.trace.getTracer(\"my-library-name\", \"0.2.3\");\n\nasync function doSomething() {\n  const span = tracer.startSpan(\"doSomething\", { parent: tracer.getCurrentSpan() });\n  try {\n    const result = await doSomethingElse();\n    span.end();\n    return result;\n  } catch (err) {\n    span.setStatus({\n      // use an appropriate status code here\n      code: api.CanonicalCode.INTERNAL,\n      message: err.message,\n    });\n    span.end();\n    return null;\n  }\n}\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us on [gitter][gitter-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[gitter-image]: https://badges.gitter.im/open-telemetry/opentelemetry-js.svg\n[gitter-url]: https://gitter.im/open-telemetry/opentelemetry-node?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/master/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/status.svg?path=packages/opentelemetry-api\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api\n[devDependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/dev-status.svg?path=packages/opentelemetry-api\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"5c7753fe6534a34f0f4eaf653d53f8c002ee299d","scripts":{"docs":"typedoc --tsconfig tsconfig.json --exclude test/**/*.ts","lint":"eslint . --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","watch":"tsc -w","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../","compile":"npm run version:update && tsc -p .","prepare":"npm run compile","lint:fix":"eslint . --ext .ts --fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","precompile":"tsc --version","test:browser":"nyc karma start --single-run","version:update":"node ../../scripts/version-update.js","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../"},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"lerna/3.22.1/node@v14.8.0+x64 (linux)","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"14.8.0","dependencies":{"@opentelemetry/context-base":"^0.10.2"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"gts":"2.0.2","nyc":"15.1.0","karma":"5.1.1","mocha":"7.2.0","sinon":"9.0.3","codecov":"3.7.2","typedoc":"0.18.0","webpack":"4.44.1","ts-mocha":"7.0.0","ts-loader":"8.0.2","linkinator":"2.1.1","typescript":"3.9.7","@types/node":"14.0.27","karma-mocha":"2.0.1","@types/mocha":"8.0.2","@types/sinon":"4.3.1","karma-webpack":"4.0.2","@types/webpack-env":"1.15.2","karma-spec-reporter":"0.0.32","karma-chrome-launcher":"3.1.0","istanbul-instrumenter-loader":"3.0.1","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_0.10.3-alpha.41_1598544509600_0.23851191948259376","host":"s3://npm-registry-packages"}},"0.11.1-alpha.48":{"name":"@opentelemetry/api","version":"0.11.1-alpha.48","keywords":["opentelemetry","nodejs","browser","tracing","profiling","metrics","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.11.1-alpha.48","maintainers":[{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"mayurkale22","email":"mayurkale22@gmail.com"},{"name":"obecny","email":"bobecny@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"76374b1722453a5bb43e57d5b56dffbcffc9304a","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.11.1-alpha.48.tgz","fileCount":162,"integrity":"sha512-x04Dsjoc8mWXhLUumggyfEMWhFFPnBEF1MV8w491kXKhkJ1DPRL72fU3H77ztk7At8i1J74ovf7wx8YKSdxbvg==","signatures":[{"sig":"MEQCID9sHdgwbR9P+zCoP7GUA8ev/m8IFHG5+ijac8xSGccRAiBtjCYgCH6P/eS9ck43zOwbXzXs/+SwnXy8OY1gORS3fg==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":184995,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfTp/YCRA9TVsSAnZWagAAOOkQAKFl3c+wGWHUJ27hAvAz\nj4cWH39UEiuj55JzXjw2Ccm9NDn9OeILq4ktfDdKO39yMh1CBiDFk1oN/+5u\nguOhDCWop6ZeNkhdmlrNd994+s8Wq0LIx7LZG8lR5pBcCDGmM73Al4OMMe0Y\n4K7nXXlqkF9T42uoRthMyq6NxGqF/4U4i8SQcbeUKsXLALNb62utFxKQCpJD\nBH8iYYp2MCAzDg88KjLh70Q4FzmPX4SAOcVFPvEXE2D1xEqojYZEl75/PnGd\nmwF9buDFILa3HIVOHrOGL8fs4AVU7CF1x4w+rsdvK/ts0mj5JJV2NKEn7LZ8\nN617u2evfVVizkA68o+JFjhi1y1aGy7k04nR4ApcuSDiHN+AKFT4qoiKqiXH\nAJtVf4DN8gSGHUkdX3grmHXM0V4HnEgluH8meZgZCK+1cOKnrikzbKBHXo0w\n7SEebl9CN7k5S5w6XgvcHrZakD18XtbSkzen8YZhl8D89RasuRdI3q/oaNE7\noHOZdo+kaAPHaXIB/jLTygvdX8XED/OtwlOhXTRhdToMYa0pE5PHv8v9P2EF\nl4ZOgVZYNGBbQEnsH7O2xxw9v8f8z4dv8z+vo1pkl3RYuRRaJl5bpd9ZicjX\nTNHq0SmhLJ4zBmcG4ePk2WR3fWBBQqH4lNux47Vravu1Py0bw7bsIDcqfvtQ\nOWRj\r\n=jfip\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","readme":"# OpenTelemetry API for JavaScript\n\n[![Gitter chat][gitter-image]][gitter-url]\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the OpenTelemetry API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Quick Start\n\nTo get started you need to install the SDK and plugins, create a TracerProvider and/or MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install tracing dependencies\n$ npm install \\\n    @opentelemetry/api \\\n    @opentelemetry/core \\\n    @opentelemetry/node \\\n    @opentelemetry/tracing \\\n    @opentelemetry/exporter-jaeger \\ # add exporters as needed\n    @opentelemetry/plugin-http # add plugins as needed\n\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/master/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Tracing\n\n```javascript\nconst { NodeTracerProvider } = require(\"@opentelemetry/node\");\nconst { SimpleSpanProcessor } = require(\"@opentelemetry/tracing\");\nconst { JaegerExporter } = require(\"@opentelemetry/exporter-jaeger\");\n\nconst tracerProvider = new NodeTracerProvider();\n\n/**\n * The SimpleSpanProcessor does no batching and exports spans\n * immediately when they end. For most production use cases,\n * OpenTelemetry recommends use of the BatchSpanProcessor.\n */\ntracerProvider.addSpanProcessor(\n  new SimpleSpanProcessor(\n    new JaegerExporter({\n      serviceName: 'my-service'\n    })\n  )\n);\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries. The OpenTelemetry API provides\n * methods to set global SDK implementations, but the default SDK provides\n * a convenience method named `register` which registers same defaults\n * for you.\n *\n * By default the NodeTracerProvider uses Trace Context for propagation\n * and AsyncHooksScopeManager for context management. To learn about\n * customizing this behavior, see API Registration Options below.\n */\ntracerProvider.register();\n```\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Registration Options\n\nIf you prefer to choose your own propagator or context manager, you may pass an options object into the `tracerProvider.register()` method. Omitted or `undefined` options will be replaced by a default value and `null` values will be skipped.\n\n```javascript\nconst { B3Propagator } = require(\"@opentelemetry/core\");\n\ntracerProvider.register({\n  // Use B3 Propagation\n  propagator: new B3Propagator(),\n\n  // Skip registering a default context manager\n  contextManager: null,\n});\n```\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Trace API Documentation][trace-api-docs]\n- [Metrics API Documentation][metrics-api-docs]\n- [Propagation API Documentation][propagation-api-docs]\n- [Context API Documentation][context-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\n\n/* Initialize TracerProvider */\napi.trace.setGlobalTracerProvider(tracerProvider);\n/* returns tracerProvider (no-op if a working provider has not been initialized) */\napi.trace.getTracerProvider();\n/* returns a tracer from the registered global tracer provider (no-op if a working provider has not been initialized) */\napi.trace.getTracer(name, version);\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n\n/* Initialize Propagator */\napi.propagation.setGlobalPropagator(httpTraceContextPropagator);\n\n/* Initialize Context Manager */\napi.context.setGlobalContextManager(asyncHooksContextManager);\n```\n\n### Library Authors\n\nLibrary authors need only to depend on the `@opentelemetry/api` package and trust that the application owners which use their library will initialize an appropriate SDK.\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\n\nconst tracer = api.trace.getTracer(\"my-library-name\", \"0.2.3\");\n\nasync function doSomething() {\n  const span = tracer.startSpan(\"doSomething\", { parent: tracer.getCurrentSpan() });\n  try {\n    const result = await doSomethingElse();\n    span.end();\n    return result;\n  } catch (err) {\n    span.setStatus({\n      // use an appropriate status code here\n      code: api.CanonicalCode.INTERNAL,\n      message: err.message,\n    });\n    span.end();\n    return null;\n  }\n}\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us on [gitter][gitter-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[gitter-image]: https://badges.gitter.im/open-telemetry/opentelemetry-js.svg\n[gitter-url]: https://gitter.im/open-telemetry/opentelemetry-node?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/master/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/status.svg?path=packages/opentelemetry-api\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api\n[devDependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/dev-status.svg?path=packages/opentelemetry-api\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"15174c6647ab9863dfc1424412fa60f2fddb3351","scripts":{"docs":"typedoc --tsconfig tsconfig.json --exclude test/**/*.ts","lint":"eslint . --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","watch":"tsc -w","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../","compile":"npm run version:update && tsc -p .","prepare":"npm run compile","lint:fix":"eslint . --ext .ts --fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","precompile":"tsc --version","test:browser":"nyc karma start --single-run","version:update":"node ../../scripts/version-update.js","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../"},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"lerna/3.22.1/node@v14.8.0+x64 (linux)","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"14.8.0","dependencies":{"@opentelemetry/context-base":"^0.11.1-alpha.48+15174c6"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"gts":"2.0.2","nyc":"15.1.0","karma":"5.1.1","mocha":"7.2.0","sinon":"9.0.3","codecov":"3.7.2","typedoc":"0.18.0","webpack":"4.44.1","ts-mocha":"7.0.0","ts-loader":"8.0.2","linkinator":"2.1.1","typescript":"3.9.7","@types/node":"14.0.27","karma-mocha":"2.0.1","@types/mocha":"8.0.2","@types/sinon":"4.3.1","karma-webpack":"4.0.2","@types/webpack-env":"1.15.2","karma-spec-reporter":"0.0.32","karma-chrome-launcher":"3.1.0","istanbul-instrumenter-loader":"3.0.1","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_0.11.1-alpha.48_1598988248346_0.10477424023506265","host":"s3://npm-registry-packages"}},"0.11.0":{"name":"@opentelemetry/api","version":"0.11.0","keywords":["opentelemetry","nodejs","browser","tracing","profiling","metrics","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.11.0","maintainers":[{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"mayurkale22","email":"mayurkale22@gmail.com"},{"name":"obecny","email":"bobecny@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"e0f6d96b3754306e55fe6154d81ee048c7529fd6","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.11.0.tgz","fileCount":171,"integrity":"sha512-K+1ADLMxduhsXoZ0GRfi9Pw162FvzBQLDQlHru1lg86rpIU+4XqdJkSGo6y3Kg+GmOWq1HNHOA/ydw/rzHQkRg==","signatures":[{"sig":"MEYCIQC8xyoQ0GcgcyaT8NO1DdVC+Ruyq4k4xtTdLjhKXleRhwIhAIzigV4u3oocErRvlJwkr1pbmRWkxAU9pj5jayjunLh6","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":191178,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfTqG9CRA9TVsSAnZWagAASKUP/iimhDzk2iH+iIA3UUiV\ni+FZkNP2mkOw/PDAyWN9ZkH06I0opH6H5gcDTa3IrlFqSvyngKukhwttnE4E\nkk7FGXsQ5HyemCzjnunZbmwGea5E+1GSdMieYC9sH9sFVCFAR+gp+0cMX1gu\n97Dtjjq3ghn5Lk4+LoDBiAgDxY6/08au8LEqpF7+om+XTpZLfh3X9LTgPnz1\n+xGXzBx/wY/1hfNTXctZz6WAlmTAFZ2bjJUodKbkd1iELk5ht9sHEN5ZVJ8i\nxHZ9V0KbLLwm6fCQd6YDUxauXKz5i+aK9E6bRIkFgoxKHJPFVKh3YuhtzKgt\nmWh/jabLBI50u0T2IVsMbWJSWTnsBVEpZ+e2hxgb9vB43aP6RAwmn7Uiqwpc\naKLvbnBSs578/sgK+szf1dQs7s62ObGCczJ0NoQNGTfOmMe01knKRxgx3CgD\nEcYL5vNWdURiVvpA4lmHjvMSQaYPfDJvRBkFh3SDI2k0T5QStXKA2RRuqDP9\n7p9rZCnjofh8FA73xU00axkgbKoquzUAGkG5Wve22oi157mlwLPY23bJ5v9l\n6ok44P7xR/IjuCk5/NKaiJScPyMXmgOZfg46BNUmNL6OuonERxSLqxd6NKpi\nGDSIZg3U4BQel5XBiM4AnnBGRu6Im1Tgdh2wR0iGpp0CGcmqwDyZFH0skW/c\n1qXz\r\n=DIsD\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"15174c6647ab9863dfc1424412fa60f2fddb3351","scripts":{"docs":"typedoc --tsconfig tsconfig.json --exclude test/**/*.ts","lint":"eslint . --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","watch":"tsc -w","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../","compile":"npm run version:update && tsc -p .","prepare":"npm run compile","lint:fix":"eslint . --ext .ts --fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","precompile":"tsc --version","test:browser":"nyc karma start --single-run","version:update":"node ../../scripts/version-update.js","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../"},"_npmUser":{"name":"obecny","email":"bobecny@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"lerna/3.22.1/node@v14.4.0+x64 (darwin)","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"14.4.0","dependencies":{"@opentelemetry/context-base":"^0.11.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"gts":"2.0.2","nyc":"15.1.0","karma":"5.1.1","mocha":"7.2.0","sinon":"9.0.3","codecov":"3.7.2","typedoc":"0.18.0","webpack":"4.44.1","ts-mocha":"7.0.0","ts-loader":"8.0.2","linkinator":"2.1.1","typescript":"3.9.7","@types/node":"14.0.27","karma-mocha":"2.0.1","@types/mocha":"8.0.2","@types/sinon":"4.3.1","karma-webpack":"4.0.2","@types/webpack-env":"1.15.2","karma-spec-reporter":"0.0.32","karma-chrome-launcher":"3.1.0","istanbul-instrumenter-loader":"3.0.1","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_0.11.0_1598988732934_0.14482583409325978","host":"s3://npm-registry-packages"}},"0.11.1-alpha.15":{"name":"@opentelemetry/api","version":"0.11.1-alpha.15","keywords":["opentelemetry","nodejs","browser","tracing","profiling","metrics","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.11.1-alpha.15","maintainers":[{"name":"obecny","email":"bobecny@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"mayurkale22","email":"mayurkale22@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"72d0ec099544ed216043bb91e9681034813829c8","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.11.1-alpha.15.tgz","fileCount":162,"integrity":"sha512-7g3KV6pqZdYkq9goryv/UDptfv1S80GHt8OVeoZ8HO14AuLqQE9N9mpzDh4N+MwmsrUPFNfcbwwOtMr4W3Lzeg==","signatures":[{"sig":"MEUCIGgvNfr/l8cCJ77wrckylWzqldn9NwdeKEqlWaQSqRA0AiEAsnHBSrXO2Fm6om3y/U0L8wyra8+8rEsgiUrjRgJhaTc=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":184978,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfaB4sCRA9TVsSAnZWagAA33IP/iFFEy2zEGFVfgO9K7CL\nrRTky8biwNa5UKvIJftaePxVp9VHO8LyaX+V+xrMl2JP5bQFEyGD/A+2UjQP\nQZswGYSPrDO/j8ayzFgAstLrSxmM8Cvi9JZuxPranMEZ3BL1yszAr7nTk7dc\nbTinmihm/ZJb3S1rRf2QrhsbnT7Dd65PtvXq/qd/OAxaGAxiKz/cgk4XbZwn\nf1jyz3laG/6ufeKzwdMSR0JuRHMBIbkJ35xbSqBrDHaQhbT72e36tuPU08lf\nOV87iWc5kQYYQ6qW8vFZo4/OjadGk93Fg50hXZyaBVWXu/X6ooiluE/pSM0X\n5OrP10dntwqMUv6wrNz6kSkkAOl7G/7ufUfhhsJNra1K3BnOgR9CiTwQgYtO\n7rpXB2xgApocvH6k3bpidDs+Je9z+g2XAVR0ktKrTigeYSjiqHrKTlXuzNmr\nZkywduJWl+fg8xYTCHIX5xy7y9PNLei9IOKBcCNNmQ+1WlZrWVUNtqTvd5WF\nfvXZ+V5YyTcxJZTM/lTcbCujKVDFmtvlbiyRfJwk06tqvDGFjbz+YglASf7t\nTsESKkrnZTY+D3sj95gDcZlZ4LSrZ8qmLq505cZjPRkc8Yj/cqW1fBjGMXZl\n4mpu+Kp1B7pgQW1ngEuTiPMQU2ZfYNJpve+dZbsjOu4H0w7zLER/A4Z5ZaVd\nVtcu\r\n=A+1U\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","readme":"# OpenTelemetry API for JavaScript\n\n[![Gitter chat][gitter-image]][gitter-url]\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the OpenTelemetry API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Quick Start\n\nTo get started you need to install the SDK and plugins, create a TracerProvider and/or MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install tracing dependencies\n$ npm install \\\n    @opentelemetry/api \\\n    @opentelemetry/core \\\n    @opentelemetry/node \\\n    @opentelemetry/tracing \\\n    @opentelemetry/exporter-jaeger \\ # add exporters as needed\n    @opentelemetry/plugin-http # add plugins as needed\n\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/master/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Tracing\n\n```javascript\nconst { NodeTracerProvider } = require(\"@opentelemetry/node\");\nconst { SimpleSpanProcessor } = require(\"@opentelemetry/tracing\");\nconst { JaegerExporter } = require(\"@opentelemetry/exporter-jaeger\");\n\nconst tracerProvider = new NodeTracerProvider();\n\n/**\n * The SimpleSpanProcessor does no batching and exports spans\n * immediately when they end. For most production use cases,\n * OpenTelemetry recommends use of the BatchSpanProcessor.\n */\ntracerProvider.addSpanProcessor(\n  new SimpleSpanProcessor(\n    new JaegerExporter({\n      serviceName: 'my-service'\n    })\n  )\n);\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries. The OpenTelemetry API provides\n * methods to set global SDK implementations, but the default SDK provides\n * a convenience method named `register` which registers same defaults\n * for you.\n *\n * By default the NodeTracerProvider uses Trace Context for propagation\n * and AsyncHooksScopeManager for context management. To learn about\n * customizing this behavior, see API Registration Options below.\n */\ntracerProvider.register();\n```\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Registration Options\n\nIf you prefer to choose your own propagator or context manager, you may pass an options object into the `tracerProvider.register()` method. Omitted or `undefined` options will be replaced by a default value and `null` values will be skipped.\n\n```javascript\nconst { B3Propagator } = require(\"@opentelemetry/core\");\n\ntracerProvider.register({\n  // Use B3 Propagation\n  propagator: new B3Propagator(),\n\n  // Skip registering a default context manager\n  contextManager: null,\n});\n```\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Trace API Documentation][trace-api-docs]\n- [Metrics API Documentation][metrics-api-docs]\n- [Propagation API Documentation][propagation-api-docs]\n- [Context API Documentation][context-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\n\n/* Initialize TracerProvider */\napi.trace.setGlobalTracerProvider(tracerProvider);\n/* returns tracerProvider (no-op if a working provider has not been initialized) */\napi.trace.getTracerProvider();\n/* returns a tracer from the registered global tracer provider (no-op if a working provider has not been initialized) */\napi.trace.getTracer(name, version);\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n\n/* Initialize Propagator */\napi.propagation.setGlobalPropagator(httpTraceContextPropagator);\n\n/* Initialize Context Manager */\napi.context.setGlobalContextManager(asyncHooksContextManager);\n```\n\n### Library Authors\n\nLibrary authors need only to depend on the `@opentelemetry/api` package and trust that the application owners which use their library will initialize an appropriate SDK.\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\n\nconst tracer = api.trace.getTracer(\"my-library-name\", \"0.2.3\");\n\nasync function doSomething() {\n  const span = tracer.startSpan(\"doSomething\", { parent: tracer.getCurrentSpan() });\n  try {\n    const result = await doSomethingElse();\n    span.end();\n    return result;\n  } catch (err) {\n    span.setStatus({\n      // use an appropriate status code here\n      code: api.CanonicalCode.INTERNAL,\n      message: err.message,\n    });\n    span.end();\n    return null;\n  }\n}\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us on [gitter][gitter-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[gitter-image]: https://badges.gitter.im/open-telemetry/opentelemetry-js.svg\n[gitter-url]: https://gitter.im/open-telemetry/opentelemetry-node?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/master/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/status.svg?path=packages/opentelemetry-api\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api\n[devDependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/dev-status.svg?path=packages/opentelemetry-api\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"e170039015e8a1a7419bb835a00659b2a734b8a6","scripts":{"docs":"typedoc --tsconfig tsconfig.json --exclude test/**/*.ts","lint":"eslint . --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","watch":"tsc -w","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../","compile":"npm run version:update && tsc -p .","prepare":"npm run compile","lint:fix":"eslint . --ext .ts --fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","precompile":"tsc --version","test:browser":"nyc karma start --single-run","version:update":"node ../../scripts/version-update.js","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../"},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"lerna/3.22.1/node@v14.10.1+x64 (linux)","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"14.10.1","dependencies":{"@opentelemetry/context-base":"^0.11.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"gts":"2.0.2","nyc":"15.1.0","karma":"5.1.1","mocha":"7.2.0","sinon":"9.0.3","codecov":"3.7.2","typedoc":"0.18.0","webpack":"4.44.1","ts-mocha":"7.0.0","ts-loader":"8.0.2","linkinator":"2.1.1","typescript":"3.9.7","@types/node":"14.0.27","karma-mocha":"2.0.1","@types/mocha":"8.0.2","@types/sinon":"9.0.5","karma-webpack":"4.0.2","@types/webpack-env":"1.15.2","karma-spec-reporter":"0.0.32","karma-chrome-launcher":"3.1.0","istanbul-instrumenter-loader":"3.0.1","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_0.11.1-alpha.15_1600658988294_0.8542708145011673","host":"s3://npm-registry-packages"}},"0.11.1-alpha.35":{"name":"@opentelemetry/api","version":"0.11.1-alpha.35","keywords":["opentelemetry","nodejs","browser","tracing","profiling","metrics","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.11.1-alpha.35","maintainers":[{"name":"obecny","email":"bobecny@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"mayurkale22","email":"mayurkale22@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"a9839f60b2ffd0eeb760b182d92b7c6e7cc65a9c","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.11.1-alpha.35.tgz","fileCount":165,"integrity":"sha512-ds9XbRpYHiL7nq3AZBj6VjgOXqqhpL7YGwb/H2s7vxn0REQHSlgZEzpmKbCfk1OBpfzHu/kAhb9QTH5QkWo6pw==","signatures":[{"sig":"MEUCIQC8gQ0cyKThUjBldSDefnU4sOthmo94bmtgYcVtJ6NFfQIgCBwkaJ2qJoABLjJa7bj31cGWNrbVAZIrjPSOB5JKL0I=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":188995,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfdHhqCRA9TVsSAnZWagAAttYQAKFeg+0UaTItu4V4oqvK\nPbwAESsLrY1PUfaXL7wqKpqX3zk5l5hv6LzxqQUSvhhMFW08PA/iRbaq+KZc\nrXGdKYZszsxUN8whbzfiZcblIC59TLXyJOLUO/2ntnOKISnCOL3FfVEZ/VOA\nY6Y3H4bWbkwne2zq+vV55OdHfN5gSAf23xu4EgMpN4G0vSaLDH1R01DCm3c5\nyoWDpUNMqeex0EA3/SfYP45q2DTdkiv6Bve0rrKy6XabbGwIDuJcjWf39iUE\n1RDB99f7fc0DgjOVDT3zwAtzzpnH4YlTTIXUB/dssKF5/g8XLTlQUeyyuVXm\nML7VBMKXnTSG6CNfK6U5puyRhvruhoEZscpkfJw9EIzkbw1PQYbIlwxH0OcQ\ni/g1DMw37BFnEuuUhd43eda5fRTcv5ldLod2Xvhd3ifXsvxhCXKlt+qVdMTK\naChAV12hC9gFEZs3EHiS7gKA7Ddn4pXwE3Z5n5+Vyw8NXukih2epSPjGBRwU\nMORtcS6Vex7xpVNouAA6vynabRAS3feQIJEyvEO9Fpi4uFpqnTddwIISd1va\nd5pL7whnz+Vim836KfOfqDBYfw4UVzTOhl9HN10HgXX9tQr1DUjIT5+wipmO\nARat1W7z1HvHG9c9CIwatBklSowAj99oWYR5X93Fuz5CZz46XKukAjQLwIpn\nFay0\r\n=Jy9x\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","readme":"# OpenTelemetry API for JavaScript\n\n[![Gitter chat][gitter-image]][gitter-url]\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the OpenTelemetry API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Quick Start\n\nTo get started you need to install the SDK and plugins, create a TracerProvider and/or MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install tracing dependencies\n$ npm install \\\n    @opentelemetry/api \\\n    @opentelemetry/core \\\n    @opentelemetry/node \\\n    @opentelemetry/tracing \\\n    @opentelemetry/exporter-jaeger \\ # add exporters as needed\n    @opentelemetry/plugin-http # add plugins as needed\n\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/master/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Tracing\n\n```javascript\nconst { NodeTracerProvider } = require(\"@opentelemetry/node\");\nconst { SimpleSpanProcessor } = require(\"@opentelemetry/tracing\");\nconst { JaegerExporter } = require(\"@opentelemetry/exporter-jaeger\");\n\nconst tracerProvider = new NodeTracerProvider();\n\n/**\n * The SimpleSpanProcessor does no batching and exports spans\n * immediately when they end. For most production use cases,\n * OpenTelemetry recommends use of the BatchSpanProcessor.\n */\ntracerProvider.addSpanProcessor(\n  new SimpleSpanProcessor(\n    new JaegerExporter({\n      serviceName: 'my-service'\n    })\n  )\n);\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries. The OpenTelemetry API provides\n * methods to set global SDK implementations, but the default SDK provides\n * a convenience method named `register` which registers same defaults\n * for you.\n *\n * By default the NodeTracerProvider uses Trace Context for propagation\n * and AsyncHooksScopeManager for context management. To learn about\n * customizing this behavior, see API Registration Options below.\n */\ntracerProvider.register();\n```\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Registration Options\n\nIf you prefer to choose your own propagator or context manager, you may pass an options object into the `tracerProvider.register()` method. Omitted or `undefined` options will be replaced by a default value and `null` values will be skipped.\n\n```javascript\nconst { B3Propagator } = require(\"@opentelemetry/core\");\n\ntracerProvider.register({\n  // Use B3 Propagation\n  propagator: new B3Propagator(),\n\n  // Skip registering a default context manager\n  contextManager: null,\n});\n```\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Trace API Documentation][trace-api-docs]\n- [Metrics API Documentation][metrics-api-docs]\n- [Propagation API Documentation][propagation-api-docs]\n- [Context API Documentation][context-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\n\n/* Initialize TracerProvider */\napi.trace.setGlobalTracerProvider(tracerProvider);\n/* returns tracerProvider (no-op if a working provider has not been initialized) */\napi.trace.getTracerProvider();\n/* returns a tracer from the registered global tracer provider (no-op if a working provider has not been initialized) */\napi.trace.getTracer(name, version);\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n\n/* Initialize Propagator */\napi.propagation.setGlobalPropagator(httpTraceContextPropagator);\n\n/* Initialize Context Manager */\napi.context.setGlobalContextManager(asyncHooksContextManager);\n```\n\n### Library Authors\n\nLibrary authors need only to depend on the `@opentelemetry/api` package and trust that the application owners which use their library will initialize an appropriate SDK.\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\n\nconst tracer = api.trace.getTracer(\"my-library-name\", \"0.2.3\");\n\nasync function doSomething() {\n  const span = tracer.startSpan(\"doSomething\", { parent: tracer.getCurrentSpan() });\n  try {\n    const result = await doSomethingElse();\n    span.end();\n    return result;\n  } catch (err) {\n    span.setStatus({\n      // use an appropriate status code here\n      code: api.CanonicalCode.INTERNAL,\n      message: err.message,\n    });\n    span.end();\n    return null;\n  }\n}\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us on [gitter][gitter-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[gitter-image]: https://badges.gitter.im/open-telemetry/opentelemetry-js.svg\n[gitter-url]: https://gitter.im/open-telemetry/opentelemetry-node?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/master/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/status.svg?path=packages/opentelemetry-api\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api\n[devDependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/dev-status.svg?path=packages/opentelemetry-api\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"c6c993bb16c58ba907337a5667da01b3c248e350","scripts":{"docs":"typedoc --tsconfig tsconfig.json --exclude test/**/*.ts","lint":"eslint . --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","watch":"tsc -w","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../","compile":"npm run version:update && tsc -p .","prepare":"npm run compile","lint:fix":"eslint . --ext .ts --fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","precompile":"tsc --version","test:browser":"nyc karma start --single-run","version:update":"node ../../scripts/version-update.js","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../"},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"lerna/3.22.1/node@v14.11.0+x64 (linux)","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"14.11.0","dependencies":{"@opentelemetry/context-base":"^0.11.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"gts":"2.0.2","nyc":"15.1.0","karma":"5.1.1","mocha":"7.2.0","sinon":"9.0.3","codecov":"3.7.2","typedoc":"0.18.0","webpack":"4.44.1","ts-mocha":"7.0.0","ts-loader":"8.0.2","linkinator":"2.1.1","typescript":"3.9.7","@types/node":"14.0.27","karma-mocha":"2.0.1","@types/mocha":"8.0.2","@types/sinon":"9.0.5","karma-webpack":"4.0.2","@types/webpack-env":"1.15.2","karma-spec-reporter":"0.0.32","karma-chrome-launcher":"3.1.0","istanbul-instrumenter-loader":"3.0.1","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_0.11.1-alpha.35_1601468521822_0.5126426545069165","host":"s3://npm-registry-packages"}},"0.11.1-alpha.36":{"name":"@opentelemetry/api","version":"0.11.1-alpha.36","keywords":["opentelemetry","nodejs","browser","tracing","profiling","metrics","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.11.1-alpha.36","maintainers":[{"name":"obecny","email":"bobecny@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"mayurkale22","email":"mayurkale22@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"b5f30d856baa4b4f7e1cf0e445e3c0d69bf4e251","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.11.1-alpha.36.tgz","fileCount":165,"integrity":"sha512-G656LtExbORnrukNFlHlISsMU3NNdfFKcUXYSz24amoLFvyi72PhU9nQ9zT42OZ+o1Id7JGMjz3pnUjbd+zSCQ==","signatures":[{"sig":"MEUCIByqyh+1NmmgcRVEA4qgKGKcP+3RZm2T1kffZHwDMtK7AiEA0x3rBqnavdBVWC+7BUmRZWVaiaVO/EFjfJfl6GHVHVw=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":189013,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfdHxGCRA9TVsSAnZWagAAJT8P/3nUOkNlD91vCqx36hTd\niSZWW0FQ+dAL5tQNop40gcy8tB9Jcdely0QDMdD+DgCYESDBkHldb2dF70C3\nHsStkZSaYBmvgy5S5SyJcVkQL4OJKrxsuyO4dApm/2Hf6DlWs5cQOWTz+tI3\naXdp3Mn2BHD0rzpXNPv3W+vQHhBqhXRBwhqM6NTCZtmtiswGMZonDCBV0l6I\ndbs6X5a43J1uLJHvobvM7PvWx+2g6JbTuanlwIRIeAvgr2ADP2vPeXyQLIc8\nwlVbC7PaCf0TsxLZVG9TpO2lukmH9kFY8uj37UJ664EW6Yuuw34PuYCwjF3q\nxvxuJRf1PTYt7KWbMtwAW4JXpaZB6V8U0VBTYuqJ0wBcvtIgLJy+2/pIijGg\nF3LEEVYIZqLV4xQ1puhyfjK2z4/edH3Fmrx+WV5HrxdO9q+1ERrNaRqgIt7b\nTyeMrClher7vBSjY8TKm3qXs9lb3en0nbP1wSJZxTfDJQm8mxM79urWyHXpm\nMfBw9A+2BHaGP/FwwRyTaV9pXuPw8ZZiD2VNC65nhRYK3oqsO5CUCdHaqNZX\njlssHQju/9CP6t/TfDlm5sgz5oxhTBqOXNrWXPV022WmNM1tBJypQaExiZ85\nmxt+BkHuAEz/A4hj0XJ3KgPpFpMj082DQR5TrKEpyyKcahpxsoOZFRsysjsQ\nq2Aj\r\n=P3zM\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","readme":"# OpenTelemetry API for JavaScript\n\n[![Gitter chat][gitter-image]][gitter-url]\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the OpenTelemetry API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Quick Start\n\nTo get started you need to install the SDK and plugins, create a TracerProvider and/or MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install tracing dependencies\n$ npm install \\\n    @opentelemetry/api \\\n    @opentelemetry/core \\\n    @opentelemetry/node \\\n    @opentelemetry/tracing \\\n    @opentelemetry/exporter-jaeger \\ # add exporters as needed\n    @opentelemetry/plugin-http # add plugins as needed\n\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/master/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Tracing\n\n```javascript\nconst { NodeTracerProvider } = require(\"@opentelemetry/node\");\nconst { SimpleSpanProcessor } = require(\"@opentelemetry/tracing\");\nconst { JaegerExporter } = require(\"@opentelemetry/exporter-jaeger\");\n\nconst tracerProvider = new NodeTracerProvider();\n\n/**\n * The SimpleSpanProcessor does no batching and exports spans\n * immediately when they end. For most production use cases,\n * OpenTelemetry recommends use of the BatchSpanProcessor.\n */\ntracerProvider.addSpanProcessor(\n  new SimpleSpanProcessor(\n    new JaegerExporter({\n      serviceName: 'my-service'\n    })\n  )\n);\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries. The OpenTelemetry API provides\n * methods to set global SDK implementations, but the default SDK provides\n * a convenience method named `register` which registers same defaults\n * for you.\n *\n * By default the NodeTracerProvider uses Trace Context for propagation\n * and AsyncHooksScopeManager for context management. To learn about\n * customizing this behavior, see API Registration Options below.\n */\ntracerProvider.register();\n```\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Registration Options\n\nIf you prefer to choose your own propagator or context manager, you may pass an options object into the `tracerProvider.register()` method. Omitted or `undefined` options will be replaced by a default value and `null` values will be skipped.\n\n```javascript\nconst { B3Propagator } = require(\"@opentelemetry/core\");\n\ntracerProvider.register({\n  // Use B3 Propagation\n  propagator: new B3Propagator(),\n\n  // Skip registering a default context manager\n  contextManager: null,\n});\n```\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Trace API Documentation][trace-api-docs]\n- [Metrics API Documentation][metrics-api-docs]\n- [Propagation API Documentation][propagation-api-docs]\n- [Context API Documentation][context-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\n\n/* Initialize TracerProvider */\napi.trace.setGlobalTracerProvider(tracerProvider);\n/* returns tracerProvider (no-op if a working provider has not been initialized) */\napi.trace.getTracerProvider();\n/* returns a tracer from the registered global tracer provider (no-op if a working provider has not been initialized) */\napi.trace.getTracer(name, version);\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n\n/* Initialize Propagator */\napi.propagation.setGlobalPropagator(httpTraceContextPropagator);\n\n/* Initialize Context Manager */\napi.context.setGlobalContextManager(asyncHooksContextManager);\n```\n\n### Library Authors\n\nLibrary authors need only to depend on the `@opentelemetry/api` package and trust that the application owners which use their library will initialize an appropriate SDK.\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\n\nconst tracer = api.trace.getTracer(\"my-library-name\", \"0.2.3\");\n\nasync function doSomething() {\n  const span = tracer.startSpan(\"doSomething\", { parent: tracer.getCurrentSpan() });\n  try {\n    const result = await doSomethingElse();\n    span.end();\n    return result;\n  } catch (err) {\n    span.setStatus({\n      // use an appropriate status code here\n      code: api.CanonicalCode.INTERNAL,\n      message: err.message,\n    });\n    span.end();\n    return null;\n  }\n}\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us on [gitter][gitter-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[gitter-image]: https://badges.gitter.im/open-telemetry/opentelemetry-js.svg\n[gitter-url]: https://gitter.im/open-telemetry/opentelemetry-node?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/master/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/status.svg?path=packages/opentelemetry-api\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api\n[devDependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/dev-status.svg?path=packages/opentelemetry-api\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"6eb157c66925fe84b4960f247a86678441f3cb60","scripts":{"docs":"typedoc --tsconfig tsconfig.json --exclude test/**/*.ts","lint":"eslint . --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","watch":"tsc -w","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../","compile":"npm run version:update && tsc -p .","prepare":"npm run compile","lint:fix":"eslint . --ext .ts --fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","precompile":"tsc --version","test:browser":"nyc karma start --single-run","version:update":"node ../../scripts/version-update.js","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../"},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"lerna/3.22.1/node@v14.11.0+x64 (linux)","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"14.11.0","dependencies":{"@opentelemetry/context-base":"^0.11.1-alpha.36+6eb157c6"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"gts":"2.0.2","nyc":"15.1.0","karma":"5.1.1","mocha":"7.2.0","sinon":"9.0.3","codecov":"3.7.2","typedoc":"0.18.0","webpack":"4.44.1","ts-mocha":"7.0.0","ts-loader":"8.0.2","linkinator":"2.1.1","typescript":"3.9.7","@types/node":"14.0.27","karma-mocha":"2.0.1","@types/mocha":"8.0.2","@types/sinon":"9.0.5","karma-webpack":"4.0.2","@types/webpack-env":"1.15.2","karma-spec-reporter":"0.0.32","karma-chrome-launcher":"3.1.0","istanbul-instrumenter-loader":"3.0.1","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_0.11.1-alpha.36_1601469510286_0.8353505615644046","host":"s3://npm-registry-packages"}},"0.11.1-alpha.44":{"name":"@opentelemetry/api","version":"0.11.1-alpha.44","keywords":["opentelemetry","nodejs","browser","tracing","profiling","metrics","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.11.1-alpha.44","maintainers":[{"name":"obecny","email":"bobecny@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"mayurkale22","email":"mayurkale22@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"9c569ef630396472649f225d0b687bf0b5f398e6","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.11.1-alpha.44.tgz","fileCount":168,"integrity":"sha512-pDRj8lX39Chbu+1gpqHBwhhCm06s+Yr+N1d2qCGKMVg4tQ/6ikSM/1TkSACbPB9RzIrQtBZ5s72tv1Q/f+TlvA==","signatures":[{"sig":"MEQCIEPzVqX/Qt6X1bXWz0YHwQgU0mhN0RfmDf0nLWPxrxQdAiAnIpoKlAxzs3gHej5Eh3NcX117k7+lfLy+sVw7S/WGNg==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":198250,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJffh0LCRA9TVsSAnZWagAAaNkP/2wDWa6PHGWctP+rqLK1\nQq568fzCgCNngsO3Gg/0DFZn0aWZ4itby4KBCD/6fECKTiiVQUJY/ijyUapt\n7U4Pj1wqXLotKEZO8icgw1/Ix1ZaRulzvPBx8D3gqnL8mdO/yCRSjI48u2CY\nAp+1QNvhOmnpu/Av/821apq7zFmGlYHICPrwMCPPkof9J6To1/HWxlL9HcA6\nExiWp+QInayMEpN24XfbnoXS3VpYkDXPvmfw8Mkjmm0wIGb2TiF93WxJ+qyX\n1TqYEaF7BU30ZwTL8uxE7SIIYY9kx0/vMFQtmWcuDgIp8sKSqNFuGvXxyIpa\n8xkRWPtBcR87lDOymqhfJ9gOYE1HO+Vuv+Ju/G2SCZafYei8vMo/ewkSqpry\nWbkA2mVL24BlrBSc2U8ik4u8qixWdgARFO5N7rdlzJ5L+t/imZMs4JitATcr\n3sexAxlPBNrIVJwJT1JMIpP299DO0mJ1AoqFsO0T79Wo2V0qt48zUyVTKsVV\n6hdxXJZ0/ZMbzvjC5QvLy8afdAF/yOVbqyh1Lk6r3XJjTwkKtRDb06oeM20d\n470lRjm7u6AF+mo7bniAkWjC2T6LDKrqMIpqukxGnZVsgtRlJ3MkSDV5d1ZP\nB9B1cU5UeF41b8W/ZLllikTkTCe9h67uSs8zFda1iL1yAkTR5TZd+Uahl6mf\nOSmj\r\n=SHra\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","readme":"# OpenTelemetry API for JavaScript\n\n[![Gitter chat][gitter-image]][gitter-url]\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the OpenTelemetry API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Quick Start\n\nTo get started you need to install the SDK and plugins, create a TracerProvider and/or MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install tracing dependencies\n$ npm install \\\n    @opentelemetry/api \\\n    @opentelemetry/core \\\n    @opentelemetry/node \\\n    @opentelemetry/tracing \\\n    @opentelemetry/exporter-jaeger \\ # add exporters as needed\n    @opentelemetry/plugin-http # add plugins as needed\n\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/master/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Tracing\n\n```javascript\nconst { NodeTracerProvider } = require(\"@opentelemetry/node\");\nconst { SimpleSpanProcessor } = require(\"@opentelemetry/tracing\");\nconst { JaegerExporter } = require(\"@opentelemetry/exporter-jaeger\");\n\nconst tracerProvider = new NodeTracerProvider();\n\n/**\n * The SimpleSpanProcessor does no batching and exports spans\n * immediately when they end. For most production use cases,\n * OpenTelemetry recommends use of the BatchSpanProcessor.\n */\ntracerProvider.addSpanProcessor(\n  new SimpleSpanProcessor(\n    new JaegerExporter({\n      serviceName: 'my-service'\n    })\n  )\n);\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries. The OpenTelemetry API provides\n * methods to set global SDK implementations, but the default SDK provides\n * a convenience method named `register` which registers same defaults\n * for you.\n *\n * By default the NodeTracerProvider uses Trace Context for propagation\n * and AsyncHooksScopeManager for context management. To learn about\n * customizing this behavior, see API Registration Options below.\n */\ntracerProvider.register();\n```\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Registration Options\n\nIf you prefer to choose your own propagator or context manager, you may pass an options object into the `tracerProvider.register()` method. Omitted or `undefined` options will be replaced by a default value and `null` values will be skipped.\n\n```javascript\nconst { B3Propagator } = require(\"@opentelemetry/core\");\n\ntracerProvider.register({\n  // Use B3 Propagation\n  propagator: new B3Propagator(),\n\n  // Skip registering a default context manager\n  contextManager: null,\n});\n```\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Trace API Documentation][trace-api-docs]\n- [Metrics API Documentation][metrics-api-docs]\n- [Propagation API Documentation][propagation-api-docs]\n- [Context API Documentation][context-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\n\n/* Initialize TracerProvider */\napi.trace.setGlobalTracerProvider(tracerProvider);\n/* returns tracerProvider (no-op if a working provider has not been initialized) */\napi.trace.getTracerProvider();\n/* returns a tracer from the registered global tracer provider (no-op if a working provider has not been initialized) */\napi.trace.getTracer(name, version);\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n\n/* Initialize Propagator */\napi.propagation.setGlobalPropagator(httpTraceContextPropagator);\n\n/* Initialize Context Manager */\napi.context.setGlobalContextManager(asyncHooksContextManager);\n```\n\n### Library Authors\n\nLibrary authors need only to depend on the `@opentelemetry/api` package and trust that the application owners which use their library will initialize an appropriate SDK.\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\n\nconst tracer = api.trace.getTracer(\"my-library-name\", \"0.2.3\");\n\nasync function doSomething() {\n  const span = tracer.startSpan(\"doSomething\", { parent: tracer.getCurrentSpan() });\n  try {\n    const result = await doSomethingElse();\n    span.end();\n    return result;\n  } catch (err) {\n    span.setStatus({\n      // use an appropriate status code here\n      code: api.CanonicalCode.INTERNAL,\n      message: err.message,\n    });\n    span.end();\n    return null;\n  }\n}\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us on [gitter][gitter-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[gitter-image]: https://badges.gitter.im/open-telemetry/opentelemetry-js.svg\n[gitter-url]: https://gitter.im/open-telemetry/opentelemetry-node?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/master/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/status.svg?path=packages/opentelemetry-api\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api\n[devDependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/dev-status.svg?path=packages/opentelemetry-api\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"240f852cc41707c751f28811b7ce3d243382e3dd","scripts":{"docs":"typedoc --tsconfig tsconfig.json --exclude test/**/*.ts","lint":"eslint . --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","watch":"tsc -w","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../","compile":"npm run version:update && tsc -p .","prepare":"npm run compile","lint:fix":"eslint . --ext .ts --fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","precompile":"tsc --version","test:browser":"nyc karma start --single-run","version:update":"node ../../scripts/version-update.js","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../"},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"lerna/3.22.1/node@v14.11.0+x64 (linux)","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"14.11.0","dependencies":{"@opentelemetry/context-base":"^0.11.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"gts":"2.0.2","nyc":"15.1.0","karma":"5.1.1","mocha":"7.2.0","sinon":"9.0.3","codecov":"3.7.2","typedoc":"0.18.0","webpack":"4.44.1","ts-mocha":"7.0.0","ts-loader":"8.0.2","linkinator":"2.1.1","typescript":"3.9.7","@types/node":"14.0.27","karma-mocha":"2.0.1","@types/mocha":"8.0.2","@types/sinon":"9.0.5","karma-webpack":"4.0.2","@types/webpack-env":"1.15.2","karma-spec-reporter":"0.0.32","karma-chrome-launcher":"3.1.0","istanbul-instrumenter-loader":"3.0.1","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_0.11.1-alpha.44_1602100491043_0.2372839598261729","host":"s3://npm-registry-packages"}},"0.11.1-alpha.53":{"name":"@opentelemetry/api","version":"0.11.1-alpha.53","keywords":["opentelemetry","nodejs","browser","tracing","profiling","metrics","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.11.1-alpha.53","maintainers":[{"name":"obecny","email":"bobecny@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"mayurkale22","email":"mayurkale22@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"348fbe8e127edf9590d53ec73381066baf3f61ae","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.11.1-alpha.53.tgz","fileCount":168,"integrity":"sha512-u6UpV5JKF/K98TK/he8WqxhYK8+8y9huiVgQlOFNAjTlL3cck4yY1RMStn22IIyvM808UtS4m/rP39V6nw+JBg==","signatures":[{"sig":"MEUCIDjcb42Q1KXgFgygzgJiKDmFc4mmcE5HJzFF54FWPYn1AiEAwV6ZkEEhf0IZqP+0PHOLS7nwiTdx7lXfYYdCWly3Mv8=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":198187,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfjXzwCRA9TVsSAnZWagAAxHEP/2pFusJe3545oZfAJdLJ\nUOi5veYOU91K1XLwuRGzHTSwDVSFRSf1Dhnii6oqlWQi884VcPeiFY/0HQLj\n8jY9XmLWm6VZlrvraIQKKbChRTl14zmmehSEImVllFHSGpUJ9mToISy8sDAX\nulbSvGSe2zyyWQR0YLnf0OfV4Hl7+EWF1qjfpgXVVviq5Q5vm59gMQrjk5VA\nM1DqlQuJAYaSHY6vL/CNRgMq7fsP3jXXrnPPENcEqIABXthqKAzZUrHVogZw\nTb8et7P3or6VO4cMh0auwRnuAgvUqFkImyK82CRkDCFjZLP9oRKkl2Zq6WBR\nYa4mGrQBBCapv+5lOJkBnCya9Yi1CASZeby57MSCGMMyxxJQ0B8hXNf+7qnn\nJbl6CJ1MGhmmYcSX4sNc337bA6MWqbJHLaU6Rw8C5xFX1W2E+I+dIwNCJ4o8\ngEablR9itVetafylS8QY1wNLe8UIw8A3rSfZ8+uRa5sDsQ9vflhPGh8n5OvT\ndCrrmXhmqCkONkEiCBzzDx4TOmuX2FLR5OlBSNNTRdeWoi3M26gnVi+2yAhC\najx0nZqKk7cw0YpUcZSVoB0CGsBGftcJ0JIHwOPElYIGQV+bVsbeFAiA7UV/\naBjI2bgrZQpvGLoFwjhRx4RWXi1NbDwOHcmZF6eQ+GjGD3abzjoGyUhsEK4Y\nwCEk\r\n=F/V+\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","readme":"# OpenTelemetry API for JavaScript\n\n[![Gitter chat][gitter-image]][gitter-url]\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the OpenTelemetry API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Quick Start\n\nTo get started you need to install the SDK and plugins, create a TracerProvider and/or MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install tracing dependencies\n$ npm install \\\n    @opentelemetry/api \\\n    @opentelemetry/core \\\n    @opentelemetry/node \\\n    @opentelemetry/tracing \\\n    @opentelemetry/exporter-jaeger \\ # add exporters as needed\n    @opentelemetry/plugin-http # add plugins as needed\n\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/master/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Tracing\n\n```javascript\nconst { NodeTracerProvider } = require(\"@opentelemetry/node\");\nconst { SimpleSpanProcessor } = require(\"@opentelemetry/tracing\");\nconst { JaegerExporter } = require(\"@opentelemetry/exporter-jaeger\");\n\nconst tracerProvider = new NodeTracerProvider();\n\n/**\n * The SimpleSpanProcessor does no batching and exports spans\n * immediately when they end. For most production use cases,\n * OpenTelemetry recommends use of the BatchSpanProcessor.\n */\ntracerProvider.addSpanProcessor(\n  new SimpleSpanProcessor(\n    new JaegerExporter({\n      serviceName: 'my-service'\n    })\n  )\n);\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries. The OpenTelemetry API provides\n * methods to set global SDK implementations, but the default SDK provides\n * a convenience method named `register` which registers same defaults\n * for you.\n *\n * By default the NodeTracerProvider uses Trace Context for propagation\n * and AsyncHooksScopeManager for context management. To learn about\n * customizing this behavior, see API Registration Options below.\n */\ntracerProvider.register();\n```\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Registration Options\n\nIf you prefer to choose your own propagator or context manager, you may pass an options object into the `tracerProvider.register()` method. Omitted or `undefined` options will be replaced by a default value and `null` values will be skipped.\n\n```javascript\nconst { B3Propagator } = require(\"@opentelemetry/core\");\n\ntracerProvider.register({\n  // Use B3 Propagation\n  propagator: new B3Propagator(),\n\n  // Skip registering a default context manager\n  contextManager: null,\n});\n```\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Trace API Documentation][trace-api-docs]\n- [Metrics API Documentation][metrics-api-docs]\n- [Propagation API Documentation][propagation-api-docs]\n- [Context API Documentation][context-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\n\n/* Initialize TracerProvider */\napi.trace.setGlobalTracerProvider(tracerProvider);\n/* returns tracerProvider (no-op if a working provider has not been initialized) */\napi.trace.getTracerProvider();\n/* returns a tracer from the registered global tracer provider (no-op if a working provider has not been initialized) */\napi.trace.getTracer(name, version);\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n\n/* Initialize Propagator */\napi.propagation.setGlobalPropagator(httpTraceContextPropagator);\n\n/* Initialize Context Manager */\napi.context.setGlobalContextManager(asyncHooksContextManager);\n```\n\n### Library Authors\n\nLibrary authors need only to depend on the `@opentelemetry/api` package and trust that the application owners which use their library will initialize an appropriate SDK.\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\n\nconst tracer = api.trace.getTracer(\"my-library-name\", \"0.2.3\");\n\nasync function doSomething() {\n  const span = tracer.startSpan(\"doSomething\", { parent: tracer.getCurrentSpan() });\n  try {\n    const result = await doSomethingElse();\n    span.end();\n    return result;\n  } catch (err) {\n    span.setStatus({\n      // use an appropriate status code here\n      code: api.CanonicalCode.INTERNAL,\n      message: err.message,\n    });\n    span.end();\n    return null;\n  }\n}\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us on [gitter][gitter-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[gitter-image]: https://badges.gitter.im/open-telemetry/opentelemetry-js.svg\n[gitter-url]: https://gitter.im/open-telemetry/opentelemetry-node?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/master/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/status.svg?path=packages/opentelemetry-api\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api\n[devDependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/dev-status.svg?path=packages/opentelemetry-api\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"00a8ce7f982ea24bcd4bc398477112894078ab29","scripts":{"docs":"typedoc --tsconfig tsconfig.json --exclude test/**/*.ts","lint":"eslint . --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","watch":"tsc -w","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../","compile":"npm run version:update && tsc -p .","prepare":"npm run compile","lint:fix":"eslint . --ext .ts --fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","precompile":"tsc --version","test:browser":"nyc karma start --single-run","version:update":"node ../../scripts/version-update.js","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../"},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"lerna/3.22.1/node@v14.13.1+x64 (linux)","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"14.13.1","dependencies":{"@opentelemetry/context-base":"^0.11.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"gts":"2.0.2","nyc":"15.1.0","karma":"5.1.1","mocha":"7.2.0","sinon":"9.0.3","codecov":"3.7.2","typedoc":"0.18.0","webpack":"4.44.1","ts-mocha":"7.0.0","ts-loader":"8.0.2","linkinator":"2.1.1","typescript":"3.9.7","@types/node":"14.0.27","karma-mocha":"2.0.1","@types/mocha":"8.0.2","@types/sinon":"9.0.5","karma-webpack":"4.0.2","@types/webpack-env":"1.15.2","karma-spec-reporter":"0.0.32","karma-chrome-launcher":"3.1.0","istanbul-instrumenter-loader":"3.0.1","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_0.11.1-alpha.53_1603108079792_0.8408903798519265","host":"s3://npm-registry-packages"}},"0.12.1-alpha.54":{"name":"@opentelemetry/api","version":"0.12.1-alpha.54","keywords":["opentelemetry","nodejs","browser","tracing","profiling","metrics","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.12.1-alpha.54","maintainers":[{"name":"obecny","email":"bobecny@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"mayurkale22","email":"mayurkale22@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"8ac76c043be872fe9d3cbb861ced8b2f74bc37a1","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.12.1-alpha.54.tgz","fileCount":168,"integrity":"sha512-sOOa8zJNQNQZl1mQt5Jirf7GiEun7njjyre3I6nsCk1AZpZmDXQq+Yq2UI/3h13D7bYGFjbKWT3FQZIeeCYcMA==","signatures":[{"sig":"MEYCIQDigDhfJDvPEJYY2av2K8u9kjwP1F0qzOUg0cNukpt1BQIhAIpHd5Q9atBvZ9DSxikcw5XB3zAlPw/sJFQ4rS48CzOe","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":198205,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfjYtrCRA9TVsSAnZWagAAosYP/RmpKzCVcAM9jf1vdauL\nmYhjujZolP7zXQrGK+tgUGiTtHFsxdFE5F3sgnw600vjVvF3mcd8w+4vLf2c\nbfTNAsluU6ZDd9ESR3yU2opcUg4ZYME02yhZcbUj8Er5m5IRN0zi8QCmfnxn\n1wdPUCiKZm6O1S95hrxSDdWg569fTWbAr5D6OUljPVQ/LeK2FYQKTjwnUF2u\nA5Ho28CmqK+jeoVihx4E89BpbnFfqFSlSuLG/wrmEgqUunMOpsut7U6WqLk5\nzuZA4b7IarysBfbt3iLbFaah09tUCwgsxslKHdeSLQV3vV+hc4aGRyP996je\nZKEUhytIuMPgND6Z7o9WcTbYEMdf00+CHY4mbsX2N/OrEwhcnp46Sl/KbEqQ\nJrRibQDQ6ZU0mI984x/dM8OOw0P4weGFkAwWUS85sLPXytNdggI7LwO3kcP/\npDhEKyKJZc7xCAOvH4NBcxmZqQI6BBVTVECMFlUNdA4o34+x0RutK4eplzKh\nhSQtrU8wdmcjz8KPVRpuksL9MHITgxuR94xy01AnPfLtJyIs+AosEu9YU68G\nJiEz8oYL0LUp8lNlhnOEdyyx/a3qukBLGX4D4D44hmFxaBfzjRdOamY8q67x\nlKXGORK10w6JwnCREx8m6wcQz1TfU+8Ldgc/iz/GkWyKMIzqXpEoYzIbaEC5\nFU5L\r\n=f483\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","readme":"# OpenTelemetry API for JavaScript\n\n[![Gitter chat][gitter-image]][gitter-url]\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the OpenTelemetry API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Quick Start\n\nTo get started you need to install the SDK and plugins, create a TracerProvider and/or MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install tracing dependencies\n$ npm install \\\n    @opentelemetry/api \\\n    @opentelemetry/core \\\n    @opentelemetry/node \\\n    @opentelemetry/tracing \\\n    @opentelemetry/exporter-jaeger \\ # add exporters as needed\n    @opentelemetry/plugin-http # add plugins as needed\n\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/master/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Tracing\n\n```javascript\nconst { NodeTracerProvider } = require(\"@opentelemetry/node\");\nconst { SimpleSpanProcessor } = require(\"@opentelemetry/tracing\");\nconst { JaegerExporter } = require(\"@opentelemetry/exporter-jaeger\");\n\nconst tracerProvider = new NodeTracerProvider();\n\n/**\n * The SimpleSpanProcessor does no batching and exports spans\n * immediately when they end. For most production use cases,\n * OpenTelemetry recommends use of the BatchSpanProcessor.\n */\ntracerProvider.addSpanProcessor(\n  new SimpleSpanProcessor(\n    new JaegerExporter({\n      serviceName: 'my-service'\n    })\n  )\n);\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries. The OpenTelemetry API provides\n * methods to set global SDK implementations, but the default SDK provides\n * a convenience method named `register` which registers same defaults\n * for you.\n *\n * By default the NodeTracerProvider uses Trace Context for propagation\n * and AsyncHooksScopeManager for context management. To learn about\n * customizing this behavior, see API Registration Options below.\n */\ntracerProvider.register();\n```\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Registration Options\n\nIf you prefer to choose your own propagator or context manager, you may pass an options object into the `tracerProvider.register()` method. Omitted or `undefined` options will be replaced by a default value and `null` values will be skipped.\n\n```javascript\nconst { B3Propagator } = require(\"@opentelemetry/core\");\n\ntracerProvider.register({\n  // Use B3 Propagation\n  propagator: new B3Propagator(),\n\n  // Skip registering a default context manager\n  contextManager: null,\n});\n```\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Trace API Documentation][trace-api-docs]\n- [Metrics API Documentation][metrics-api-docs]\n- [Propagation API Documentation][propagation-api-docs]\n- [Context API Documentation][context-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\n\n/* Initialize TracerProvider */\napi.trace.setGlobalTracerProvider(tracerProvider);\n/* returns tracerProvider (no-op if a working provider has not been initialized) */\napi.trace.getTracerProvider();\n/* returns a tracer from the registered global tracer provider (no-op if a working provider has not been initialized) */\napi.trace.getTracer(name, version);\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n\n/* Initialize Propagator */\napi.propagation.setGlobalPropagator(httpTraceContextPropagator);\n\n/* Initialize Context Manager */\napi.context.setGlobalContextManager(asyncHooksContextManager);\n```\n\n### Library Authors\n\nLibrary authors need only to depend on the `@opentelemetry/api` package and trust that the application owners which use their library will initialize an appropriate SDK.\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\n\nconst tracer = api.trace.getTracer(\"my-library-name\", \"0.2.3\");\n\nasync function doSomething() {\n  const span = tracer.startSpan(\"doSomething\", { parent: tracer.getCurrentSpan() });\n  try {\n    const result = await doSomethingElse();\n    span.end();\n    return result;\n  } catch (err) {\n    span.setStatus({\n      // use an appropriate status code here\n      code: api.CanonicalCode.INTERNAL,\n      message: err.message,\n    });\n    span.end();\n    return null;\n  }\n}\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us on [gitter][gitter-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[gitter-image]: https://badges.gitter.im/open-telemetry/opentelemetry-js.svg\n[gitter-url]: https://gitter.im/open-telemetry/opentelemetry-node?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/master/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/status.svg?path=packages/opentelemetry-api\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api\n[devDependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/dev-status.svg?path=packages/opentelemetry-api\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"3f72613a36b6f97555a0fa7481755cf8b6cce1a7","scripts":{"docs":"typedoc --tsconfig tsconfig.json --exclude test/**/*.ts","lint":"eslint . --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","watch":"tsc -w","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../","compile":"npm run version:update && tsc -p .","prepare":"npm run compile","lint:fix":"eslint . --ext .ts --fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","precompile":"tsc --version","test:browser":"nyc karma start --single-run","version:update":"node ../../scripts/version-update.js","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../"},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"lerna/3.22.1/node@v14.13.1+x64 (linux)","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"14.13.1","dependencies":{"@opentelemetry/context-base":"^0.12.1-alpha.54+3f72613a"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"gts":"2.0.2","nyc":"15.1.0","karma":"5.1.1","mocha":"7.2.0","sinon":"9.0.3","codecov":"3.7.2","typedoc":"0.18.0","webpack":"4.44.1","ts-mocha":"7.0.0","ts-loader":"8.0.2","linkinator":"2.1.1","typescript":"3.9.7","@types/node":"14.0.27","karma-mocha":"2.0.1","@types/mocha":"8.0.2","@types/sinon":"9.0.5","karma-webpack":"4.0.2","@types/webpack-env":"1.15.2","karma-spec-reporter":"0.0.32","karma-chrome-launcher":"3.1.0","istanbul-instrumenter-loader":"3.0.1","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_0.12.1-alpha.54_1603111786869_0.5074131318945263","host":"s3://npm-registry-packages"}},"0.12.0":{"name":"@opentelemetry/api","version":"0.12.0","keywords":["opentelemetry","nodejs","browser","tracing","profiling","metrics","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.12.0","maintainers":[{"name":"obecny","email":"bobecny@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"mayurkale22","email":"mayurkale22@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"0359c3926e8f16fdcd8c78f196bd1e9fc4e66777","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.12.0.tgz","fileCount":183,"integrity":"sha512-Dn4vU5GlaBrIWzLpsM6xbJwKHdlpwBQ4Bd+cL9ofJP3hKT8jBXpBpribmyaqAzrajzzl2Yt8uTa9rFVLfjDAvw==","signatures":[{"sig":"MEQCIFE3DJG+GQXBhh/4bk8Wa9+7qr3HGJAoE2V7JpB1SWftAiBj9I08sf3O4ruKz0RUHcuZI8z93544aktRpKwlvMupHg==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":210312,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfjYxTCRA9TVsSAnZWagAAXOoP/Rki9m3viNx9etJBtSyz\n3/vsdR+EjxKiL0Zd9qc2sneAN5IdhEhaKuYx0Z+1ffvtOh5MK+GboS6TlJ3I\nbGC7WIqSbbeOzq/psDI2usVfhXlrSS2vjxEnw3AitFtpLsosnxP7867XlrJS\nB0dHOKFYSntBdlplBARHMo6dP5hNdOWh4AXTQLmPU4cdqFq7xPgV7sFh3Ggq\nVQbelVT4X4X/vdMm9hSsnZ8tk5/EgHMcN0w/85hseNdu2RaiKqiLAuv6V3Bw\n0XRNZ4/4v+EcBYN3Ye7hKYOdYoOn8dChmjke2+eG3/DAdSY+Tqf469zm7RYB\nyntDymoYVQ13di16jcwPM6tsqgVqzTxs0wVr6BA6eUu7gFRmE4XzJLF2OWlW\nea/f45L+w/imgT7DrroLLV4nM5xLNt6DaIb8dHv/wgsgVxWNxT/VtrPByLxd\nsC/+9lCNDYbxLZa7UWtvoSqd7WXOYpKbJPP3Acrv4Mj7fNSZ9+lGPNecfXu7\nn1QG+g+xRSEnJnpSRqsJllEhQKetTb7kSsvY8oo8ntRBupSZD0lM2z+tpJ4k\nqfTrdjoJkWuxSGSTt/PbY006ksT/m1TdccwjmMRbdrKAvLW+aycieOz9fB71\ncZqOcjHEfDp6jayBo2FUBclG42wSPYPPC7kQl6XQlkB5QzvDdb7HP47bGqR0\nzfRL\r\n=L5+6\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"3f72613a36b6f97555a0fa7481755cf8b6cce1a7","scripts":{"docs":"typedoc --tsconfig tsconfig.json --exclude test/**/*.ts","lint":"eslint . --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","watch":"tsc -w","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../","compile":"npm run version:update && tsc -p .","prepare":"npm run compile","lint:fix":"eslint . --ext .ts --fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","precompile":"tsc --version","test:browser":"nyc karma start --single-run","version:update":"node ../../scripts/version-update.js","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../"},"_npmUser":{"name":"obecny","email":"bobecny@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"lerna/3.22.1/node@v14.4.0+x64 (darwin)","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"14.4.0","dependencies":{"@opentelemetry/context-base":"^0.12.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"gts":"2.0.2","nyc":"15.1.0","karma":"5.1.1","mocha":"7.2.0","sinon":"9.0.3","codecov":"3.7.2","typedoc":"0.18.0","webpack":"4.44.1","ts-mocha":"7.0.0","ts-loader":"8.0.2","linkinator":"2.1.1","typescript":"3.9.7","@types/node":"14.0.27","karma-mocha":"2.0.1","@types/mocha":"8.0.2","@types/sinon":"9.0.5","karma-webpack":"4.0.2","@types/webpack-env":"1.15.2","karma-spec-reporter":"0.0.32","karma-chrome-launcher":"3.1.0","istanbul-instrumenter-loader":"3.0.1","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_0.12.0_1603112018695_0.0034870778909865674","host":"s3://npm-registry-packages"}},"0.12.1-alpha.7":{"name":"@opentelemetry/api","version":"0.12.1-alpha.7","keywords":["opentelemetry","nodejs","browser","tracing","profiling","metrics","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.12.1-alpha.7","maintainers":[{"name":"obecny","email":"bobecny@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"mayurkale22","email":"mayurkale22@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"357b13ec909015d3392e7bb2c7ffc3533f30b385","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.12.1-alpha.7.tgz","fileCount":162,"integrity":"sha512-xLFhhKagU/3t80ge6CRGqazi0RbOdiJwENcHuh3X/v1ukZtE/NHTxf6lo9C4kO5PZxuaZu37oojRbIDz+NH1nQ==","signatures":[{"sig":"MEUCIGh9J8PPWWsN60IEDKNzCr1zE3iQ4thJxMWUmcKl2J/YAiEAs5UQWUv7/fz0e6kStMgjAu6QdxxLFMFAeIjSX01sxd4=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":197511,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJflzuaCRA9TVsSAnZWagAA2OIP/RRdd8O8wwg7pTsCOUKB\nwgpxUDlS/+ATiPCYVX0pSMmuIOsQzn6xW+e3QRFM7d66beBCOMI6c2Wqc+tD\nUgGxcPhB0dblMTB9uihJFAawGEFILFszw1Mv1EMejGoVNbS/ek3R1wg7hqE2\nFLtTLd6jkG7f3NEa9JPUthhzb+ZsP+QR50WFyCNvgIPRgkTl56GWph8z/ICB\nFGT8yMlhS7gKyEUcjbYEDnrYCqKHVg8LsnzS98xyvaojUK/xTHcurwOlA7LW\nawowtxjAMklq6EB/Y3LOUq1mLh8U74U20mf0wSViLhx/0zJ1CQO+3SSBG+8B\nKZ+cjYS9ItwPZ8ke1xhRHIcoycfRfvNnYqZf6bkei/ePpwtKlf5jDmUJ9Epr\nSSbCzNoB9/478wvdSIZGD66aHvUzVkeL3jcM+x2viNhbv2WR/qG9UN7nrXkQ\nL5/hEFxiEvOHqdv+jMFYKWabcPHZ2Xp0wlW09gOCpZoRcplWeR6fG2gcjGT2\nsP5hcqDCZ8gv0QK18XP2HlbmzFvOaMqNDm7zaOGj3Q0j3HQX/nkM+pjPEF1R\nAtfWSYZ148xFW5PjGUbqqdJOAP4XLEANxawcFJAtCspx+sIb//wkfeekxWtS\nVYWtn6ROjQ/9YhL0pMjdmpU23hhCS8Im+ENBbUXBZEFLyC93rYHEzokim96e\n5hKl\r\n=mIt1\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","readme":"# OpenTelemetry API for JavaScript\n\n[![Gitter chat][gitter-image]][gitter-url]\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the OpenTelemetry API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Quick Start\n\nTo get started you need to install the SDK and plugins, create a TracerProvider and/or MeterProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install tracing dependencies\n$ npm install \\\n    @opentelemetry/api \\\n    @opentelemetry/core \\\n    @opentelemetry/node \\\n    @opentelemetry/tracing \\\n    @opentelemetry/exporter-jaeger \\ # add exporters as needed\n    @opentelemetry/plugin-http # add plugins as needed\n\n$ # Install metrics dependencies\n$ npm install \\\n    @opentelemetry/metrics \\\n    @opentelemetry/exporter-prometheus # add exporters as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/master/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Tracing\n\n```javascript\nconst { NodeTracerProvider } = require(\"@opentelemetry/node\");\nconst { SimpleSpanProcessor } = require(\"@opentelemetry/tracing\");\nconst { JaegerExporter } = require(\"@opentelemetry/exporter-jaeger\");\n\nconst tracerProvider = new NodeTracerProvider();\n\n/**\n * The SimpleSpanProcessor does no batching and exports spans\n * immediately when they end. For most production use cases,\n * OpenTelemetry recommends use of the BatchSpanProcessor.\n */\ntracerProvider.addSpanProcessor(\n  new SimpleSpanProcessor(\n    new JaegerExporter({\n      serviceName: 'my-service'\n    })\n  )\n);\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries. The OpenTelemetry API provides\n * methods to set global SDK implementations, but the default SDK provides\n * a convenience method named `register` which registers same defaults\n * for you.\n *\n * By default the NodeTracerProvider uses Trace Context for propagation\n * and AsyncHooksScopeManager for context management. To learn about\n * customizing this behavior, see API Registration Options below.\n */\ntracerProvider.register();\n```\n\n#### Metrics\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\nconst { MeterProvider } = require(\"@opentelemetry/metrics\");\nconst { PrometheusExporter } = require(\"@opentelemetry/exporter-prometheus\");\n\nconst meterProvider = new MeterProvider({\n  // The Prometheus exporter runs an HTTP server which\n  // the Prometheus backend scrapes to collect metrics.\n  exporter: new PrometheusExporter({ startServer: true }),\n  interval: 1000,\n});\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries.\n */\napi.metrics.setGlobalMeterProvider(meterProvider);\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Registration Options\n\nIf you prefer to choose your own propagator or context manager, you may pass an options object into the `tracerProvider.register()` method. Omitted or `undefined` options will be replaced by a default value and `null` values will be skipped.\n\n```javascript\nconst { B3Propagator } = require(\"@opentelemetry/propagator-b3\");\n\ntracerProvider.register({\n  // Use B3 Propagation\n  propagator: new B3Propagator(),\n\n  // Skip registering a default context manager\n  contextManager: null,\n});\n```\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Trace API Documentation][trace-api-docs]\n- [Metrics API Documentation][metrics-api-docs]\n- [Propagation API Documentation][propagation-api-docs]\n- [Context API Documentation][context-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\n\n/* Initialize TracerProvider */\napi.trace.setGlobalTracerProvider(tracerProvider);\n/* returns tracerProvider (no-op if a working provider has not been initialized) */\napi.trace.getTracerProvider();\n/* returns a tracer from the registered global tracer provider (no-op if a working provider has not been initialized) */\napi.trace.getTracer(name, version);\n\n/* Initialize MeterProvider */\napi.metrics.setGlobalMeterProvider(meterProvider);\n/* returns meterProvider (no-op if a working provider has not been initialized) */\napi.metrics.getMeterProvider();\n/* returns a meter from the registered global meter provider (no-op if a working provider has not been initialized) */\napi.metrics.getMeter(name, version);\n\n/* Initialize Propagator */\napi.propagation.setGlobalPropagator(httpTraceContextPropagator);\n\n/* Initialize Context Manager */\napi.context.setGlobalContextManager(asyncHooksContextManager);\n```\n\n### Library Authors\n\nLibrary authors need only to depend on the `@opentelemetry/api` package and trust that the application owners which use their library will initialize an appropriate SDK.\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\n\nconst tracer = api.trace.getTracer(\"my-library-name\", \"0.2.3\");\n\nasync function doSomething() {\n  const span = tracer.startSpan(\"doSomething\", { parent: tracer.getCurrentSpan() });\n  try {\n    const result = await doSomethingElse();\n    span.end();\n    return result;\n  } catch (err) {\n    span.setStatus({\n      // use an appropriate status code here\n      code: api.CanonicalCode.INTERNAL,\n      message: err.message,\n    });\n    span.end();\n    return null;\n  }\n}\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us on [gitter][gitter-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[gitter-image]: https://badges.gitter.im/open-telemetry/opentelemetry-js.svg\n[gitter-url]: https://gitter.im/open-telemetry/opentelemetry-node?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/master/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/status.svg?path=packages/opentelemetry-api\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api\n[devDependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/dev-status.svg?path=packages/opentelemetry-api\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/master/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"46f31dd2285d55d239195032528c3dab1bf0e15c","scripts":{"docs":"typedoc --tsconfig tsconfig.json --exclude test/**/*.ts","lint":"eslint . --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","watch":"tsc -w","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../","compile":"npm run version:update && tsc -p .","prepare":"npm run compile","lint:fix":"eslint . --ext .ts --fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","precompile":"tsc --version","test:browser":"nyc karma start --single-run","version:update":"node ../../scripts/version-update.js","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../"},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"lerna/3.22.1/node@v14.13.1+x64 (linux)","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"14.13.1","dependencies":{"@opentelemetry/context-base":"^0.12.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"gts":"2.0.2","nyc":"15.1.0","karma":"5.1.1","mocha":"7.2.0","sinon":"9.0.3","codecov":"3.7.2","typedoc":"0.18.0","webpack":"4.44.1","ts-mocha":"7.0.0","ts-loader":"8.0.2","linkinator":"2.1.1","typescript":"3.9.7","@types/node":"14.0.27","karma-mocha":"2.0.1","@types/mocha":"8.0.2","@types/sinon":"9.0.5","karma-webpack":"4.0.2","@types/webpack-env":"1.15.2","karma-spec-reporter":"0.0.32","karma-chrome-launcher":"3.1.0","istanbul-instrumenter-loader":"3.0.1","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_0.12.1-alpha.7_1603746714071_0.8105941440020468","host":"s3://npm-registry-packages"}},"0.13.0":{"name":"@opentelemetry/api","version":"0.13.0","keywords":["opentelemetry","nodejs","browser","tracing","profiling","metrics","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.13.0","maintainers":[{"name":"obecny","email":"bobecny@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"mayurkale22","email":"mayurkale22@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"aa240199e9a1e5dabc55f4de877fb5203a8b6ad6","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.13.0.tgz","fileCount":162,"integrity":"sha512-3F5zuMBhL1cQIGTFGuuGofS9/2bfhoJxT9sWLfHtx7A/vN6HSA6YiotPjWFK/aTiLjZA4YYnIjeA3di151xJrw==","signatures":[{"sig":"MEUCIQDR2kfW0fEWmm3qrGNbFB3NK+MJw7s9mfOHaq8EvV5qggIgU6tUQBm2iTk+zzwPU4n4FAiw1TPyaK0huN4FxHBCFIs=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":188647,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfyql2CRA9TVsSAnZWagAA+PgP/1g9a75+CinziQ9JtgHE\nbo5RjDvMv2P6eneUU9y20G2+TQlj2sfKzY/obWojGYqIju3YUol5Jsz852iA\n1Am0b+Vqr4Ug1UTyHEg61wpT/4UwqdpK0PabfJrdSrl139JFai8HCSqV3zpg\nWcslVc5VMxhSv6aCXHq+FZsRf0MJBI5lqegtWzXgDGTJljIV35RIMcvSkSBH\n48STeP2rHTsVFq52qgsWkPSfNqGYeAz6/UDdB5f3dFjog7EbagadrvguhSb2\nviqfDK5/Ymmm9I89ZDj+kcf+bWqUmjl2sgBrCpH7wtsQ7pJcBDGlUzAwfhPk\nhWM89JFQe0TOKqEzg08IK7je8azzCuocnS51H94uLMLwODQ5e0kZ4TuZYkbM\nYONuAqcZYk9uhkYZRh3HDsb+d8KP5rlZz8ICikOvCfnGl5Nm7/Jn+r7nZrge\n4HyYYKQmvVA/csNTCUpFRby1VT0SuQ9cZXRSJ6i6bIDZAH0frOt3+XRl+Twc\nA7CcBCaxw2TImfu4r4PA66k4yyrEOJiCWXjIHQYXMWLyL8xkWk/p1MjbXldH\n+j07rSB+qCt1RD4JFfaxoBUCmvnuMcCaGWa5hvQPS3GdRmvcl5ZjF1soOTtw\nwiOZoDgQD2vWok0Ya+PF3bx5PVqtYrTjgTtOT6gcdf+BaUTVnPfDKAvNNMou\nbIv/\r\n=q6eL\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"86cbd6798f9318c5920f9d9055f289a1c3f26500","scripts":{"docs":"typedoc --tsconfig tsconfig.json --exclude test/**/*.ts","lint":"eslint . --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","watch":"tsc -w","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../","compile":"npm run version:update && tsc -p .","prepare":"npm run compile","lint:fix":"eslint . --ext .ts --fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","precompile":"tsc --version","test:browser":"nyc karma start --single-run","version:update":"node ../../scripts/version-update.js","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../"},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"lerna/3.22.1/node@v14.8.0+x64 (darwin)","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"14.8.0","dependencies":{"@opentelemetry/context-base":"^0.13.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"gts":"2.0.2","nyc":"15.1.0","karma":"5.2.3","mocha":"7.2.0","sinon":"9.2.1","codecov":"3.8.1","typedoc":"0.19.2","webpack":"4.44.2","ts-mocha":"8.0.0","ts-loader":"8.0.11","linkinator":"2.4.0","typescript":"3.9.7","@types/node":"14.14.10","karma-mocha":"2.0.1","@types/mocha":"8.0.4","@types/sinon":"9.0.9","karma-webpack":"4.0.2","@types/webpack-env":"1.16.0","karma-spec-reporter":"0.0.32","karma-chrome-launcher":"3.1.0","istanbul-instrumenter-loader":"3.0.1","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_0.13.0_1607117173429_0.8794372073775254","host":"s3://npm-registry-packages"}},"0.14.0":{"name":"@opentelemetry/api","version":"0.14.0","keywords":["opentelemetry","nodejs","browser","tracing","profiling","metrics","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.14.0","maintainers":[{"name":"mayurkale22","email":"mayurkale22@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"obecny","email":"bobecny@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"4e17d8d2f1da72b19374efa7b6526aa001267cae","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.14.0.tgz","fileCount":159,"integrity":"sha512-L7RMuZr5LzMmZiQSQDy9O1jo0q+DaLy6XpYJfIGfYSfoJA5qzYwUP3sP1uMIQ549DvxAgM3ng85EaPTM/hUHwQ==","signatures":[{"sig":"MEUCIAo3GkQRDwbll5hETnOF/PA1LVPI8tQuE0syReKfNu8/AiEAkL7A1vC8KJsx/8Fu0KnoPTov6aGQPYvfMnIoUtSoA5Q=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":185200,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf28UdCRA9TVsSAnZWagAAb80P/jr1fTQ/NvU78kO7nX/c\nzyItXc1bWPusKj8IDJ5VB+5Gz++BCLdJSSZvTyPsQxpgdWRrVFTh974MwLDL\nWqRLHZl+oW0qt70QiezoyU/91dnBxmvVqfoLHwlbRFGfJaJn8fRu5VQbTp2Y\n/jfV5/WMiego43UxU72JuqgUADjP/hABrKSK/f3eYlrkMGohg/zHAxbRzXdm\njEpwsTl0Fo0NZOvjZcmtOw8xZJAhYgqK0xT8lVdXdrps3qrFFoFD8+oObmE9\ntzIUxNFDRC6FbPZdqPbEQCw26OuuhqgN6k1Y061fWIVv+fWmz4EsiSHDocvR\nzgU90YeZjQek9OmAnLdopTYNT6Vx7mU8WR+aUcVV/YcB3PcIm/1PORjsU0Kk\nC/E601zMppQ0sQd2YzoYWInlQM4Qz/c3Te8Se2UDsHBmm3XKh3qqFzkqH319\nPGgOsvkYkYFuvOA34CuHk2GE6aH7NEdg8V0qTcbGGR8DTn3/TM1qmZH+w1An\ndTZa5PcWBfmR8hvttr5FkyOITPyVvdUN6N5PskDz6eg3CIQn04hXsBizzXPc\n+sN5tat6BlmNbJMVY77NBPox5Fnr8OfWC7yrXrYbYHeNaodCzIepHq8CoSyG\n5COOJIAKvsOKuzWtQ0ifvKt95yPWO8JKIqxsvanu29NzC+atg4mJwYyAAqdi\n6P2i\r\n=WDpF\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"27a8d4530c56257c191468b073669909bf8892a1","scripts":{"docs":"typedoc --tsconfig tsconfig.json --exclude test/**/*.ts","lint":"eslint . --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","watch":"tsc -w","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../","compile":"npm run version:update && tsc -p .","prepare":"npm run compile","lint:fix":"eslint . --ext .ts --fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","precompile":"tsc --version","test:browser":"nyc karma start --single-run","version:update":"node ../../scripts/version-update.js","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../"},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"lerna/3.22.1/node@v14.8.0+x64 (darwin)","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"14.8.0","dependencies":{"@opentelemetry/context-base":"^0.14.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"gts":"2.0.2","nyc":"15.1.0","karma":"5.2.3","mocha":"7.2.0","sinon":"9.2.2","codecov":"3.8.1","typedoc":"0.19.2","webpack":"4.44.2","ts-mocha":"8.0.0","ts-loader":"8.0.12","linkinator":"2.8.0","typescript":"3.9.7","@types/node":"14.14.12","karma-mocha":"2.0.1","@types/mocha":"8.2.0","@types/sinon":"9.0.9","karma-webpack":"4.0.2","@types/webpack-env":"1.16.0","karma-spec-reporter":"0.0.32","karma-chrome-launcher":"3.1.0","istanbul-instrumenter-loader":"3.0.1","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_0.14.0_1608238365366_0.4980243247449234","host":"s3://npm-registry-packages"}},"0.15.0":{"name":"@opentelemetry/api","version":"0.15.0","keywords":["opentelemetry","nodejs","browser","tracing","profiling","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.15.0","maintainers":[{"name":"mayurkale22","email":"mayurkale22@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"obecny","email":"bobecny@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"0324a96e70e7a8122dc6ec814ce796535c8d9123","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.15.0.tgz","fileCount":129,"integrity":"sha512-tPyzyO8P33wWUlUdo8+NawX2qnn8HyVUAilANWLxrT9C6g4JbN6eatSQrx3G0NzohnobT3fiwrbVFNeacWS9gg==","signatures":[{"sig":"MEQCIDI4yV2H9JgDXeT8oKaBZmpdpo3bM6ZZtOK0f71NW8nRAiBMG2NNSSOCeLshNDRd57TqQcMB198MQMjms1kcW/OKMw==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":139828,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgCf4JCRA9TVsSAnZWagAA3h8P/A23XXCCrMBM298yDeEW\nvi1Qjiu0rJqmzPo9AJuhufFr5VTDmb6kgM8rXeF11sdo9EI4T8NkNFc0IByz\nhwErBFwr7Nx4Y12FwAzStZ194Vq+bc61A5R4EP7UyUMJR775CBFmoghDeN5X\nIJ8yuZeS4eW9maZ5W5Ws/6jaXk6Cr9czW6aIs96IGv3vhcawTILU9WiD+UOh\n+g/EqRk+aN/+NNpX6Vr6sM4eHSJUBeXTJ1uOTVAI4OKvsE3aGs0Cbo3MOcia\nN/kTjguEJ0UHVkYs2khGfnngkItN7er6BAprBJRoWL/O6sCruIu/jZthZNcZ\nL5OGiE7/j3in9d4ckuwdBDBvyEGse1n4PuVX+yPk2T4u+RrsCYwLSz1ARLWI\nj2qrrzXtShVJprB14rtGou3x8DxG7B6sTupuU4kuKb1xzne8Uxobk1PgXUFs\nWS71PsmKKCjkQJPdfHo8vWnEEhInz5Se+kqCdJ4cJjjITelngs4um0URNLed\noYClgjHJBiRTqL9fJ6/ZXXTE9oWntI5uefZCBnBLQi31e7qnc6QDfXH0IlCG\nljgZhyYglP9raLW4y5qjv9RoBXBDsbmCZztYQXtJq4x0Zxr5HPdUKSszFx3W\nNlDfOueE2o9fng/ERGvwU75lATmtqpeB0uc30jiXyZQa/yagDOD3BRvZRhm9\nz2Q/\r\n=YR28\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"960b868f5b7686eabbf49190071b8463551e5d8f","scripts":{"docs":"typedoc --tsconfig tsconfig.docs.json","lint":"eslint . --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","clean":"tsc --build --clean","watch":"tsc --build --watch","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../","compile":"tsc --build","version":"node ../../scripts/version-update.js","lint:fix":"eslint . --ext .ts --fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","test:browser":"nyc karma start --single-run","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../"},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"lerna/3.22.1/node@v14.8.0+x64 (darwin)","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"14.8.0","dependencies":{"@opentelemetry/context-base":"^0.15.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"gts":"2.0.2","nyc":"15.1.0","karma":"5.2.3","mocha":"7.2.0","sinon":"9.2.3","codecov":"3.8.1","typedoc":"0.20.14","webpack":"4.46.0","ts-mocha":"8.0.0","ts-loader":"8.0.14","linkinator":"2.13.1","typescript":"3.9.7","@types/node":"14.14.20","karma-mocha":"2.0.1","@types/mocha":"8.2.0","@types/sinon":"9.0.10","karma-webpack":"4.0.2","@types/webpack-env":"1.16.0","karma-spec-reporter":"0.0.32","karma-chrome-launcher":"3.1.0","istanbul-instrumenter-loader":"3.0.1","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_0.15.0_1611267593175_0.22205822190881386","host":"s3://npm-registry-packages"}},"0.16.0":{"name":"@opentelemetry/api","version":"0.16.0","keywords":["opentelemetry","nodejs","browser","tracing","profiling","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.16.0","maintainers":[{"name":"mayurkale22","email":"mayurkale22@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"obecny","email":"bobecny@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"bd89460626013fc2cc7702e51ebd537ee84350e9","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.16.0.tgz","fileCount":159,"integrity":"sha512-y5mNFAiktm7Zyf0GrQ6kjsRqace/WCXk9gMo/sOOna4TtMW8NaZgJceKrsQZl3qiPY9Upu8O9VvdlETXDx4U5A==","signatures":[{"sig":"MEUCIAnfPzforrvanJnpPbpgIEQr7lWiELI5RtGiltDkCIeDAiEAjq+T2JKS3n5N2ImZXCtdCUCyHe1OyUrx0QLFW/7ILQQ=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":179147,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgGIGsCRA9TVsSAnZWagAA3QsQAKCkC6PFt8+gZZxrFufu\nafrvEa4a5bunq6n1NAYdQFjTE7ftA/oSpZ9xsXIIH37IoyRTKMFy01h5IBJ1\n8tySzAfLLH3CI/uXHXBJhe1HD0TwDN6PnGrkfoLt/MVEVzWuoWJnIcscqlUL\nI3RWJQLV1bX8ZyDUni/j5/LNisutO65nST+iNMzjCq5yXMRlVg50jBwaJ9NK\ngIRbK35PRmtpABdR+tX/dnURbzknpaP6CbFKC+taZO63jIublvvc08u+z8h8\npZ84PVGdow+QLQ430MrFUThFQpLqGgo3yGAvbnbH2W6H0DN+2byQx3pmzpWr\nB9QnOJOuFhvD9kzL7+a5Zqsf983ZAhm6HvKWWuKZC5g1WffeUSHuOKhuuJqw\n6rHk3aR6CnflcbnyR06hvWRoVNtqSs1KzWjZqV728ItcwAooiAilYiXAFRpj\nMjAo504ZkiDsMJXANdh+zIgUxoRnTUqu7yTDi0uCYTTJ8nGQ1r5XHfQSEozL\nf7yZZO0OVePO9xWMBbtsTS46fs6zYf6PwAbGlFac1rgrRKY5nARD1MDGNw4q\nsL9GeqL14GMInx/fAsBJWvwA8/HcEH04tqf+ZQWUAKfEI9t/urPSPTvEVdry\nzrG46z9Lhu7FZmemesTJ+aLqPPxRMWP4LW0NRp17JUhWtixQRrB23lcr2IsV\nFDOD\r\n=KbLu\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"e68863f8e63854b08ad13fb54677294ac6d6b681","scripts":{"docs":"typedoc --tsconfig tsconfig.docs.json","lint":"eslint . --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","clean":"tsc --build --clean","watch":"tsc --build --watch","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../","compile":"tsc --build","version":"node ../../scripts/version-update.js","lint:fix":"eslint . --ext .ts --fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","test:browser":"nyc karma start --single-run","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../"},"_npmUser":{"name":"obecny","email":"bobecny@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"lerna/3.22.1/node@v12.19.0+x64 (darwin)","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"12.19.0","dependencies":{"@opentelemetry/context-base":"^0.16.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"gts":"2.0.2","nyc":"15.1.0","karma":"5.2.3","mocha":"7.2.0","sinon":"9.2.3","codecov":"3.8.1","typedoc":"0.20.14","webpack":"4.46.0","ts-mocha":"8.0.0","ts-loader":"8.0.14","linkinator":"2.13.1","typescript":"3.9.7","@types/node":"14.14.20","karma-mocha":"2.0.1","@types/mocha":"8.2.0","@types/sinon":"9.0.10","karma-webpack":"4.0.2","@types/webpack-env":"1.16.0","karma-spec-reporter":"0.0.32","karma-chrome-launcher":"3.1.0","istanbul-instrumenter-loader":"3.0.1","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_0.16.0_1612218795886_0.14795342189967542","host":"s3://npm-registry-packages"}},"0.16.1-alpha.11":{"name":"@opentelemetry/api","version":"0.16.1-alpha.11","keywords":["opentelemetry","nodejs","browser","tracing","profiling","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.16.1-alpha.11","maintainers":[{"name":"mayurkale22","email":"mayurkale22@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"obecny","email":"bobecny@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"e116412ec8d045bf801a96a9c79a4c4afe0352ce","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.16.1-alpha.11.tgz","fileCount":138,"integrity":"sha512-u/p/eO+YsDxBSWTMEywSDYGcs95tRfhr6gI0HEfyJPUA0LIv6bImDuoKiyrslPkslh+AM+GrPPho2BXovkZWvg==","signatures":[{"sig":"MEUCIFky5+tX1bSHtiGYShIUn9w+BtSboEumMhaTVbDm3kSZAiEAqkhDgFidNsF6P6zn0wCyu0NFCDrqJSL2PE+6cuo0fC4=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":150875,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgIWQnCRA9TVsSAnZWagAARjcP/ijH1s2SL+zIXkbU8H4n\nwNqcNJLs/Vh7Qs549nnhHjpibMvKG12IuyCdTVEnmWjKG6YA89f229nJ1tsM\n5s9ZI+Jy6wMZUB1uZ925E+KObbiThEuAPLH61yjYoNHpm6hAS7TyKapvDV3L\nETM4AbM52eGpBha/PmWKcNW802Iuak9K9QCOKI/zYwE+whLpR1wPbb6nMwsV\nVnDe3KPmmnkvFsyLaZzEMr6P3N/lnPkxnbDh52jpCQ8lZhTHx8AVCVMEoOf8\neqNeRZbUX44qd/Emei2FAL349j9ugEciqYmPmEmWfwgQQtJcznYNnA88rWJ1\nLBtElJ68iqronCvsFsBVEHgfxuRgeUvSpUZe3nqyVyegz6UAh0WrAEmpqbs+\nIaK0htmnoP3ChlzUOcb++hhUYLiMUlgH9ChaJtL3do0fUoRP2ha07OV/5YnK\n677uxzB2iL0NvyWjaAiliphIzwDpuMxrrb32oiaslGhp0C/buHTRSJ2p4lYj\nHW/AZ8eTuNZwzipCX0JShL3In+gvBCKQl3VdQi7dW4wXh/CN5KFr1ooTo83c\nVjPe5fzjtcTphriJSxxvOxdHxXdoN9GQ5M2mNZj1D29GVDUUlxMQOzmT5KY6\nbjOWScoCnLf9ISsh1EchnYZnp2YHka/vMGHPEvX8bcTe0lT827PXb2u93E0x\nDuC9\r\n=dNXg\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","readme":"# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the OpenTelemetry API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Quick Start\n\nTo get started you need to install the SDK and plugins, create a TracerProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install tracing dependencies\n$ npm install \\\n    @opentelemetry/api \\\n    @opentelemetry/core \\\n    @opentelemetry/node \\\n    @opentelemetry/tracing \\\n    @opentelemetry/exporter-jaeger \\ # add exporters as needed\n    @opentelemetry/plugin-http # add plugins as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Tracing\n\n```javascript\nconst { NodeTracerProvider } = require(\"@opentelemetry/node\");\nconst { SimpleSpanProcessor } = require(\"@opentelemetry/tracing\");\nconst { JaegerExporter } = require(\"@opentelemetry/exporter-jaeger\");\n\nconst tracerProvider = new NodeTracerProvider();\n\n/**\n * The SimpleSpanProcessor does no batching and exports spans\n * immediately when they end. For most production use cases,\n * OpenTelemetry recommends use of the BatchSpanProcessor.\n */\ntracerProvider.addSpanProcessor(\n  new SimpleSpanProcessor(\n    new JaegerExporter({\n      serviceName: 'my-service'\n    })\n  )\n);\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries. The OpenTelemetry API provides\n * methods to set global SDK implementations, but the default SDK provides\n * a convenience method named `register` which registers same defaults\n * for you.\n *\n * By default the NodeTracerProvider uses Trace Context for propagation\n * and AsyncHooksScopeManager for context management. To learn about\n * customizing this behavior, see API Registration Options below.\n */\ntracerProvider.register();\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Registration Options\n\nIf you prefer to choose your own propagator or context manager, you may pass an options object into the `tracerProvider.register()` method. Omitted or `undefined` options will be replaced by a default value and `null` values will be skipped.\n\n```javascript\nconst { B3Propagator } = require(\"@opentelemetry/propagator-b3\");\n\ntracerProvider.register({\n  // Use B3 Propagation\n  propagator: new B3Propagator(),\n\n  // Skip registering a default context manager\n  contextManager: null,\n});\n```\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Trace API Documentation][trace-api-docs]\n- [Propagation API Documentation][propagation-api-docs]\n- [Context API Documentation][context-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\n\n/* Initialize TracerProvider */\napi.trace.setGlobalTracerProvider(tracerProvider);\n/* returns tracerProvider (no-op if a working provider has not been initialized) */\napi.trace.getTracerProvider();\n/* returns a tracer from the registered global tracer provider (no-op if a working provider has not been initialized) */\napi.trace.getTracer(name, version);\n\n/* Initialize Propagator */\napi.propagation.setGlobalPropagator(httpTraceContextPropagator);\n\n/* Initialize Context Manager */\napi.context.setGlobalContextManager(asyncHooksContextManager);\n```\n\n### Library Authors\n\nLibrary authors need only to depend on the `@opentelemetry/api` package and trust that the application owners which use their library will initialize an appropriate SDK.\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\n\nconst tracer = api.trace.getTracer(\"my-library-name\", \"0.2.3\");\n\nasync function doSomething() {\n  const span = tracer.startSpan(\"doSomething\");\n  try {\n    const result = await doSomethingElse();\n    span.end();\n    return result;\n  } catch (err) {\n    span.setStatus({\n      // use an appropriate status code here\n      code: api.SpanStatusCode.ERROR,\n      message: err.message,\n    });\n    span.end();\n    return null;\n  }\n}\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/status.svg?path=packages/opentelemetry-api\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api\n[devDependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/dev-status.svg?path=packages/opentelemetry-api\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"70a128ff5dca16060ca7c2cff943369ae9999c34","scripts":{"docs":"typedoc --tsconfig tsconfig.docs.json","lint":"eslint . --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","clean":"tsc --build --clean","watch":"tsc --build --watch","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../","compile":"tsc --build","version":"node ../../scripts/version-update.js","lint:fix":"eslint . --ext .ts --fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","test:browser":"nyc karma start --single-run","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../"},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"lerna/3.22.1/node@v14.15.4+x64 (linux)","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"14.15.4","dependencies":{"@opentelemetry/context-base":"^0.16.1-alpha.11+70a128ff"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"gts":"3.1.0","nyc":"15.1.0","karma":"5.2.3","mocha":"7.2.0","sinon":"9.2.3","codecov":"3.8.1","typedoc":"0.20.14","webpack":"4.46.0","ts-mocha":"8.0.0","ts-loader":"8.0.14","linkinator":"2.13.1","typescript":"4.1.3","@types/node":"14.14.20","karma-mocha":"2.0.1","@types/mocha":"8.2.0","@types/sinon":"9.0.10","karma-webpack":"4.0.2","@types/webpack-env":"1.16.0","karma-spec-reporter":"0.0.32","karma-chrome-launcher":"3.1.0","istanbul-instrumenter-loader":"3.0.1","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_0.16.1-alpha.11_1612801062958_0.7690074916494376","host":"s3://npm-registry-packages"}},"0.16.1-alpha.14":{"name":"@opentelemetry/api","version":"0.16.1-alpha.14","keywords":["opentelemetry","nodejs","browser","tracing","profiling","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.16.1-alpha.14","maintainers":[{"name":"mayurkale22","email":"mayurkale22@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"obecny","email":"bobecny@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"d8e1c859d1180d18f9212f8a77674d81fcf4f0fe","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.16.1-alpha.14.tgz","fileCount":138,"integrity":"sha512-l3ep4BREUC9/cfsEMSiVknlTvDsWjDmVgJYQu0jOmwiWVP0OP79qeTNCPY+R4DCqaYR+7mWVuz2VeeWEkIdUIg==","signatures":[{"sig":"MEQCIE+RR3wXvSbjTZNn1uQG/UW5jA4LNTraoFFhsPdioWA8AiA+3EACYktCPeIYOmU03YKcVW4ybGbBr+ILUS9fjhHNww==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":150678,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgJARaCRA9TVsSAnZWagAA//UP/jykii1ZFoCmxKUeR3+b\nbAQhVPYT/9lzb/R+27+zpmnLk0g23uotQSAC3V8VVCDVCGe8LiBUXerkhmgt\nxjR5E0HhzZ7VGVvGlJ2fQ4kZtbUuLw2aM/LyoYIaj0IN6dq9PXuAwOkHqh0i\n9N9Ruo9BOc+/8giyUoxk50UX6WxqvdOGNZs/UWlL+diKu9jwzuG0utVVdzhQ\nKdFySF53Ro81Pa0d9ZNC7B1tC//LguxkyKl0e5qyghypLBwHPD44ADHYOxE4\nA1pj/vLjQogEmiRywY26YSsENZY22xflRNoSAE4AcaLgqHtNq0QHGkwNDg6W\ntk58VYYYXYQvbJ2gWITAmHbCnrO/DyXQj0hfijTM87edmHw0aJ67NeeYXBYI\nCVY5vC7yP68mei6BReBhsY4YyghnGh4P7W5t0YFRtx0635w33AQWt58eH50u\nq7fHjJN6/KixhDEkqAQviduHMzec7/hldAJGT+P4r6dguf6CnDkeE2zXxHVV\nfWxqRI5ztBWRQQBZZOEgaDVYRjs5o5cbv6/icWKnnbMUiM5lycODev5otgLk\nJyKQVbFba/PnhzNbMz3I0X578HHDJnk1XChMeum2WTGQkTqGGAhztQ/Qq9FL\nHACRoMBWKhgbKPJVchqBsW6njg/73ezmsFqAvgBMaKfBWoJCPHkW/6LOvB1T\ndr08\r\n=06sS\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","readme":"# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the OpenTelemetry API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Quick Start\n\nTo get started you need to install the SDK and plugins, create a TracerProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install tracing dependencies\n$ npm install \\\n    @opentelemetry/api \\\n    @opentelemetry/core \\\n    @opentelemetry/node \\\n    @opentelemetry/tracing \\\n    @opentelemetry/exporter-jaeger \\ # add exporters as needed\n    @opentelemetry/plugin-http # add plugins as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Tracing\n\n```javascript\nconst { NodeTracerProvider } = require(\"@opentelemetry/node\");\nconst { SimpleSpanProcessor } = require(\"@opentelemetry/tracing\");\nconst { JaegerExporter } = require(\"@opentelemetry/exporter-jaeger\");\n\nconst tracerProvider = new NodeTracerProvider();\n\n/**\n * The SimpleSpanProcessor does no batching and exports spans\n * immediately when they end. For most production use cases,\n * OpenTelemetry recommends use of the BatchSpanProcessor.\n */\ntracerProvider.addSpanProcessor(\n  new SimpleSpanProcessor(\n    new JaegerExporter({\n      serviceName: 'my-service'\n    })\n  )\n);\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries. The OpenTelemetry API provides\n * methods to set global SDK implementations, but the default SDK provides\n * a convenience method named `register` which registers same defaults\n * for you.\n *\n * By default the NodeTracerProvider uses Trace Context for propagation\n * and AsyncHooksScopeManager for context management. To learn about\n * customizing this behavior, see API Registration Options below.\n */\ntracerProvider.register();\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Registration Options\n\nIf you prefer to choose your own propagator or context manager, you may pass an options object into the `tracerProvider.register()` method. Omitted or `undefined` options will be replaced by a default value and `null` values will be skipped.\n\n```javascript\nconst { B3Propagator } = require(\"@opentelemetry/propagator-b3\");\n\ntracerProvider.register({\n  // Use B3 Propagation\n  propagator: new B3Propagator(),\n\n  // Skip registering a default context manager\n  contextManager: null,\n});\n```\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Trace API Documentation][trace-api-docs]\n- [Propagation API Documentation][propagation-api-docs]\n- [Context API Documentation][context-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\n\n/* Initialize TracerProvider */\napi.trace.setGlobalTracerProvider(tracerProvider);\n/* returns tracerProvider (no-op if a working provider has not been initialized) */\napi.trace.getTracerProvider();\n/* returns a tracer from the registered global tracer provider (no-op if a working provider has not been initialized) */\napi.trace.getTracer(name, version);\n\n/* Initialize Propagator */\napi.propagation.setGlobalPropagator(httpTraceContextPropagator);\n\n/* Initialize Context Manager */\napi.context.setGlobalContextManager(asyncHooksContextManager);\n```\n\n### Library Authors\n\nLibrary authors need only to depend on the `@opentelemetry/api` package and trust that the application owners which use their library will initialize an appropriate SDK.\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\n\nconst tracer = api.trace.getTracer(\"my-library-name\", \"0.2.3\");\n\nasync function doSomething() {\n  const span = tracer.startSpan(\"doSomething\");\n  try {\n    const result = await doSomethingElse();\n    span.end();\n    return result;\n  } catch (err) {\n    span.setStatus({\n      // use an appropriate status code here\n      code: api.SpanStatusCode.ERROR,\n      message: err.message,\n    });\n    span.end();\n    return null;\n  }\n}\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/status.svg?path=packages/opentelemetry-api\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api\n[devDependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/dev-status.svg?path=packages/opentelemetry-api\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"000a8ac099a3848a9a3c66f4bdd4826b4cff987a","scripts":{"docs":"typedoc --tsconfig tsconfig.docs.json","lint":"eslint . --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","clean":"tsc --build --clean","watch":"tsc --build --watch","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../","compile":"tsc --build","version":"node ../../scripts/version-update.js","lint:fix":"eslint . --ext .ts --fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","test:browser":"nyc karma start --single-run","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../"},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"lerna/3.22.1/node@v14.15.4+x64 (linux)","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"14.15.4","dependencies":{"@opentelemetry/context-base":"^0.16.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"gts":"3.1.0","nyc":"15.1.0","karma":"5.2.3","mocha":"7.2.0","sinon":"9.2.3","codecov":"3.8.1","typedoc":"0.20.14","webpack":"4.46.0","ts-mocha":"8.0.0","ts-loader":"8.0.14","linkinator":"2.13.1","typescript":"4.1.3","@types/node":"14.14.20","karma-mocha":"2.0.1","@types/mocha":"8.2.0","@types/sinon":"9.0.10","karma-webpack":"4.0.2","@types/webpack-env":"1.16.0","karma-spec-reporter":"0.0.32","karma-chrome-launcher":"3.1.0","istanbul-instrumenter-loader":"3.0.1","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_0.16.1-alpha.14_1612973146062_0.07723915647786939","host":"s3://npm-registry-packages"}},"0.16.1-alpha.15":{"name":"@opentelemetry/api","version":"0.16.1-alpha.15","keywords":["opentelemetry","nodejs","browser","tracing","profiling","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.16.1-alpha.15","maintainers":[{"name":"mayurkale22","email":"mayurkale22@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"obecny","email":"bobecny@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"817efd61296c2d4c1d7050c496826a99524166f7","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.16.1-alpha.15.tgz","fileCount":150,"integrity":"sha512-Hl0wWKQDGyAcZBPsyVwh2MA2cUTQifrZtaEzw/ba+wA7/eys5ZwtPA3Un8EIWaS69zOfUPM2TP56PnGbLLvWyg==","signatures":[{"sig":"MEYCIQCt0YVMMuUKbcwW5ZR0TIlSt3YAsLS1fM+ro8ZjOtKaHgIhAOjOtVNvOPJoUHb2pMnSphTUv2f4CQum32iS6Olqg95w","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":182639,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgJFuSCRA9TVsSAnZWagAAZjQP/0cfkwd+5UnoBHOjwxuc\nDph7bPNFeiqjGv29Ai+pVTrR6GT7ZRyQNTPoVTEqm3h+ImbZbYUcBsYgK7DJ\nergYfn+fVe7yByeHGXcyRd4xJqRrINaOyH3DqhXMU8dpAYjLzl+VoKrUjPiE\nyBjiGmsurJ5ZSiGdruloL8fd/+YYX9j84toub92LssqW1h1mFO3m2GKCKx6o\nwS3ALftArk+JBQfuxJFh0chAYbKdhKt31KIX4nTQdAxOwjSQmbC/b5r/QZkP\noOWd61xbfMGXZQ/tGBtQH5ICLjZHTRhi23JSIzFedG9G64PcZf+N54wuEiqC\naPLAvfhb3HDVY8LtsJTlbP5KyImOaBbfJm0IL6PyyyimRJSYTaYb6sscmb6+\n0kdJM07FbarCLLSK+TQkogFhfVXBptDA+gbBXLTn4JPV5S+5yvgCEAMpL2IU\n8HQRCxtge0nWItz3h0zQ/Fbfc8g3Wsf1WSIBgvegptT2i9DLJAjHTHaQkfuX\n5RmyzHeZs3CcuXP7T743tFKzho9n30M2IxoFkWgxwZmoso69TkYLrgUb0Uen\nk6WQVi1ZEW9fe8zIopbubPa0qxrKUAA0yAPelKyrlhrEcioBrrt0XEQGCpET\ne7Jox5Jc2uooGS4eosGnkgff74Ge5TLVipUlgkCtAW7NU5tQ8v+Ly9WOJAtG\nIQZx\r\n=/hDr\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","readme":"# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the OpenTelemetry API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Quick Start\n\nTo get started you need to install the SDK and plugins, create a TracerProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install tracing dependencies\n$ npm install \\\n    @opentelemetry/api \\\n    @opentelemetry/core \\\n    @opentelemetry/node \\\n    @opentelemetry/tracing \\\n    @opentelemetry/exporter-jaeger \\ # add exporters as needed\n    @opentelemetry/plugin-http # add plugins as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Tracing\n\n```javascript\nconst { NodeTracerProvider } = require(\"@opentelemetry/node\");\nconst { SimpleSpanProcessor } = require(\"@opentelemetry/tracing\");\nconst { JaegerExporter } = require(\"@opentelemetry/exporter-jaeger\");\n\nconst tracerProvider = new NodeTracerProvider();\n\n/**\n * The SimpleSpanProcessor does no batching and exports spans\n * immediately when they end. For most production use cases,\n * OpenTelemetry recommends use of the BatchSpanProcessor.\n */\ntracerProvider.addSpanProcessor(\n  new SimpleSpanProcessor(\n    new JaegerExporter({\n      serviceName: 'my-service'\n    })\n  )\n);\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries. The OpenTelemetry API provides\n * methods to set global SDK implementations, but the default SDK provides\n * a convenience method named `register` which registers same defaults\n * for you.\n *\n * By default the NodeTracerProvider uses Trace Context for propagation\n * and AsyncHooksScopeManager for context management. To learn about\n * customizing this behavior, see API Registration Options below.\n */\ntracerProvider.register();\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Registration Options\n\nIf you prefer to choose your own propagator or context manager, you may pass an options object into the `tracerProvider.register()` method. Omitted or `undefined` options will be replaced by a default value and `null` values will be skipped.\n\n```javascript\nconst { B3Propagator } = require(\"@opentelemetry/propagator-b3\");\n\ntracerProvider.register({\n  // Use B3 Propagation\n  propagator: new B3Propagator(),\n\n  // Skip registering a default context manager\n  contextManager: null,\n});\n```\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Trace API Documentation][trace-api-docs]\n- [Propagation API Documentation][propagation-api-docs]\n- [Context API Documentation][context-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\n\n/* Initialize TracerProvider */\napi.trace.setGlobalTracerProvider(tracerProvider);\n/* returns tracerProvider (no-op if a working provider has not been initialized) */\napi.trace.getTracerProvider();\n/* returns a tracer from the registered global tracer provider (no-op if a working provider has not been initialized) */\napi.trace.getTracer(name, version);\n\n/* Initialize Propagator */\napi.propagation.setGlobalPropagator(httpTraceContextPropagator);\n\n/* Initialize Context Manager */\napi.context.setGlobalContextManager(asyncHooksContextManager);\n```\n\n### Library Authors\n\nLibrary authors need only to depend on the `@opentelemetry/api` package and trust that the application owners which use their library will initialize an appropriate SDK.\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\n\nconst tracer = api.trace.getTracer(\"my-library-name\", \"0.2.3\");\n\nasync function doSomething() {\n  const span = tracer.startSpan(\"doSomething\");\n  try {\n    const result = await doSomethingElse();\n    span.end();\n    return result;\n  } catch (err) {\n    span.setStatus({\n      // use an appropriate status code here\n      code: api.SpanStatusCode.ERROR,\n      message: err.message,\n    });\n    span.end();\n    return null;\n  }\n}\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/status.svg?path=packages/opentelemetry-api\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api\n[devDependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/dev-status.svg?path=packages/opentelemetry-api\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"1d682c2f75f9d11265cfc1692fa822174594d4b0","scripts":{"docs":"typedoc --tsconfig tsconfig.docs.json","lint":"eslint . --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","clean":"tsc --build --clean","watch":"tsc --build --watch","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../","compile":"tsc --build","version":"node ../../scripts/version-update.js","lint:fix":"eslint . --ext .ts --fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","test:browser":"nyc karma start --single-run","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../"},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"lerna/3.22.1/node@v14.15.4+x64 (linux)","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"14.15.4","dependencies":{"@opentelemetry/context-base":"^0.16.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"gts":"3.1.0","nyc":"15.1.0","karma":"5.2.3","mocha":"7.2.0","sinon":"9.2.3","codecov":"3.8.1","typedoc":"0.20.14","webpack":"4.46.0","ts-mocha":"8.0.0","ts-loader":"8.0.14","linkinator":"2.13.1","typescript":"4.1.3","@types/node":"14.14.20","karma-mocha":"2.0.1","@types/mocha":"8.2.0","@types/sinon":"9.0.10","karma-webpack":"4.0.2","@types/webpack-env":"1.16.0","karma-spec-reporter":"0.0.32","karma-chrome-launcher":"3.1.0","istanbul-instrumenter-loader":"3.0.1","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_0.16.1-alpha.15_1612995473924_0.09648780192353335","host":"s3://npm-registry-packages"}},"0.16.1-alpha.20":{"name":"@opentelemetry/api","version":"0.16.1-alpha.20","keywords":["opentelemetry","nodejs","browser","tracing","profiling","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.16.1-alpha.20","maintainers":[{"name":"mayurkale22","email":"mayurkale22@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"obecny","email":"bobecny@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"7de64c09b619c5dd753a0ac48dfb6910b3460279","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.16.1-alpha.20.tgz","fileCount":144,"integrity":"sha512-VidmfATgIAXt30adASH+ohydkGh6pR/9QnxKsNb65W8rPkDExTk3RBZySYHlHeKfH0+fkRCaSBLYnv+J2AG9ow==","signatures":[{"sig":"MEUCIHldBCQulIAJb9E4AOMCuJu/1C8GPVN5wr7WxB/tYnBkAiEAm+uNx2WR/OyRksZWicjbsPjVmU28FrXtddGiwbe8ftg=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":173191,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgLYHdCRA9TVsSAnZWagAARz8P/iZqYc2kuDxS63UbpV9f\nU/1EsJBKZ4YJqZkyDW0xqYCcwgGt4VeRkHdVGuLwaDbI142MEhc+/PP+sOxg\nXPlpVKhsxI/29iNpkyF319kbqnIXBs2hyonNd6c+AwuVW9CVPosFM2i+smkA\nC/jvTZHpJPIUn+OuWewwkSsyvcS2B3YlEajOWYCntZv5gxzOckRHxdbQHEli\nl3TjaZw/YyiP1Ww+J8yU/WOhLHO2iPSqRJhyp2dEzSTMab/Rt5RJfisTfTO0\ngXauVazV+QpMo6CE5rVhLvgAoh8h0TrvEZlGMZTJIt5evR9kOCPXx5fTEogp\nYxgXbw8MV4PTAjOoHNKd0UmMeBHie6YEATgEB1d6CTs0wrJFCs3d1e+xNiA3\njyMJHvQP/+dWVcSsyzmvAP55hcOh/ZrmUJtQ7YYy2s10JH4wlj0BG7fMvRLc\nR3jxHl3p4Wd1W2tCjGphR+1zWEZSCptNX/tZDWGL1wjpUUl8nBJ+yZOoWz/X\ncCaXI9va+JIKElRBPFwQrJXLUMamWrfmaCnI73SSlptlr6m4YL5WEOqMapfm\nPmRSd24q8ZW7T0uqMhuHGOk/5wfOgUEIYtnXwlgKYB3F/kLD7drfsi5SnxyS\nYwnyNB6i5BhNzFnYzIhr2DRbsul5pG84vwIGxpyg3/5I16XoPdyLUnjBrMh+\nQVQo\r\n=UN9O\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","readme":"# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the OpenTelemetry API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Quick Start\n\nTo get started you need to install the SDK and plugins, create a TracerProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install tracing dependencies\n$ npm install \\\n    @opentelemetry/api \\\n    @opentelemetry/core \\\n    @opentelemetry/node \\\n    @opentelemetry/tracing \\\n    @opentelemetry/exporter-jaeger \\ # add exporters as needed\n    @opentelemetry/plugin-http # add plugins as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Tracing\n\n```javascript\nconst { NodeTracerProvider } = require(\"@opentelemetry/node\");\nconst { SimpleSpanProcessor } = require(\"@opentelemetry/tracing\");\nconst { JaegerExporter } = require(\"@opentelemetry/exporter-jaeger\");\n\nconst tracerProvider = new NodeTracerProvider();\n\n/**\n * The SimpleSpanProcessor does no batching and exports spans\n * immediately when they end. For most production use cases,\n * OpenTelemetry recommends use of the BatchSpanProcessor.\n */\ntracerProvider.addSpanProcessor(\n  new SimpleSpanProcessor(\n    new JaegerExporter({\n      serviceName: 'my-service'\n    })\n  )\n);\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries. The OpenTelemetry API provides\n * methods to set global SDK implementations, but the default SDK provides\n * a convenience method named `register` which registers same defaults\n * for you.\n *\n * By default the NodeTracerProvider uses Trace Context for propagation\n * and AsyncHooksScopeManager for context management. To learn about\n * customizing this behavior, see API Registration Options below.\n */\ntracerProvider.register();\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Registration Options\n\nIf you prefer to choose your own propagator or context manager, you may pass an options object into the `tracerProvider.register()` method. Omitted or `undefined` options will be replaced by a default value and `null` values will be skipped.\n\n```javascript\nconst { B3Propagator } = require(\"@opentelemetry/propagator-b3\");\n\ntracerProvider.register({\n  // Use B3 Propagation\n  propagator: new B3Propagator(),\n\n  // Skip registering a default context manager\n  contextManager: null,\n});\n```\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Trace API Documentation][trace-api-docs]\n- [Propagation API Documentation][propagation-api-docs]\n- [Context API Documentation][context-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\n\n/* Initialize TracerProvider */\napi.trace.setGlobalTracerProvider(tracerProvider);\n/* returns tracerProvider (no-op if a working provider has not been initialized) */\napi.trace.getTracerProvider();\n/* returns a tracer from the registered global tracer provider (no-op if a working provider has not been initialized) */\napi.trace.getTracer(name, version);\n\n/* Initialize Propagator */\napi.propagation.setGlobalPropagator(httpTraceContextPropagator);\n\n/* Initialize Context Manager */\napi.context.setGlobalContextManager(asyncHooksContextManager);\n```\n\n### Library Authors\n\nLibrary authors need only to depend on the `@opentelemetry/api` package and trust that the application owners which use their library will initialize an appropriate SDK.\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\n\nconst tracer = api.trace.getTracer(\"my-library-name\", \"0.2.3\");\n\nasync function doSomething() {\n  const span = tracer.startSpan(\"doSomething\");\n  try {\n    const result = await doSomethingElse();\n    span.end();\n    return result;\n  } catch (err) {\n    span.setStatus({\n      // use an appropriate status code here\n      code: api.SpanStatusCode.ERROR,\n      message: err.message,\n    });\n    span.end();\n    return null;\n  }\n}\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/status.svg?path=packages/opentelemetry-api\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api\n[devDependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/dev-status.svg?path=packages/opentelemetry-api\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"62f8695d3fe5309c62418a1043bc6e8a176bc11f","scripts":{"docs":"typedoc --tsconfig tsconfig.docs.json","lint":"eslint . --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","clean":"tsc --build --clean","watch":"tsc --build --watch","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../","compile":"tsc --build","version":"node ../../scripts/version-update.js","lint:fix":"eslint . --ext .ts --fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","test:browser":"nyc karma start --single-run","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../"},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"lerna/3.22.1/node@v14.15.4+x64 (linux)","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"14.15.4","dependencies":{"@opentelemetry/context-base":"^0.16.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"gts":"3.1.0","nyc":"15.1.0","karma":"5.2.3","mocha":"7.2.0","sinon":"9.2.3","codecov":"3.8.1","typedoc":"0.20.14","webpack":"4.46.0","ts-mocha":"8.0.0","ts-loader":"8.0.14","linkinator":"2.13.1","typescript":"4.1.3","@types/node":"14.14.20","karma-mocha":"2.0.1","@types/mocha":"8.2.0","@types/sinon":"9.0.10","karma-webpack":"4.0.2","@types/webpack-env":"1.16.0","karma-spec-reporter":"0.0.32","karma-chrome-launcher":"3.1.0","istanbul-instrumenter-loader":"3.0.1","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_0.16.1-alpha.20_1613595101280_0.06562596146073907","host":"s3://npm-registry-packages"}},"0.17.0":{"name":"@opentelemetry/api","version":"0.17.0","keywords":["opentelemetry","nodejs","browser","tracing","profiling","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.17.0","maintainers":[{"name":"mayurkale22","email":"mayurkale22@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"obecny","email":"bobecny@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"c90e24acad7c67a26d2b8c86bed5b56785787a98","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.17.0.tgz","fileCount":144,"integrity":"sha512-Rr5NklomjXd7BqfGRs8lD78MvDM+tPeUdHNXilyRIgsUu3gKEKpl3ZgJMiI7gx5r94OqvNc5MukkwKK6xjWYfA==","signatures":[{"sig":"MEQCIDqckXBgAtmCKbAqF9saw2wBcMEGpi5i+gjpU7YJ+unxAiBgVaxPWnn34RGxCQ/EmTpXutSZaLEXelSznbVOhdcghg==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":173173,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgLYeNCRA9TVsSAnZWagAA6ZYP/3iZTTV/NSeuKDv26aOf\nOgo6vIirk82KvPw84wXe95WBP6b0Bz8Y2h8TIEuQR6/40EFaoNTdIhGs2UBK\nErsDEOfNq10XGEzp7EWzPHKEozGluxuD7VmEo5P4loMFLcwqvsIsrMJzeL+0\n5ItIb5hmGkd71+XX7UBjJ3Jn0mK3vU+b1Mpoi06kqdP8HehJqEryunPd9WB/\n7yEsL5jYQZ4FomukOa3IBvj8O6MdjG8sRsG55U1eQCc7mcc2OA26Te1aiY45\nSMSNws/QHQj9GuFOBSqLRuC4+/5IZJ2esrcAmfuWaTzjU2KQWbz0XYv7LCle\nJTSD2OFsn4nNyKSEEcGYasgn+pvXaeYKbDqXNPqFgaoy2g0XUJrUgdlw6cFJ\nJ0ANiyjABpX33hK15PjXveEVZlAYB9DVCtFwYmsH+26wfKbWHWnjLBNqh2kR\nmjxiYjcNwiQj6AdrCJJD9qPoG1qQ27NylbDhp3XuCnwt83P4KB+pXiL4/Vb8\ny2ACTt3N4USc9Te00J7cFnnfnQUOH7wfQniaQHyf0AahlKYd6BXPhJ+Eu57i\n8VaH4bkk1lXSqW32zjPncbpFvNkHuksql5hsy1gSJlblHLxXTrFBcZYHOPrX\nxh0yjju309V+SITWdCJVACueK/7pqFKlhKe/ux79JkcuzMikyU8+aK2GWa+1\nTCAx\r\n=/C8K\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"a91ea7617f288af632934334d0c8ecece318ce73","scripts":{"docs":"typedoc --tsconfig tsconfig.docs.json","lint":"eslint . --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","clean":"tsc --build --clean","watch":"tsc --build --watch","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../","compile":"tsc --build","version":"node ../../scripts/version-update.js","lint:fix":"eslint . --ext .ts --fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","test:browser":"nyc karma start --single-run","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../"},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"lerna/3.22.1/node@v14.8.0+x64 (darwin)","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"14.8.0","dependencies":{"@opentelemetry/context-base":"^0.17.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"gts":"3.1.0","nyc":"15.1.0","karma":"5.2.3","mocha":"7.2.0","sinon":"9.2.3","codecov":"3.8.1","typedoc":"0.20.14","webpack":"4.46.0","ts-mocha":"8.0.0","ts-loader":"8.0.14","linkinator":"2.13.1","typescript":"4.1.3","@types/node":"14.14.20","karma-mocha":"2.0.1","@types/mocha":"8.2.0","@types/sinon":"9.0.10","karma-webpack":"4.0.2","@types/webpack-env":"1.16.0","karma-spec-reporter":"0.0.32","karma-chrome-launcher":"3.1.0","istanbul-instrumenter-loader":"3.0.1","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_0.17.0_1613596556995_0.04943939578351464","host":"s3://npm-registry-packages"}},"0.17.1-alpha.21":{"name":"@opentelemetry/api","version":"0.17.1-alpha.21","keywords":["opentelemetry","nodejs","browser","tracing","profiling","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.17.1-alpha.21","maintainers":[{"name":"mayurkale22","email":"mayurkale22@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"obecny","email":"bobecny@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"9355b48b2ed4fce91c7e00d6abc27ce43f2f78fd","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.17.1-alpha.21.tgz","fileCount":144,"integrity":"sha512-HXgmeF5oaFLwV2bTex6QjFiQtaC4qdS4cUxGDDdd2a2WIw4EpkAP0qwSdpz+dNnsIBMTTnMpQoZSR11FImJ1/Q==","signatures":[{"sig":"MEUCIEl2ZK2wAaEtjiSe3HRo1sG6gEZrP+AuQ5/26UAcVpuNAiEA6y7o+OZFvjSzIGa9euXCU3nepiMmdYY7UrY4JaySV7o=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":173209,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgLYexCRA9TVsSAnZWagAABW8P/0VYYK2J36DvW+ecHVpy\nwrR3WQJiqB6FXR7ngXHL10LvZ+KNR6IwRDVsHJNfGWj/q/NzTEXQZBPr9bbi\nAewmtldzzB3HkJZ0pID+ltoG338FKg0SNzLnahyWRrLLZwFprErNGn6iTngU\n2x6QTctpFydBMc0P65c8Oo/2tTm76QAlEvKpM9m3bTJfaaXeXQFUEPtPCH6o\nCrBJ+B4LsM1gfVLzhc7l/SlbhqGrbJXyb84ocp1CCgBL4IrbBTT+dMXyhz4H\nWgnrRZgLxRx20o5aZ6R6SlNlFzmoNqqVwPRE6gWUEpFBhjWKWSSa2Ngz1gwT\nX7afVtuAezHGSdEIbQcMwbk2iN2iq6x43LOh9Cwb48lUWscGuPTu0AfuN6kK\nxufmde+ujPxsQMZ0xGHhGtRrHje7gA897Nq9nqbXTuLJGiZvxIVzwbhI1Sx0\nU2Tpgf3hKu56NZOgnvCt5q91ONjJ8UIuy1wNxXU+2S+VJ4LU3ZnbJ9cNHTpb\nzbL+q4Zn0Q0KZ/nwb5AdniRXPJRSgIZt50ZKJQU9XOe6jbfDnKtb7v95yNyL\n62dXx+hpklF7zITj4OYkvox8uA2AaMPuBFuI49j3IYeKiG0ewmpm7ym3O1W2\nbkQPHw1gXRDQHNpHYTJsec1BKfkp0s6q8v4qNHLKcFxhR8/xwDLZVdbY2mQ4\n9g46\r\n=OxXK\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","readme":"# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n[![Apache License][license-image]][license-image]\n\nThis package provides everything needed to interact with the OpenTelemetry API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\n## Quick Start\n\nTo get started you need to install the SDK and plugins, create a TracerProvider, and register it with the API.\n\n### Install Dependencies\n\n```sh\n$ # Install tracing dependencies\n$ npm install \\\n    @opentelemetry/api \\\n    @opentelemetry/core \\\n    @opentelemetry/node \\\n    @opentelemetry/tracing \\\n    @opentelemetry/exporter-jaeger \\ # add exporters as needed\n    @opentelemetry/plugin-http # add plugins as needed\n```\n\n> Note: this example is for node.js. See [examples/tracer-web](https://github.com/open-telemetry/opentelemetry-js/tree/main/examples/tracer-web) for a browser example.\n\n### Initialize the SDK\n\nBefore any other module in your application is loaded, you must initialize the global tracer and meter providers. If you fail to initialize a provider, no-op implementations will be provided to any library which acquires them from the API.\n\nTo collect traces and metrics, you will have to tell the SDK where to export telemetry data to. This example uses Jaeger and Prometheus, but exporters exist for [other tracing backends][other-tracing-backends]. If you're not sure if there is an exporter for your tracing backend, contact your tracing provider.\n\n#### Tracing\n\n```javascript\nconst { NodeTracerProvider } = require(\"@opentelemetry/node\");\nconst { SimpleSpanProcessor } = require(\"@opentelemetry/tracing\");\nconst { JaegerExporter } = require(\"@opentelemetry/exporter-jaeger\");\n\nconst tracerProvider = new NodeTracerProvider();\n\n/**\n * The SimpleSpanProcessor does no batching and exports spans\n * immediately when they end. For most production use cases,\n * OpenTelemetry recommends use of the BatchSpanProcessor.\n */\ntracerProvider.addSpanProcessor(\n  new SimpleSpanProcessor(\n    new JaegerExporter({\n      serviceName: 'my-service'\n    })\n  )\n);\n\n/**\n * Registering the provider with the API allows it to be discovered\n * and used by instrumentation libraries. The OpenTelemetry API provides\n * methods to set global SDK implementations, but the default SDK provides\n * a convenience method named `register` which registers same defaults\n * for you.\n *\n * By default the NodeTracerProvider uses Trace Context for propagation\n * and AsyncHooksScopeManager for context management. To learn about\n * customizing this behavior, see API Registration Options below.\n */\ntracerProvider.register();\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Advanced Use\n\n### API Registration Options\n\nIf you prefer to choose your own propagator or context manager, you may pass an options object into the `tracerProvider.register()` method. Omitted or `undefined` options will be replaced by a default value and `null` values will be skipped.\n\n```javascript\nconst { B3Propagator } = require(\"@opentelemetry/propagator-b3\");\n\ntracerProvider.register({\n  // Use B3 Propagation\n  propagator: new B3Propagator(),\n\n  // Skip registering a default context manager\n  contextManager: null,\n});\n```\n\n### API Methods\n\nIf you are writing an instrumentation library, or prefer to call the API methods directly rather than using the `register` method on the Tracer/Meter Provider, OpenTelemetry provides direct access to the underlying API methods through the `@opentelemetry/api` package. API entry points are defined as global singleton objects `trace`, `metrics`, `propagation`, and `context` which contain methods used to initialize SDK implementations and acquire resources from the API.\n\n- [Trace API Documentation][trace-api-docs]\n- [Propagation API Documentation][propagation-api-docs]\n- [Context API Documentation][context-api-docs]\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\n\n/* Initialize TracerProvider */\napi.trace.setGlobalTracerProvider(tracerProvider);\n/* returns tracerProvider (no-op if a working provider has not been initialized) */\napi.trace.getTracerProvider();\n/* returns a tracer from the registered global tracer provider (no-op if a working provider has not been initialized) */\napi.trace.getTracer(name, version);\n\n/* Initialize Propagator */\napi.propagation.setGlobalPropagator(httpTraceContextPropagator);\n\n/* Initialize Context Manager */\napi.context.setGlobalContextManager(asyncHooksContextManager);\n```\n\n### Library Authors\n\nLibrary authors need only to depend on the `@opentelemetry/api` package and trust that the application owners which use their library will initialize an appropriate SDK.\n\n```javascript\nconst api = require(\"@opentelemetry/api\");\n\nconst tracer = api.trace.getTracer(\"my-library-name\", \"0.2.3\");\n\nasync function doSomething() {\n  const span = tracer.startSpan(\"doSomething\");\n  try {\n    const result = await doSomethingElse();\n    span.end();\n    return result;\n  } catch (err) {\n    span.setStatus({\n      // use an appropriate status code here\n      code: api.SpanStatusCode.ERROR,\n      message: err.message,\n    });\n    span.end();\n    return null;\n  }\n}\n```\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/status.svg?path=packages/opentelemetry-api\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api\n[devDependencies-image]: https://david-dm.org/open-telemetry/opentelemetry-js/dev-status.svg?path=packages/opentelemetry-api\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js?path=packages%2Fopentelemetry-api&type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi.svg\n\n[trace-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/traceapi.html\n[metrics-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/metricsapi.html\n[propagation-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/propagationapi.html\n[context-api-docs]: https://open-telemetry.github.io/opentelemetry-js/classes/contextapi.html\n\n[web]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-web\n[tracing]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-tracing\n[node]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-node\n[metrics]: https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-metrics\n\n[other-tracing-backends]: https://github.com/open-telemetry/opentelemetry-js#trace-exporters\n","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"a91ea7617f288af632934334d0c8ecece318ce73","scripts":{"docs":"typedoc --tsconfig tsconfig.docs.json","lint":"eslint . --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","clean":"tsc --build --clean","watch":"tsc --build --watch","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../","compile":"tsc --build","version":"node ../../scripts/version-update.js","lint:fix":"eslint . --ext .ts --fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","test:browser":"nyc karma start --single-run","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../../"},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"lerna/3.22.1/node@v14.15.4+x64 (linux)","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"14.15.4","dependencies":{"@opentelemetry/context-base":"^0.17.1-alpha.21+a91ea761"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"gts":"3.1.0","nyc":"15.1.0","karma":"5.2.3","mocha":"7.2.0","sinon":"9.2.3","codecov":"3.8.1","typedoc":"0.20.14","webpack":"4.46.0","ts-mocha":"8.0.0","ts-loader":"8.0.14","linkinator":"2.13.1","typescript":"4.1.3","@types/node":"14.14.20","karma-mocha":"2.0.1","@types/mocha":"8.2.0","@types/sinon":"9.0.10","karma-webpack":"4.0.2","@types/webpack-env":"1.16.0","karma-spec-reporter":"0.0.32","karma-chrome-launcher":"3.1.0","istanbul-instrumenter-loader":"3.0.1","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_0.17.1-alpha.21_1613596592759_0.8115436125437374","host":"s3://npm-registry-packages"}},"0.18.0":{"name":"@opentelemetry/api","version":"0.18.0","keywords":["opentelemetry","nodejs","browser","tracing","profiling","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.18.0","maintainers":[{"name":"mayurkale22","email":"mayurkale22@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"obecny","email":"bobecny@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js-api#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js-api/issues"},"dist":{"shasum":"4641879f16de9784bb00023ab0de5ca219ced765","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.18.0.tgz","fileCount":160,"integrity":"sha512-KczG0mtyH2UQLeFDYC+atGXfS/MfttynmHblJUsOnIgfI0Ohn0nJOgNjKwJlHk6/9Q61CBTxzSs/268TDaopVw==","signatures":[{"sig":"MEUCIQCBHh2QpSU72QU6Dc/OnP3LaS9jpNTOtMF5lUMC6jQmNAIgF5m8Qwkpso/nvIii7FUmp/SNV1JhAeJ8FnXB4yBV3fw=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":184161,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgOWCgCRA9TVsSAnZWagAA5K8P/RZfTjZFUJnuQ0Uhu8w9\nCj+LteElcQosrqEHCNktqIvKhKbeKZks9UKyBHbov0WmCZOpuSO3N5fie1Iy\nR5afP1g0wFBUIszyV8IFc7PXgd/ebm23NKJAY96i3XTTiY0ksmxzymeZBg33\nTUDrhqaV0RRhBtdHF55ZE9nBfqgIv8NGNJJvTk4dUX5h1ztm+woSXLqeD7Q3\n4IvZwwqXhf1HF4d+VpdTWxnoIZXAC3BGD+OjL+3+0WkPWwBKcyk6GUVPEBb7\nWxmGKI8iqeR6Bo5gAjjljpU1sgOjWF+AYmUPXRzN7iLwH87jHY8gIJV9InKM\naWjulwyokUn9PZxaLLC+U7mMXhuStesUuSt33vCdOAJ0BSpfYDkUYb3ibKcI\nzCx4Z65AD0xgP9+bLAblF7PTP4cZ+wwEzLK67lUWD5o+X6WvARuFWV/M3iEG\ngzkdhu+WKzw1/ZJjzJUCKcv2mS6ed08fvDmqTMx6eG0NQ4Zsxx6RmpQjwzqd\nOhQZjXvu3hQq+DhIOzAgj105/n6NyCeIQRTThvUb8H840hHgTVKFdFKcszPF\n3zaw4crvJ7bw+vAhDCTDn/w3IhwNtG8phRdNkX1pJA0rxeKU9hVisOrxZEQz\nL7JCqcveQMxI4L5lh7XNNQx+vObjSYpCMtBNwnP0Zp03f0pgp5gN12u8ioz3\nGaai\r\n=PK0u\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"493daa12235a3e2d4d6d263104b2bde4b59282b1","scripts":{"docs":"typedoc","lint":"eslint src test --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","clean":"tsc --build --clean","watch":"tsc --build --watch","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p .","compile":"tsc --build","version":"node scripts/version-update.js","lint:fix":"eslint src test --ext .ts --fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","test:browser":"nyc karma start --single-run","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ."},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js-api.git","type":"git"},"_npmVersion":"6.14.11","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"14.8.0","publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"gts":"3.1.0","nyc":"15.1.0","karma":"5.2.3","mocha":"7.2.0","sinon":"9.2.4","eslint":"7.20.0","codecov":"3.8.1","typedoc":"0.20.25","webpack":"4.46.0","gh-pages":"3.1.0","ts-mocha":"8.0.0","ts-loader":"8.0.17","linkinator":"2.13.5","typescript":"4.1.5","@types/node":"14.14.28","karma-mocha":"2.0.1","@types/mocha":"8.2.1","@types/sinon":"9.0.10","karma-webpack":"4.0.2","lerna-changelog":"^1.0.1","@types/webpack-env":"1.16.0","karma-spec-reporter":"0.0.32","eslint-plugin-header":"3.1.1","eslint-plugin-import":"2.22.1","karma-chrome-launcher":"3.1.0","@typescript-eslint/parser":"4.15.1","istanbul-instrumenter-loader":"3.0.1","@typescript-eslint/eslint-plugin":"4.15.1","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_0.18.0_1614373023795_0.9158498902086578","host":"s3://npm-registry-packages"}},"0.18.1":{"name":"@opentelemetry/api","version":"0.18.1","keywords":["opentelemetry","nodejs","browser","tracing","profiling","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.18.1","maintainers":[{"name":"mayurkale22","email":"mayurkale22@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"obecny","email":"bobecny@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js-api#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js-api/issues"},"dist":{"shasum":"fb499e07afa1f55acffc47b2469eb218dcdee2a2","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.18.1.tgz","fileCount":160,"integrity":"sha512-pKNxHe3AJ5T2N5G3AlT9gx6FyF5K2FS9ZNc+FipC+f1CpVF/EY+JHTJ749dnM2kWIgZTbDJFiGMuc0FYjNSCOg==","signatures":[{"sig":"MEUCIF7N7P76pgDCWPlKWDkinBzu2tK8lW2uE/nOnUmQWVHuAiEAxP/+PutxJjZBZbvigPZb0dnZV/5QOMLHEce787TUbw0=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":186205,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgQpYpCRA9TVsSAnZWagAAMfIP/089kpQA0nqG1bDWe4bc\n6TmZBDHXXHD2rdoYP8Qz9zCrgIR8y0ovf2cMykBIhp6MSYCwwih4/gakodQs\n3zBXcH8x4f7AymFTIfQ5UYy+Rjmj7o6LtKPI8ggXOhbwVMBFFTKWBFRnMCmA\nc6u3s6Oo0TIMVANzrspCufPZ+uiJZdYeO5YEkRl4WzWJ9s61OVmukDdVIzm6\nRd0V9vdq99nZKDdo7xDkiu4LTwN/LVBmkQwNzR/dysOENnKbnYuz+bgaTvr7\nvFY8E+EePBBRBSS3zhB4MzMr5fzfW/KTuAWk+4fTJl/vmO3RtJlBav7yrBK0\nKWdCRfXpr9TjeYGwsBZmvlk+qw8Lr9BcytCKBiQIdi/wSurAHVv3zm4MBb6N\nnuHaIr2nzMPyby9m8w5SVjkR3n6FQ6iUNLFthBRpAujUWtnFNShv67CX0x0z\nK1lzMFFERiFJZMfM48zS5KouAUkPPcD6Lv0IVfMlTaCRkSH/7vhQKrtHgHRa\nWoWohAczo7k7gCDphvVsY2yIyp4Z5nlBCa5HHb8FWZfjDm+u+bpraA4SuRPl\nyvtb5Hq3bZFngaeytB5Ckr9O2JYT5YNfW9NA3q9+/ZFtYJayGu+1AcoNy7Tw\nPJ+QAXOD/pU2Ax/jz6vuNV4+KPN8fuqJiMjI7WzgVYOl72FQGgcabpsc/rRM\nsYSS\r\n=cnRG\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"0c5a41e13b0979bf9e76d3a2ab83e339faab4808","scripts":{"docs":"typedoc","lint":"eslint src test --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","clean":"tsc --build --clean","watch":"tsc --build --watch","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p .","compile":"tsc --build","version":"node scripts/version-update.js","lint:fix":"eslint src test --ext .ts --fix","docs-test":"linkinator docs/out --silent --skip david-dm.org","test:browser":"nyc karma start --single-run","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ."},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js-api.git","type":"git"},"_npmVersion":"6.14.11","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"14.8.0","publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"gts":"3.1.0","nyc":"15.1.0","karma":"5.2.3","mocha":"7.2.0","sinon":"9.2.4","eslint":"7.20.0","codecov":"3.8.1","typedoc":"0.20.25","webpack":"4.46.0","gh-pages":"3.1.0","ts-mocha":"8.0.0","ts-loader":"8.0.17","linkinator":"2.13.5","typescript":"4.1.5","@types/node":"14.14.28","karma-mocha":"2.0.1","@types/mocha":"8.2.1","@types/sinon":"9.0.10","karma-webpack":"4.0.2","lerna-changelog":"^1.0.1","@types/webpack-env":"1.16.0","karma-spec-reporter":"0.0.32","eslint-plugin-header":"3.1.1","eslint-plugin-import":"2.22.1","karma-chrome-launcher":"3.1.0","@typescript-eslint/parser":"4.15.1","istanbul-instrumenter-loader":"3.0.1","@typescript-eslint/eslint-plugin":"4.15.1","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_0.18.1_1614976552566_0.41474010906993297","host":"s3://npm-registry-packages"}},"1.0.0-rc.0":{"name":"@opentelemetry/api","version":"1.0.0-rc.0","keywords":["opentelemetry","nodejs","browser","tracing","profiling","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@1.0.0-rc.0","maintainers":[{"name":"mayurkale22","email":"mayurkale22@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"obecny","email":"bobecny@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js-api#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js-api/issues"},"dist":{"shasum":"0c7c3f5e1285f99cedb563d74ad1adb9822b5144","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-1.0.0-rc.0.tgz","fileCount":160,"integrity":"sha512-iXKByCMfrlO5S6Oh97BuM56tM2cIBB0XsL/vWF/AtJrJEKx4MC/Xdu0xDsGXMGcNWpqF7ujMsjjnp0+UHBwnDQ==","signatures":[{"sig":"MEUCIAriqSwPzWmU6+ET9hzHgiimIPX0Pn7Uk8Un1S3S/oYxAiEAzG8Q4hLyOJqsh4bpM23IE3HRD7D/NAS1k0qKFFXhbKs=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":183887,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgS6E6CRA9TVsSAnZWagAAxqIP+wV+iKm3K4US7a27D5+o\n3YdqJRElgdCYq3pW5JoGP4ZTCYNs4o8hUaJ2P2AZQnwHNJjlUb6DBkEJaXqQ\nOT0bXY8RU9O4rzZX3l93mguxu9U7z/jTW/J06CpjHbAYlQ1HJ6++rYT+kj78\nM2ZYr+5nUPxKmn9Y7SBhr4MkObUx0GT0CmBtZ80/zddVi3WZYsAr3cl4V3ac\n0qzRhSHC+kbguXOVvLGLdU87uneEfL9p2OOiJ1AIfSmY3F8JUDX+kl98UXlQ\n6tJYZ3rXnXBOXci7YyLa2VjjRJSDc8q5vYf5sYTOTSDMsYfkg4mYBPNFb7GG\nKgsIbH04xTWWB3dJVH+eyzXlV1h4awRERu8G586b6A75x6cXRsLUeRaHf4O3\nMEOW5Wc+TcukUyci532D8La5JeQ5ZvZ5e3RGjjKmpqRMT9IpjHdaSqLIX5qE\na6af8gGD46jS+G19Ml+tzlkw9hivk74ye9daBEQiiGYuZLJLKzz5EXQEXnT+\nO6bsHkiL/leBVPm4iLhMHy8bAARFFl2reYLMmvutK/cCSqWYb5u8K4a67Mwf\nC5/w5T7SzQGNTb6IhGyVNLYs2Hs+qm/F4ZJj8iLT3BElezGShfP/4dxHCxir\nZv4i17e2evKWoXsRLvFyuvkEfmdhCiLGYUgakV6xEVwjObWCi9CofpH9hCnD\noqRK\r\n=IzTM\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"504041a8aa8442987a95f675af0a402084678682","scripts":{"docs":"typedoc","lint":"eslint src test --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","clean":"tsc --build --clean","watch":"tsc --build --watch","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p .","compile":"tsc --build","version":"node scripts/version-update.js","lint:fix":"eslint src test --ext .ts --fix","docs:test":"linkinator docs/out --silent --skip david-dm.org","docs:deploy":"gh-pages --dist docs/out","test:browser":"nyc karma start --single-run","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ."},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js-api.git","type":"git"},"_npmVersion":"6.14.11","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"14.8.0","publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"gts":"3.1.0","nyc":"15.1.0","karma":"5.2.3","mocha":"7.2.0","sinon":"9.2.4","eslint":"7.20.0","codecov":"3.8.1","typedoc":"0.20.25","webpack":"4.46.0","gh-pages":"3.1.0","ts-mocha":"8.0.0","ts-loader":"8.0.17","linkinator":"2.13.5","typescript":"4.1.5","@types/node":"14.14.28","karma-mocha":"2.0.1","@types/mocha":"8.2.1","@types/sinon":"9.0.10","karma-webpack":"4.0.2","lerna-changelog":"^1.0.1","@types/webpack-env":"1.16.0","karma-spec-reporter":"0.0.32","eslint-plugin-header":"3.1.1","eslint-plugin-import":"2.22.1","karma-chrome-launcher":"3.1.0","@typescript-eslint/parser":"4.15.1","istanbul-instrumenter-loader":"3.0.1","@typescript-eslint/eslint-plugin":"4.15.1","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_1.0.0-rc.0_1615569209615_0.9333898318169607","host":"s3://npm-registry-packages"}},"1.0.0-rc.1":{"name":"@opentelemetry/api","version":"1.0.0-rc.1","keywords":["opentelemetry","nodejs","browser","tracing","profiling","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@1.0.0-rc.1","maintainers":[{"name":"mayurkale22","email":"mayurkale22@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"obecny","email":"bobecny@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js-api#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js-api/issues"},"dist":{"shasum":"ad68cf20e361523d9a6fcd3589add8695ea10343","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-1.0.0-rc.1.tgz","fileCount":310,"integrity":"sha512-bCPRNOSgqmeDY36Q4J5ylbBtvHfQ0vzPmRaQ1JQ04MwTJclE8/By5jgDtMe9Kh4tMxDUKHIDAzJi2Bo7uxlSnw==","signatures":[{"sig":"MEQCIH/ThtfwBP/2dv6whobqi46Klxcmwi2YeS+c7JCnsBSkAiAbnTCP9KrWb9Oa7y9WrVuwOcGmvCVVmeXrDbExZqF/JQ==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":358580,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgpA/TCRA9TVsSAnZWagAAfxwP/1F5o/ZpNi+Ws4wTvJXj\ntMUKE7PJ9X+KVD5VXoO1ai0iLkKpMvKSQvJ5Wwol+t7QbP+1Q7J+52MMiYZh\nZL65wmP3ywJquWEYkToHDx3VaAoeistXOiyr24SEQ34O6PQFkD5YC7pXF8if\niO4T9HnVkdJ5Gd5X2Tl4QRCpkhlnxG5TdSE0SCLn8fOnPaoF0EGMVf+qkgp2\nvRw/ZfwDkmkGCy1EDRAGJs5QhEnckY341wiO9+5HxdR46RP9xuYr3mabTZ5w\ncm50tczroEfctwegJQjMgystXcyubPn9djjy44OQpqqAJ6Oj1a2dMBP2H1kc\nqqpDn5dvU1Eu3cMxf1jODjGkbCsFJY6po6I6ti7335vhPocoZq9yf6BE99YG\n+lbMwZ9Hr36co27h/sS2u0YvhLD29HpG8vIuLj1a5g4+ezn6o0Tg6UCLQRnJ\n4Dha00bvGs5CAZzIIMf3otITNcDvyxVBxOGg7m3KPS1M8nugr8VSby6HAI8P\n0R0OR8bPVP7QL+n0JdYawqJjOdOvfGGbrnTim08/pwf9R8gObauBuLyboVmn\nVkHN8AZH2RxhX4IihtDA8x6T/rAYxljqDwGGZA49Ec5F6Y10WN5Ya4IQe23P\nMmFyyqEMN3nPotok9/QMKvQ5ueGxNeU+gqnGrITVKM3+O9+U2VCUBTwhTWy+\na+z3\r\n=OAv8\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","module":"build/esm/index.js","readme":"\n---\n<p align=\"center\">\n  <strong>\n    <a href=\"https://open-telemetry.github.io/opentelemetry-js\">API Documentation<a/>\n    &nbsp;&nbsp;&bull;&nbsp;&nbsp;\n    <a href=\"https://github.com/open-telemetry/opentelemetry-js/discussions\">Getting In Touch (GitHub Discussions)<a/>\n  </strong>\n</p>\n\n<p align=\"center\">\n  <a href=\"https://github.com/open-telemetry/opentelemetry-js-api/releases\">\n    <img alt=\"GitHub release (latest by date including pre-releases)\" src=\"https://img.shields.io/github/v/release/open-telemetry/opentelemetry-js-api?include_prereleases&style=for-the-badge\">\n  </a>\n  <a href=\"https://codecov.io/gh/open-telemetry/opentelemetry-js-api/branch/main/\">\n    <img alt=\"Codecov Status\" src=\"https://img.shields.io/codecov/c/github/open-telemetry/opentelemetry-js-api?style=for-the-badge\">\n  </a>\n  <a href=\"https://github.com/open-telemetry/opentelemetry-js-api/blob/main/LICENSE\">\n    <img alt=\"license\" src=\"https://img.shields.io/badge/license-Apache_2.0-green.svg?style=for-the-badge\">\n  </a>\n  <br/>\n  <a href=\"https://github.com/open-telemetry/opentelemetry-js-api/actions/workflows/docs.yaml\">\n    <img alt=\"Build Status\" src=\"https://github.com/open-telemetry/opentelemetry-js-api/actions/workflows/test.yaml/badge.svg?branch=main\">\n  </a>\n  <a href=\"https://github.com/open-telemetry/opentelemetry-js-api/actions/workflows/test.yaml?query=branch%3Amain\">\n    <img alt=\"Build Status\" src=\"https://github.com/open-telemetry/opentelemetry-js-api/actions/workflows/docs.yaml/badge.svg\">\n  </a>\n</p>\n\n---\n\n# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n\nThis package provides everything needed to interact with the OpenTelemetry API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\nThe methods in this package perform no operations by default. This means they can be safely called by a library or end-user application whether there is an SDK registered or not. In order to generate and export telemetry data, you will also need an SDK such as the [OpenTelemetry JS SDK][opentelemetry-js].\n\n## Tracing Quick Start\n\n### You Will Need\n\n- An application you wish to instrument\n- [OpenTelemetry JS SDK][opentelemetry-js]\n- Node.js >=8.5.0 (14+ is preferred) or an ECMAScript 5+ compatible browser\n\n**Note:** ECMAScript 5+ compatibility is for this package only. Please refer to the documentation for the SDK you are using to determine its minimum ECMAScript version.\n\n**Note for library authors:** Only your end users will need an OpenTelemetry SDK. If you wish to support OpenTelemetry in your library, you only need to use the OpenTelemetry API. For more information, please read the [tracing documentation][docs-tracing].\n\n### Install Dependencies\n\n```sh\nnpm install @opentelemetry/api @opentelemetry/tracing\n```\n\n### Trace Your Application\n\nIn order to get started with tracing, you will need to first register an SDK. The SDK you are using may provide a convenience method which calls the registration methods for you, but if you would like to call them directly they are documented here: [sdk registration methods][docs-sdk-registration].\n\nOnce you have registered an SDK, you can start and end spans. A simple example of basic SDK registration and tracing a simple operation is below. The example should export spans to the console once per second. For more information, see the [tracing documentation][docs-tracing].\n\n```javascript\nconst { trace }  = require(\"@opentelemetry/api\");\nconst { BasicTracerProvider, ConsoleSpanExporter, SimpleSpanProcessor }  = require(\"@opentelemetry/tracing\");\n\n// Create and register an SDK\nconst provider = new BasicTracerProvider();\nprovider.addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporter()));\ntrace.setGlobalTracerProvider(provider);\n\n// Acquire a tracer from the global tracer provider which will be used to trace the application\nconst name = 'my-application-name';\nconst version = '0.1.0';\nconst tracer = trace.getTracer(name, version);\n\n// Trace your application by creating spans\nasync function operation() {\n  const span = tracer.startSpan(\"do operation\");\n\n  // mock some work by sleeping 1 second\n  await new Promise((resolve, reject) => {\n    setTimeout(resolve, 1000);\n  })\n\n  span.end();\n  return output;\n}\n\nasync function main() {\n  while (true) {\n    await operation();\n  }\n}\n\nmain();\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Upgrade Guidelines\n\n### 1.0.0-rc.1 to x\n\n### 1.0.0-rc.0 to 1.0.0-rc.1\n\n- Removing `TimedEvent` which was not part of spec\n- `HttpBaggage` renamed to `HttpBaggagePropagator`\n- [#45](https://github.com/open-telemetry/opentelemetry-js-api/pull/45) `Span#context` renamed to `Span#spanContext`\n- [#47](https://github.com/open-telemetry/opentelemetry-js-api/pull/47) `getSpan`/`setSpan`/`getSpanContext`/`setSpanContext` moved to `trace` namespace\n- [#55](https://github.com/open-telemetry/opentelemetry-js-api/pull/55) `getBaggage`/`setBaggage`/`createBaggage` moved to `propagation` namespace\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[opentelemetry-js]: https://github.com/open-telemetry/opentelemetry-js\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js-api/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js-api.svg\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js-api\n[devDependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js-api.svg?type=dev\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js-api?type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi.svg\n[docs-tracing]: https://github.com/open-telemetry/opentelemetry-js-api/blob/main/docs/tracing.md\n[docs-sdk-registration]: https://github.com/open-telemetry/opentelemetry-js-api/blob/main/docs/sdk-registration.md\n","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/esm/platform/index.js":"./build/esm/platform/browser/index.js","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"da597304cb6b0b944514efd3df6b93c9e5043d7e","scripts":{"docs":"typedoc","lint":"eslint src test --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","clean":"tsc --build --clean tsconfig.json tsconfig.esm.json","watch":"tsc --build --watch","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p .","compile":"tsc --build tsconfig.json tsconfig.esm.json","version":"node scripts/version-update.js","lint:fix":"eslint src test --ext .ts --fix","docs:test":"linkinator docs/out --silent --skip david-dm.org","docs:deploy":"gh-pages --dist docs/out","test:browser":"nyc karma start --single-run","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ."},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"deprecated":"Contained changes incompatible with 1.0.0-rc.0. Please update to 1.0.0-rc.2 to revert. New versions will be released as 0.x.y","repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js-api.git","type":"git"},"_npmVersion":"6.14.11","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"14.8.0","publishConfig":{"access":"public"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"gts":"3.1.0","nyc":"15.1.0","karma":"5.2.3","mocha":"7.2.0","sinon":"10.0.0","eslint":"7.25.0","codecov":"3.8.1","typedoc":"0.20.36","webpack":"4.46.0","gh-pages":"3.1.0","ts-mocha":"8.0.0","ts-loader":"8.2.0","linkinator":"2.13.6","typescript":"4.2.4","@types/node":"14.14.42","karma-mocha":"2.0.1","@types/mocha":"8.2.2","@types/sinon":"10.0.0","karma-webpack":"4.0.2","lerna-changelog":"1.0.1","@types/webpack-env":"1.16.0","karma-spec-reporter":"0.0.32","eslint-plugin-header":"3.1.1","eslint-plugin-import":"2.22.1","karma-chrome-launcher":"3.1.0","@typescript-eslint/parser":"4.22.0","istanbul-instrumenter-loader":"3.0.1","@typescript-eslint/eslint-plugin":"4.22.0","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_1.0.0-rc.1_1621364691162_0.9387718191369825","host":"s3://npm-registry-packages"}},"1.0.0-rc.2":{"name":"@opentelemetry/api","version":"1.0.0-rc.2","keywords":["opentelemetry","nodejs","browser","tracing","profiling","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@1.0.0-rc.2","maintainers":[{"name":"mayurkale22","email":"mayurkale22@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"obecny","email":"bobecny@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js-api#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js-api/issues"},"dist":{"shasum":"f63c845621f1e7a68ce024842e0bb6b63d982473","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-1.0.0-rc.2.tgz","fileCount":4,"integrity":"sha512-xXKfllRoe2qFsJVVm4XgmhUNbRE9OWkmHaznGLRLOcMEPSMP6UfF6l+pU0HpxpHSwAlZJXNo2ebswDqHxqELNA==","signatures":[{"sig":"MEQCIELo4EfNVLRIfWt8KjNdxBu1FLxr21oYB+nmbLmIHvOlAiAv1RC2Iv9+IOdze7hv8NL0dPovs+9SegW+87P1lJgxvw==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":21244,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgpQHtCRA9TVsSAnZWagAATDoQAJkaKoK9OxA+EDL+R9zR\nfKwIfbujS1NKUqdqOPLaAhdK14ylN6IkVxBIO/pS3v5lQdenovJznfg0a3Sc\nzWq36vb8lOHSnW93daSmkbwcEI0cJ1utQPvKB16FS1Ckd1IVsA36I4eUbTeB\n6JYtpv52E4nYx62tHl0vVrsbnTdmXiJzpxKCs+ROayq3x69WYwn3Gb0czvT5\nNZ7bHjOIzWpWe+TXL1FaLL5Jc9XoH4AQMGK2isdepWU7PBhlYDHB/iD6JcCd\n3oiiXo4nyusoSsOAq8f85DQYxMR/kvpALxrF4Im5Wh8bJ8YqDNVjfCZt/1i9\nH0e1ClSi4TAbuQcZj+dtxZr5uSIdVzvoKAJ3c7yirKhptiIoLuvIc7TG/oon\nlK5latDvVIiaXvLSag+L6Bx8GtzN5qMKEUEdP/41T1mKlWXCUFhHsTKsx6WZ\n6i3mzMS4V4GYhVeC/Pux6myv9tHcjpWN5qC0j+cinnAK1Ssfd25vvn+QtS5c\nXVlRUvOx/xvZSHwim58MfoC2fI8fneI9Teb8pqRbvhhKGRzV2Zmq6V0a6ISG\neLal4cOvIU6rNgAPtJV8VBe4ga/kPlErKjpvBs7kcl4abA/Y3nBZQZmpedNo\n+en41L5FtIsOO7wz61tDkTTcLW/9PpTMojThQFj9FFPgmmty+v3AMJZxuR0J\nenoZ\r\n=HIpa\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"ea37cfecdbff6598558a3545cccec8e13dd25a91","scripts":{"docs":"typedoc","lint":"eslint src test --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","clean":"tsc --build --clean","watch":"tsc --build --watch","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p .","compile":"tsc --build","version":"node scripts/version-update.js","lint:fix":"eslint src test --ext .ts --fix","docs:test":"linkinator docs/out --silent --skip david-dm.org","docs:deploy":"gh-pages --dist docs/out","test:browser":"nyc karma start --single-run","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ."},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"deprecated":"Missing files in the distribution package. Please update to 1.0.0-rc.3.","repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js-api.git","type":"git"},"_npmVersion":"6.14.11","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"14.8.0","publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"gts":"3.1.0","nyc":"15.1.0","karma":"5.2.3","mocha":"7.2.0","sinon":"9.2.4","eslint":"7.20.0","codecov":"3.8.1","typedoc":"0.20.25","webpack":"4.46.0","gh-pages":"3.1.0","ts-mocha":"8.0.0","ts-loader":"8.0.17","linkinator":"2.13.5","typescript":"4.1.5","@types/node":"14.14.28","karma-mocha":"2.0.1","@types/mocha":"8.2.1","@types/sinon":"9.0.10","karma-webpack":"4.0.2","lerna-changelog":"^1.0.1","@types/webpack-env":"1.16.0","karma-spec-reporter":"0.0.32","eslint-plugin-header":"3.1.1","eslint-plugin-import":"2.22.1","karma-chrome-launcher":"3.1.0","@typescript-eslint/parser":"4.15.1","istanbul-instrumenter-loader":"3.0.1","@typescript-eslint/eslint-plugin":"4.15.1","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_1.0.0-rc.2_1621426669490_0.652050118574828","host":"s3://npm-registry-packages"}},"1.0.0-rc.3":{"name":"@opentelemetry/api","version":"1.0.0-rc.3","keywords":["opentelemetry","nodejs","browser","tracing","profiling","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@1.0.0-rc.3","maintainers":[{"name":"mayurkale22","email":"mayurkale22@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"obecny","email":"bobecny@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js-api#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js-api/issues"},"dist":{"shasum":"903ef6dddf04410d09072d43a060b87ccc162545","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-1.0.0-rc.3.tgz","fileCount":160,"integrity":"sha512-3PlJD9uN5iZrKmX054vOifGxZ/iH24+UFD5eW8Vyz08GUU7SdW8PNu4VSpTixWeuWo+Q6TELfSv7vVu43t+tbA==","signatures":[{"sig":"MEUCIQCW4A/yySfXGE/gob7foWtZun0q+VJ176u0tjhYw8c4CwIgczmGeZE3c0U5ANhPO6tr1z2lFXb9QFfsoke1F6bdV7Q=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":183887,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgpRUICRA9TVsSAnZWagAA2gkP/3leRMPBuXGxeoIoB3YW\n87wskQYq+pXq0IKa33BD8aHU0sQkaVSeRdcDJfLEgOh+FsbrioR9+vE32m+E\nsyGAuH7Mz+th7MK3IvraqPD+U270GXsL70ptLKe8GAHMq6/16fyeer7SFOmQ\n8zIgmqT7TkQn89jXvXZDzcPs0o8GZ0ufyJ8mhXkW1FlOFcxal7hFMWweW8QY\nX5f7r4VtoXBgq1c6iy5s+JF6ItDAVgeo8qKV7lv58cvJfQdTralZKhec97wQ\nNos6JeQKwd8Sz+MvkZ4O1LgESqAInPOi9EW7xqL9d7AwFm3pgKYEIUyN+Ayy\nKn4LwU1/oYhsDk0VI2vY18s7vm+RjidhGLiriSvVCUnsX17f80M2iKujyml9\nY7oJqGl46LBkWZDiabX9y3/6pp4zgftkXybNu1oM+fhNKmnkWlS7hdEVzdwe\n6TDy1O/erdDwwakoqPHLLO8tYqdzXrjIUAR55BMEaC8wHVreNvKWHPN2yK+t\nDJ3bSLpollxgJ2V41lzFI6PATWLZxFB/POKDCZ0ylKi8s980D9WVQOHwr8Z4\nieChUxVM1DeNb8TX3g1oP0lxxZZeigqrFJTPq9pJQN4u+ZOw1qo4e1u1W25A\ngIldY7cviKLo5l9rjWNG95PF0hZxu0q8zAhdssihv0ERA/HH9iq1rbPr0dgl\nj4or\r\n=mvVX\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"791e9f7f9e9ee339c5cd57a2245891f85e8e5147","scripts":{"docs":"typedoc","lint":"eslint src test --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","clean":"tsc --build --clean","watch":"tsc --build --watch","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p .","compile":"tsc --build","version":"node scripts/version-update.js","lint:fix":"eslint src test --ext .ts --fix","docs:test":"linkinator docs/out --silent --skip david-dm.org","docs:deploy":"gh-pages --dist docs/out","test:browser":"nyc karma start --single-run","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ."},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js-api.git","type":"git"},"_npmVersion":"6.14.11","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"14.8.0","publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"gts":"3.1.0","nyc":"15.1.0","karma":"5.2.3","mocha":"7.2.0","sinon":"9.2.4","eslint":"7.20.0","codecov":"3.8.1","typedoc":"0.20.25","webpack":"4.46.0","gh-pages":"3.1.0","ts-mocha":"8.0.0","ts-loader":"8.0.17","linkinator":"2.13.5","typescript":"4.1.5","@types/node":"14.14.28","karma-mocha":"2.0.1","@types/mocha":"8.2.1","@types/sinon":"9.0.10","karma-webpack":"4.0.2","lerna-changelog":"^1.0.1","@types/webpack-env":"1.16.0","karma-spec-reporter":"0.0.32","eslint-plugin-header":"3.1.1","eslint-plugin-import":"2.22.1","karma-chrome-launcher":"3.1.0","@typescript-eslint/parser":"4.15.1","istanbul-instrumenter-loader":"3.0.1","@typescript-eslint/eslint-plugin":"4.15.1","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_1.0.0-rc.3_1621431559180_0.18345750516195514","host":"s3://npm-registry-packages"}},"0.19.0":{"name":"@opentelemetry/api","version":"0.19.0","keywords":["opentelemetry","nodejs","browser","tracing","profiling","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.19.0","maintainers":[{"name":"mayurkale22","email":"mayurkale22@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"obecny","email":"bobecny@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js-api#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js-api/issues"},"dist":{"shasum":"d2997338c106ad8b00d4c9105fcbcadf1dac4ed5","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.19.0.tgz","fileCount":310,"integrity":"sha512-v+6ZPQZMKKRVCwLMdjfkrUhBNIQMPrbyMo2R07LdLpCKmq3KlEeyua2LsI19WgTWIj9R9QgqfD8EcUgyxUiw+A==","signatures":[{"sig":"MEMCHzZj5aK44IQBbQoUgAxszs+eQBO1j4gBWMi1qCocCNoCIBQT2NnLMvePePbOSgvu8v2DVOQAF8gLPWFmWLR7Fq7E","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":358560,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgpRyJCRA9TVsSAnZWagAAGm4P+QF+kErLH85247nHP9D4\nfrxWBVfMv4J/F8oPeEZIXq2bRikSOguiJwQlva27a+6n38gUWYDL1H29N+Vz\nPar9maxGzcIBVJDtje7G7jZ979HyuVfNe8kRpS8i1gIz16ZS0jlIC+U+6v6y\n1spTKlZw/EITJXBlkvR1LCWGwTIrZgeFuvw12QVoOWgK6/OTOIl8Rn23KUY1\nGNbOEDVNs7tSui0D0M2jiM63RjSSne6J775Oqj+2ECk8Y1YI/xH3GxLljcax\nDZVQp2vbpjKMwR4ZmQ3QSQYFULMHN9Jz4MYmCP6W32ppvXkccnDCq/ZnKIuG\ndLooHnkQG9WI+CEiljWo4h6QlCFhEMFkAgY07ha6AtthgyxLoAEW6zysIL73\ns9TtQ32JwjP7zHUl98tMKgGvbbhCd48gbhkmshEl/XPMSrGETm8u2pwbXTcR\nhO/67009Q10D6F8gdN6caK/ico27LYIj38oWjgnpFTmeci7hvWs4DSkTML+2\nj3LctYvSrUGV6qpsrinqQM2udHn2+2oU2Zewua8ZHbaT4gfklzrhEafY1VCi\nZR8t3N5GMNx/7FgtIyuPbgpS0aofRKHb0i6q6ivws5Eg1zpgJTauCg3AkcJf\nc3Vu2MwY0CJ001p+UvoYh6eOadezz3EFDJbYsMG6dSLkCXGjgQVjMJI8O9RC\nCgKU\r\n=/RN3\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","module":"build/esm/index.js","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/esm/platform/index.js":"./build/esm/platform/browser/index.js","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"8bd1c6e5d2cbff86851016f2c1948a01f02a5105","scripts":{"docs":"typedoc","lint":"eslint src test --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","clean":"tsc --build --clean tsconfig.json tsconfig.esm.json","watch":"tsc --build --watch","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p .","compile":"tsc --build tsconfig.json tsconfig.esm.json","version":"node scripts/version-update.js","lint:fix":"eslint src test --ext .ts --fix","docs:test":"linkinator docs/out --silent --skip david-dm.org","docs:deploy":"gh-pages --dist docs/out","test:browser":"nyc karma start --single-run","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ."},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js-api.git","type":"git"},"_npmVersion":"6.14.11","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"14.8.0","publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"gts":"3.1.0","nyc":"15.1.0","karma":"5.2.3","mocha":"7.2.0","sinon":"10.0.0","eslint":"7.25.0","codecov":"3.8.1","typedoc":"0.20.36","webpack":"4.46.0","gh-pages":"3.1.0","ts-mocha":"8.0.0","ts-loader":"8.2.0","linkinator":"2.13.6","typescript":"4.2.4","@types/node":"14.14.42","karma-mocha":"2.0.1","@types/mocha":"8.2.2","@types/sinon":"10.0.0","karma-webpack":"4.0.2","lerna-changelog":"1.0.1","@types/webpack-env":"1.16.0","karma-spec-reporter":"0.0.32","eslint-plugin-header":"3.1.1","eslint-plugin-import":"2.22.1","karma-chrome-launcher":"3.1.0","@typescript-eslint/parser":"4.22.0","istanbul-instrumenter-loader":"3.0.1","@typescript-eslint/eslint-plugin":"4.22.0","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_0.19.0_1621433480608_0.251099208329693","host":"s3://npm-registry-packages"}},"0.20.0":{"name":"@opentelemetry/api","version":"0.20.0","keywords":["opentelemetry","nodejs","browser","tracing","profiling","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.20.0","maintainers":[{"name":"mayurkale22","email":"mayurkale22@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"obecny","email":"bobecny@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js-api#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js-api/issues"},"dist":{"shasum":"d4e26d30dc0c5da697d1ff51434ad8f0cf30e565","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.20.0.tgz","fileCount":310,"integrity":"sha512-n06MtDYEc2H07S/NTvGMlxF2Ijp0YbNrI/rBgLcxpEh3hxOkPZA12gxlUoZkBHWCZYau2j3b/uL+QFpiQKOjSw==","signatures":[{"sig":"MEQCIAkPLgmwkLht59P9eRvrKLiiidy9RMBcItAHJvlJXbcOAiA52yYvt+TW+iSe+pXCzxIueO2Q3opf081rrfspZINb3A==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":361954,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgq5ZWCRA9TVsSAnZWagAAhwoP/jewlq93T98q9h2r+N6X\nWFlSBc9ktOA8gmzhgV9vFfvvWTJO3MJ7+IoqrBuMLEZsuPChEabHEYqidZHg\nVdGsSDBOxUvb75bZBul4AZvUPwW0INsXAY7yT85kwRTZR4suHbOQMh5lPy0f\nV9mNISLHb8bs4NsNpkcvekIXMPgaM+sCRq/SmBdcOZEK2im7p2w+/1lbraTh\nKBr06RM+M6rRcPk7OYUzR4flfB//tba6sbsqqri22UeYEsFCy19/zv36qnN1\n55SZgO5bxn/mOaE0EDjmFFqPXHPxxUqnnOlumROG6nDK0MTB48G8LkCTJlop\nUbJMh0q+P+mPmTWZS+p7ts+kIxXgSGHYQOFwEQo0fGd6mYeRxB+YY+VZB6wx\nPH8przx77AaoOy6Ncp+p9bjjPFqMT9AdSUv1fV/AQIoN7YRyezS8QLQpalPM\nO6cENEchWt4YGBtJY8r7va3SYmp78FdzqbPWgsi7DoqZ34+hHZVpMNdot3Wn\nUlkic+n/HoLWqp7kLd1MjMJrm9irFU4aGe4gNXJD7KIRo8T2vBbUN/EAlC6g\n8POSemWhO5v8S8BY+rzjtl0huuyXbLWzcOFbvs4442MHhcUfO+v8KBre9lY6\nrsP3UFX3SDixllkm6wrXM8QcOzjIMn6/qT1yFNtyybsuacKNS6It6WFCg0Sq\n6dbd\r\n=C1Uq\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","module":"build/esm/index.js","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/esm/platform/index.js":"./build/esm/platform/browser/index.js","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"f6673258c06ec80f03dbac102c2ebc32a1e05d31","scripts":{"docs":"typedoc","lint":"eslint src test --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","clean":"tsc --build --clean tsconfig.json tsconfig.esm.json","watch":"tsc --build --watch","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p .","compile":"tsc --build tsconfig.json tsconfig.esm.json","version":"node scripts/version-update.js","lint:fix":"eslint src test --ext .ts --fix","docs:test":"linkinator docs/out --silent --skip david-dm.org","docs:deploy":"gh-pages --dist docs/out","test:browser":"nyc karma start --single-run","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ."},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js-api.git","type":"git"},"_npmVersion":"6.14.11","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"14.8.0","publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"gts":"3.1.0","nyc":"15.1.0","karma":"5.2.3","mocha":"7.2.0","sinon":"10.0.0","eslint":"7.25.0","codecov":"3.8.1","typedoc":"0.20.36","webpack":"4.46.0","gh-pages":"3.1.0","ts-mocha":"8.0.0","ts-loader":"8.2.0","linkinator":"2.13.6","typescript":"4.2.4","@types/node":"14.14.42","karma-mocha":"2.0.1","@types/mocha":"8.2.2","@types/sinon":"10.0.0","karma-webpack":"4.0.2","lerna-changelog":"1.0.1","@types/webpack-env":"1.16.0","karma-spec-reporter":"0.0.32","eslint-plugin-header":"3.1.1","eslint-plugin-import":"2.22.1","karma-chrome-launcher":"3.1.0","@typescript-eslint/parser":"4.22.0","istanbul-instrumenter-loader":"3.0.1","@typescript-eslint/eslint-plugin":"4.22.0","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_0.20.0_1621857877721_0.06068974397357141","host":"s3://npm-registry-packages"}},"0.21.0":{"name":"@opentelemetry/api","version":"0.21.0","keywords":["opentelemetry","nodejs","browser","tracing","profiling","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@0.21.0","maintainers":[{"name":"mayurkale22","email":"mayurkale22@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"obecny","email":"bobecny@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js-api#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js-api/issues"},"dist":{"shasum":"aa360bf840ec70a7a056c6685aeed47af408cacb","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-0.21.0.tgz","fileCount":310,"integrity":"sha512-Q7hHb3nidPgnBS2fi+y3K64F3EV48d9v09/6EtigIgVF43NFNhw/dboDKC7gECEkbTwuvFeLCbwKs9JaC8LDEw==","signatures":[{"sig":"MEYCIQCdpdB2Nj5P5LHQ/QAD+NjjxksA3FHFI0mYpllSnJGgBAIhAKrsWMXLKRc0NlXn7/E9s0CZrCTkUIE/Mr9eWV/me54F","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":363649,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgul6rCRA9TVsSAnZWagAAUEQQAItjJXDma1vnrYxzepmd\njKX+xL0Ep8uz/lqqirnj3M4qUN/PVF6+kr+H96heVRanXTi4ccqxe5YTdz7I\nTT1Rgv0+yifLLZhNYRLQ75UsLAmZjLPbnVZC0Nb/9kA6oW6zlTauQlCV+6TE\ngkR8jHyUmFzjN9sqbagBP0VBUzT0pc7RQZZygOp4DxCM06NQbGJqxpcUSEx1\nW9qXQLHUkWWBOCj5GQwmt0qvDVFyo8qGi7Ily5JUWGqjdQzAKigWJhfkIs2H\nxd81pLR/TykvrUvbp8uFmZ+51A/aE/yEEp2P6X/qpMjs+9eN+F3z/0MELX4B\ncNN5yrANXRt7bWuIwNGk3SVEYfG1nwmxzxyoJQWrEnsj2D4HfoVddNNwnLp9\n7XBCv7JTnJM6h40Icmtv72KvBfzZYZanbiE/LFFh03JckG1VY68xJZRvi01e\nfDtwAjOCqZLQo0TeWz9MIQtQqFfYaFkeENxLPhdOojPmjpYD1bU5BTLkbS3m\n9Vzkp8dD7Uhvy63qphDk9vc9t2cc5dta+Ukrp8W+s9pdUZ4+o7iP9fDpytOK\niM0NmI0YB7RFGUan710b1E0U9TOvitjqVo2nuafnkAu2pVThNscOKCu6o6O0\n6E9G8ovHzaUHXvQgIypgXxPW9lp+HH1pd4zPm9sGHmq5nFrwysZuePOPnNJs\n/Kej\r\n=nNBi\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","module":"build/esm/index.js","readme":"\n---\n<p align=\"center\">\n  <strong>\n    <a href=\"https://open-telemetry.github.io/opentelemetry-js\">API Documentation<a/>\n    &nbsp;&nbsp;&bull;&nbsp;&nbsp;\n    <a href=\"https://github.com/open-telemetry/opentelemetry-js/discussions\">Getting In Touch (GitHub Discussions)<a/>\n  </strong>\n</p>\n\n<p align=\"center\">\n  <a href=\"https://github.com/open-telemetry/opentelemetry-js-api/releases\">\n    <img alt=\"GitHub release (latest by date including pre-releases)\" src=\"https://img.shields.io/github/v/release/open-telemetry/opentelemetry-js-api?include_prereleases&style=for-the-badge\">\n  </a>\n  <a href=\"https://codecov.io/gh/open-telemetry/opentelemetry-js-api/branch/main/\">\n    <img alt=\"Codecov Status\" src=\"https://img.shields.io/codecov/c/github/open-telemetry/opentelemetry-js-api?style=for-the-badge\">\n  </a>\n  <a href=\"https://github.com/open-telemetry/opentelemetry-js-api/blob/main/LICENSE\">\n    <img alt=\"license\" src=\"https://img.shields.io/badge/license-Apache_2.0-green.svg?style=for-the-badge\">\n  </a>\n  <br/>\n  <a href=\"https://github.com/open-telemetry/opentelemetry-js-api/actions/workflows/docs.yaml\">\n    <img alt=\"Build Status\" src=\"https://github.com/open-telemetry/opentelemetry-js-api/actions/workflows/test.yaml/badge.svg?branch=main\">\n  </a>\n  <a href=\"https://github.com/open-telemetry/opentelemetry-js-api/actions/workflows/test.yaml?query=branch%3Amain\">\n    <img alt=\"Build Status\" src=\"https://github.com/open-telemetry/opentelemetry-js-api/actions/workflows/docs.yaml/badge.svg\">\n  </a>\n</p>\n\n---\n\n# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n\nThis package provides everything needed to interact with the OpenTelemetry API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\nThe methods in this package perform no operations by default. This means they can be safely called by a library or end-user application whether there is an SDK registered or not. In order to generate and export telemetry data, you will also need an SDK such as the [OpenTelemetry JS SDK][opentelemetry-js].\n\n## Tracing Quick Start\n\n### You Will Need\n\n- An application you wish to instrument\n- [OpenTelemetry JS SDK][opentelemetry-js]\n- Node.js >=8.5.0 (14+ is preferred) or an ECMAScript 5+ compatible browser\n\n**Note:** ECMAScript 5+ compatibility is for this package only. Please refer to the documentation for the SDK you are using to determine its minimum ECMAScript version.\n\n**Note for library authors:** Only your end users will need an OpenTelemetry SDK. If you wish to support OpenTelemetry in your library, you only need to use the OpenTelemetry API. For more information, please read the [tracing documentation][docs-tracing].\n\n### Install Dependencies\n\n```sh\nnpm install @opentelemetry/api @opentelemetry/tracing\n```\n\n### Trace Your Application\n\nIn order to get started with tracing, you will need to first register an SDK. The SDK you are using may provide a convenience method which calls the registration methods for you, but if you would like to call them directly they are documented here: [sdk registration methods][docs-sdk-registration].\n\nOnce you have registered an SDK, you can start and end spans. A simple example of basic SDK registration and tracing a simple operation is below. The example should export spans to the console once per second. For more information, see the [tracing documentation][docs-tracing].\n\n```javascript\nconst { trace }  = require(\"@opentelemetry/api\");\nconst { BasicTracerProvider, ConsoleSpanExporter, SimpleSpanProcessor }  = require(\"@opentelemetry/tracing\");\n\n// Create and register an SDK\nconst provider = new BasicTracerProvider();\nprovider.addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporter()));\ntrace.setGlobalTracerProvider(provider);\n\n// Acquire a tracer from the global tracer provider which will be used to trace the application\nconst name = 'my-application-name';\nconst version = '0.1.0';\nconst tracer = trace.getTracer(name, version);\n\n// Trace your application by creating spans\nasync function operation() {\n  const span = tracer.startSpan(\"do operation\");\n\n  // mock some work by sleeping 1 second\n  await new Promise((resolve, reject) => {\n    setTimeout(resolve, 1000);\n  })\n\n  span.end();\n  return output;\n}\n\nasync function main() {\n  while (true) {\n    await operation();\n  }\n}\n\nmain();\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Upgrade Guidelines\n\n### 1.0.0-rc.1 to x\n\n### 1.0.0-rc.0 to 1.0.0-rc.1\n\n- Removing `TimedEvent` which was not part of spec\n- `HttpBaggage` renamed to `HttpBaggagePropagator`\n- [#45](https://github.com/open-telemetry/opentelemetry-js-api/pull/45) `Span#context` renamed to `Span#spanContext`\n- [#47](https://github.com/open-telemetry/opentelemetry-js-api/pull/47) `getSpan`/`setSpan`/`getSpanContext`/`setSpanContext` moved to `trace` namespace\n- [#55](https://github.com/open-telemetry/opentelemetry-js-api/pull/55) `getBaggage`/`setBaggage`/`createBaggage` moved to `propagation` namespace\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[opentelemetry-js]: https://github.com/open-telemetry/opentelemetry-js\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js-api/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js-api.svg\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js-api\n[devDependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js-api.svg?type=dev\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js-api?type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi.svg\n[docs-tracing]: https://github.com/open-telemetry/opentelemetry-js-api/blob/main/docs/tracing.md\n[docs-sdk-registration]: https://github.com/open-telemetry/opentelemetry-js-api/blob/main/docs/sdk-registration.md\n","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/esm/platform/index.js":"./build/esm/platform/browser/index.js","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"726fd827eedf4d3442293dc690313674af38d4ae","scripts":{"docs":"typedoc","lint":"eslint src test --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","clean":"tsc --build --clean tsconfig.json tsconfig.esm.json","watch":"tsc --build --watch","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p .","compile":"tsc --build tsconfig.json tsconfig.esm.json","version":"node scripts/version-update.js","lint:fix":"eslint src test --ext .ts --fix","docs:test":"linkinator docs/out --silent --skip david-dm.org","docs:deploy":"gh-pages --dist docs/out","test:browser":"nyc karma start --single-run","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ."},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js-api.git","type":"git"},"_npmVersion":"6.14.11","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"14.8.0","publishConfig":{"access":"public"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"gts":"3.1.0","nyc":"15.1.0","karma":"5.2.3","mocha":"7.2.0","sinon":"10.0.0","eslint":"7.25.0","codecov":"3.8.1","typedoc":"0.20.36","webpack":"4.46.0","gh-pages":"3.1.0","ts-mocha":"8.0.0","ts-loader":"8.2.0","linkinator":"2.13.6","typescript":"4.2.4","@types/node":"14.14.42","karma-mocha":"2.0.1","@types/mocha":"8.2.2","@types/sinon":"10.0.0","karma-webpack":"4.0.2","lerna-changelog":"1.0.1","@types/webpack-env":"1.16.0","karma-spec-reporter":"0.0.32","eslint-plugin-header":"3.1.1","eslint-plugin-import":"2.22.1","karma-chrome-launcher":"3.1.0","@typescript-eslint/parser":"4.22.0","istanbul-instrumenter-loader":"3.0.1","@typescript-eslint/eslint-plugin":"4.22.0","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_0.21.0_1622826667360_0.1272796368276481","host":"s3://npm-registry-packages"}},"1.0.0":{"name":"@opentelemetry/api","version":"1.0.0","keywords":["opentelemetry","nodejs","browser","tracing","profiling","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@1.0.0","maintainers":[{"name":"mayurkale22","email":"mayurkale22@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"obecny","email":"bobecny@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js-api#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js-api/issues"},"dist":{"shasum":"cc7712009095697f8a9492ee375daa08588ba263","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-1.0.0.tgz","fileCount":310,"integrity":"sha512-TcdhrGy+ehLIFs79/TcWiHiPujishrhSgQ7wxvWvk8WY2YT8Np/pYXmRP94voG3N8GJ/5nIVyzacfViwhN50AQ==","signatures":[{"sig":"MEUCIQDj5mzfWanWIIGVc06eDFm9HlSOId5Z4yLEKMcIHOFu3wIgVTVbTs2RDC1F/A5zvXTjgMCUr9H8z7xDZXM3FVdimwk=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":364607,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgwjVICRA9TVsSAnZWagAA4xUP/R2b+02H4/0BwmyMgHIE\nsq49hJbr4WF6nxFxXWf77yjrIH+WdfWpmeq8UIHgiBhEZSeSfCje/d56tvAl\nSW//GeKFGc1eS2GC0rTPyTO9MC6zhGRaY5LhBzkMfiiiXasiJv/BLQaKOkeJ\n0hcApkt0Ir0oSx6q4sfLSRevdNGjOYKAQv4eYBHeGEU7qGtx9cXTgyk+JPEv\nl3WnqhszhHnLx8BL0Llzjwft5K8OoCkDpSYf7a0zFvlB6neh4/mLA5Sx4l3e\n2k6JOKy9Mvow/xDwO1jW6W4ucW0pKQ5m3R5AOUcJSvUB0g47ZXCECN74hVlJ\n8AVZqkZzHylb3Is5Vi7SNywpdufUPONm/OC6gZl8rETtuqJOaVwHY4h6kNtr\n6eLLbgEhXJUxo9E1tG3I/5UoJ/LmwIyHCpc6uc/xLmZs4HC22frnaU8O1Yqd\nPvL7NBlUGL8ukxSfqbJNq4Qbs5KeUNA7Lneg+cQt0UKKsQ9eMfysFfvbhoKm\n1dl6FqSa4SgxPToViQYbohS/YPn62SCGx83TbdUVK9L0avvqdt+UorEHpXsH\nwC/pkoQ43R0PqgcfVMjIi8mPmydTsDH64APLr767zoy/LhVjAMIngUcvVmqZ\nY/YfPuEW6JDDZ9s/YidPCFMn/EJ8sx89Zk6vWwQxq/e0voFXzuh3YZZDH+6B\nKmF9\r\n=sjDC\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","module":"build/esm/index.js","readme":"\n---\n<p align=\"center\">\n  <strong>\n    <a href=\"https://open-telemetry.github.io/opentelemetry-js\">API Documentation<a/>\n    &nbsp;&nbsp;&bull;&nbsp;&nbsp;\n    <a href=\"https://github.com/open-telemetry/opentelemetry-js/discussions\">Getting In Touch (GitHub Discussions)<a/>\n  </strong>\n</p>\n\n<p align=\"center\">\n  <a href=\"https://github.com/open-telemetry/opentelemetry-js-api/releases\">\n    <img alt=\"GitHub release (latest by date including pre-releases)\" src=\"https://img.shields.io/github/v/release/open-telemetry/opentelemetry-js-api?include_prereleases&style=for-the-badge\">\n  </a>\n  <a href=\"https://codecov.io/gh/open-telemetry/opentelemetry-js-api/branch/main/\">\n    <img alt=\"Codecov Status\" src=\"https://img.shields.io/codecov/c/github/open-telemetry/opentelemetry-js-api?style=for-the-badge\">\n  </a>\n  <a href=\"https://github.com/open-telemetry/opentelemetry-js-api/blob/main/LICENSE\">\n    <img alt=\"license\" src=\"https://img.shields.io/badge/license-Apache_2.0-green.svg?style=for-the-badge\">\n  </a>\n  <br/>\n  <a href=\"https://github.com/open-telemetry/opentelemetry-js-api/actions/workflows/docs.yaml\">\n    <img alt=\"Build Status\" src=\"https://github.com/open-telemetry/opentelemetry-js-api/actions/workflows/test.yaml/badge.svg?branch=main\">\n  </a>\n  <a href=\"https://github.com/open-telemetry/opentelemetry-js-api/actions/workflows/test.yaml?query=branch%3Amain\">\n    <img alt=\"Build Status\" src=\"https://github.com/open-telemetry/opentelemetry-js-api/actions/workflows/docs.yaml/badge.svg\">\n  </a>\n</p>\n\n---\n\n# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n[![dependencies][dependencies-image]][dependencies-url]\n[![devDependencies][devDependencies-image]][devDependencies-url]\n\nThis package provides everything needed to interact with the OpenTelemetry API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\nThe methods in this package perform no operations by default. This means they can be safely called by a library or end-user application whether there is an SDK registered or not. In order to generate and export telemetry data, you will also need an SDK such as the [OpenTelemetry JS SDK][opentelemetry-js].\n\n## Tracing Quick Start\n\n### You Will Need\n\n- An application you wish to instrument\n- [OpenTelemetry JS SDK][opentelemetry-js]\n- Node.js >=8.5.0 (14+ is preferred) or an ECMAScript 5+ compatible browser\n\n**Note:** ECMAScript 5+ compatibility is for this package only. Please refer to the documentation for the SDK you are using to determine its minimum ECMAScript version.\n\n**Note for library authors:** Only your end users will need an OpenTelemetry SDK. If you wish to support OpenTelemetry in your library, you only need to use the OpenTelemetry API. For more information, please read the [tracing documentation][docs-tracing].\n\n### Install Dependencies\n\n```sh\nnpm install @opentelemetry/api @opentelemetry/tracing\n```\n\n### Trace Your Application\n\nIn order to get started with tracing, you will need to first register an SDK. The SDK you are using may provide a convenience method which calls the registration methods for you, but if you would like to call them directly they are documented here: [sdk registration methods][docs-sdk-registration].\n\nOnce you have registered an SDK, you can start and end spans. A simple example of basic SDK registration and tracing a simple operation is below. The example should export spans to the console once per second. For more information, see the [tracing documentation][docs-tracing].\n\n```javascript\nconst { trace }  = require(\"@opentelemetry/api\");\nconst { BasicTracerProvider, ConsoleSpanExporter, SimpleSpanProcessor }  = require(\"@opentelemetry/tracing\");\n\n// Create and register an SDK\nconst provider = new BasicTracerProvider();\nprovider.addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporter()));\ntrace.setGlobalTracerProvider(provider);\n\n// Acquire a tracer from the global tracer provider which will be used to trace the application\nconst name = 'my-application-name';\nconst version = '0.1.0';\nconst tracer = trace.getTracer(name, version);\n\n// Trace your application by creating spans\nasync function operation() {\n  const span = tracer.startSpan(\"do operation\");\n\n  // mock some work by sleeping 1 second\n  await new Promise((resolve, reject) => {\n    setTimeout(resolve, 1000);\n  })\n\n  span.end();\n  return output;\n}\n\nasync function main() {\n  while (true) {\n    await operation();\n  }\n}\n\nmain();\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Upgrade Guidelines\n\n### 0.21.0 to 1.0.0\n\nNo breaking changes\n\n### 0.20.0 to 0.21.0\n\n- [#78](https://github.com/open-telemetry/opentelemetry-js-api/issues/78) `api.context.bind` arguments reversed and `context` is now a required argument.\n- [#46](https://github.com/open-telemetry/opentelemetry-js-api/issues/46) Noop classes and singletons are no longer exported. To create a noop span it is recommended to use `api.trace.wrapSpanContext` with `INVALID_SPAN_CONTEXT` instead of using the `NOOP_TRACER`.\n\n### 1.0.0-rc.3 to 0.20.0\n\n- Removing `TimedEvent` which was not part of spec\n- `HttpBaggage` renamed to `HttpBaggagePropagator`\n- [#45](https://github.com/open-telemetry/opentelemetry-js-api/pull/45) `Span#context` renamed to `Span#spanContext`\n- [#47](https://github.com/open-telemetry/opentelemetry-js-api/pull/47) `getSpan`/`setSpan`/`getSpanContext`/`setSpanContext` moved to `trace` namespace\n- [#55](https://github.com/open-telemetry/opentelemetry-js-api/pull/55) `getBaggage`/`setBaggage`/`createBaggage` moved to `propagation` namespace\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[opentelemetry-js]: https://github.com/open-telemetry/opentelemetry-js\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js-api/blob/main/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[dependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js-api.svg\n[dependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js-api\n[devDependencies-image]: https://status.david-dm.org/gh/open-telemetry/opentelemetry-js-api.svg?type=dev\n[devDependencies-url]: https://david-dm.org/open-telemetry/opentelemetry-js-api?type=dev\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi.svg\n[docs-tracing]: https://github.com/open-telemetry/opentelemetry-js-api/blob/main/docs/tracing.md\n[docs-sdk-registration]: https://github.com/open-telemetry/opentelemetry-js-api/blob/main/docs/sdk-registration.md\n","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/esm/platform/index.js":"./build/esm/platform/browser/index.js","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"25cf8a4f3fb97af933190e0557b281293a168816","scripts":{"docs":"typedoc","lint":"eslint src test --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","clean":"tsc --build --clean tsconfig.json tsconfig.esm.json","watch":"tsc --build --watch","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p .","compile":"tsc --build tsconfig.json tsconfig.esm.json","version":"node scripts/version-update.js","lint:fix":"eslint src test --ext .ts --fix","docs:test":"linkinator docs/out --silent --skip david-dm.org","docs:deploy":"gh-pages --dist docs/out","test:browser":"nyc karma start --single-run","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ."},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js-api.git","type":"git"},"_npmVersion":"6.14.11","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"14.8.0","publishConfig":{"access":"public"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"gts":"3.1.0","nyc":"15.1.0","karma":"5.2.3","mocha":"7.2.0","sinon":"11.1.1","eslint":"7.28.0","codecov":"3.8.2","typedoc":"0.21.0-beta.1","webpack":"4.46.0","gh-pages":"3.2.0","ts-mocha":"8.0.0","ts-loader":"8.2.0","linkinator":"2.13.6","typescript":"4.3.2","@types/node":"14.17.1","karma-mocha":"2.0.1","@types/mocha":"8.2.2","@types/sinon":"10.0.2","karma-webpack":"4.0.2","lerna-changelog":"1.0.1","@types/webpack-env":"1.16.0","karma-spec-reporter":"0.0.32","eslint-plugin-header":"3.1.1","eslint-plugin-import":"2.23.4","karma-chrome-launcher":"3.1.0","@typescript-eslint/parser":"4.26.0","istanbul-instrumenter-loader":"3.0.1","@typescript-eslint/eslint-plugin":"4.26.0","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_1.0.0_1623340359892_0.34908205000666737","host":"s3://npm-registry-packages"}},"1.0.1":{"name":"@opentelemetry/api","version":"1.0.1","keywords":["opentelemetry","nodejs","browser","tracing","profiling","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@1.0.1","maintainers":[{"name":"mayurkale22","email":"mayurkale22@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"obecny","email":"bobecny@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js-api#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js-api/issues"},"dist":{"shasum":"03c72f548431da5820a0c8864d1401e348e7e79f","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-1.0.1.tgz","fileCount":310,"integrity":"sha512-H5Djcc2txGAINgf3TNaq4yFofYSIK3722PM89S/3R8FuI/eqi1UscajlXk7EBkG9s2pxss/q6SHlpturaavXaw==","signatures":[{"sig":"MEUCIExr2UkFiHum2r7Sf1xBePqGgHbFOeXQAPgjcpt2nIwbAiEAxv5O6YEqG4m13Jj+rTo0WNGUqpEmZCzYVaSpeBihBtw=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":365959,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg1j8gCRA9TVsSAnZWagAAfZMP/37ApqByTwlCdwmFTK7V\nhprSQM3Ks7IT819U+stsM7axM2wFokD1vEd6u5yhbSQ3TB2f/2VRtA8Ita31\nPWFWRUjpIlpDA+LYlJjClFzO9BqhhK55Zn8U2IESWqyoTKo9S1F95u4oTaCd\nJd+uT0eq59BDmGuQD6o4IotmrSyAUCqQVIa97VZtiA2HO/lEIS38HgJ0X7ad\nj4UgQZsbimRMtFBn/bKvPcJHVq+idJd6EoqSjrWWOW2NcUuxYQNNfUivPfFV\nrYdeOtZHOry0WLLtO4Z2DkfyS45cQaU/eNKsJy0c3w7bX/9sOuui6FHzWr3y\nz+v5IbHXzWG+569yINlpK6TPlcksOmEN5/kYw4l9h+vgIULPf6W1mbI8DUZo\nYWDyv/SFAVAO5oynlEMMuGEDqiXu1rA6THHAzXEBTZmFGp3gQAmjHwHWFFfW\nOf48qYG1cKnycWdEixTbejVX8Ei03jl90x/RBpcc9rb4G0UN95tCamInl76v\nd1Zl1Go2xcaT9ZU+6ljDAsxgQMNIG0oXCSz1cYeoio+3scOgcnelJgdlZRXJ\nebE7vvmPXGRoiIEh34U/K/frsZakBm6pwy4gjcd/sbSSqHCvo/AbNWsfbAwf\n2GEYfEI0nTIOocH3hNMigvCMM8oqYmxubACFX8KWOhybji+QzdvB6m27rlmR\nsXvW\r\n=IDIa\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","module":"build/esm/index.js","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/esm/platform/index.js":"./build/esm/platform/browser/index.js","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"821a007a713ca1840b77e76f92a443191c780431","scripts":{"docs":"typedoc","lint":"eslint src test --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","clean":"tsc --build --clean tsconfig.json tsconfig.esm.json","watch":"tsc --build --watch","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p .","compile":"tsc --build tsconfig.json tsconfig.esm.json","version":"node scripts/version-update.js","lint:fix":"eslint src test --ext .ts --fix","docs:test":"linkinator docs/out --silent --skip david-dm.org","docs:deploy":"gh-pages --dist docs/out","test:browser":"nyc karma start --single-run","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ."},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js-api.git","type":"git"},"_npmVersion":"6.14.11","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"14.8.0","publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"gts":"3.1.0","nyc":"15.1.0","karma":"5.2.3","mocha":"7.2.0","sinon":"11.1.1","eslint":"7.28.0","codecov":"3.8.2","typedoc":"0.21.0-beta.1","webpack":"4.46.0","gh-pages":"3.2.0","ts-mocha":"8.0.0","ts-loader":"8.2.0","linkinator":"2.13.6","typescript":"4.3.2","@types/node":"14.17.1","karma-mocha":"2.0.1","@types/mocha":"8.2.2","@types/sinon":"10.0.2","karma-webpack":"4.0.2","lerna-changelog":"1.0.1","@types/webpack-env":"1.16.0","karma-spec-reporter":"0.0.32","eslint-plugin-header":"3.1.1","eslint-plugin-import":"2.23.4","karma-chrome-launcher":"3.1.0","@typescript-eslint/parser":"4.26.0","istanbul-instrumenter-loader":"3.0.1","@typescript-eslint/eslint-plugin":"4.26.0","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_1.0.1_1624653599673_0.3700085723088007","host":"s3://npm-registry-packages"}},"1.0.2":{"name":"@opentelemetry/api","version":"1.0.2","keywords":["opentelemetry","nodejs","browser","tracing","profiling","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@1.0.2","maintainers":[{"name":"mayurkale22","email":"mayurkale22@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"obecny","email":"bobecny@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js-api#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js-api/issues"},"dist":{"shasum":"921e1f2b2484b762d77225a8a25074482d93fccf","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-1.0.2.tgz","fileCount":310,"integrity":"sha512-DCF9oC89ao8/EJUqrp/beBlDR8Bp2R43jqtzayqCoomIvkwTuPfLcHdVhIGRR69GFlkykFjcDW+V92t0AS7Tww==","signatures":[{"sig":"MEQCIDRNn5fvxNWbs+lgXuaSR/PVKiAfgRnMBMw2bumqMDwBAiBM8i8XGWyDVBccbhhZJjR8j3x2WJWJMzjNKxZJ3cwYZA==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":369470,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhAqHfCRA9TVsSAnZWagAAaxMP/joxepRMYi+dAMfJ6Z5h\nCU/z1LcxwHToXe9qeLdZjzxaA70NSMx4qvuTsfJhRvtOGqWG8csNuhJF97kw\n/w9fKcS9H6YxeWIKTy3RgFSpG1URBrhk1zDQeHxiCE6CK4PaKOwIHBSXZDb1\nH+WQqGw+a62GN4HNzWcRfk4xt6Tnh/B4Ae0u+k9Q9+0tqc52psfOyujY/CGq\nf868DPFgBuKSOnz28AGm/hbD5m3Y9f6XmT4CujEj0JVnvi2Zjo66xDk697Vu\nTKjY7C5jU1C0AcNPAnO61QBD2y/TVswc9FbFmM0A3vbfGENbEz70xECtRSBf\nMLC7KHkLE5UPawi48HpqRVyDPXBP2YjcIbwmd1sR+ZzC1izH8Cx4qAaHJv5k\nx6jsvXXHUJSteTkqsXbhjdH19eAQPj1wSVBbk3nDIkg+4beEn+UmA1WY1YNa\nhRteYs9Nv7xSrtwhUY9BFP+UYMt+AbWeatiRhcpo6hBmKe1ZU0NScyguKXwH\nSE/aNFqX0+rdZKVUMnhkkCVvtXmrqS3dVyiAptQkft9ujSAUhUhx7REibK9K\nTftjUNiqV44kfJSzP86+OLAlkSFNRMBZw+qL0eP92fYTfghLziZEJ6BylgpO\nrwDJRE0TIDJJbvN/f62/38rh171YFjjC68OifxxsBgwIBeq2BZXrHlgF3BSI\nwV34\r\n=dBFD\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","module":"build/esm/index.js","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/esm/platform/index.js":"./build/esm/platform/browser/index.js","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"5f45865d36ee9b0a7d9a66bef87c571869df8242","scripts":{"docs":"typedoc","lint":"eslint src test --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","build":"npm run compile","clean":"tsc --build --clean tsconfig.json tsconfig.esm.json","watch":"tsc --build --watch","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p .","compile":"tsc --build tsconfig.json tsconfig.esm.json","version":"node scripts/version-update.js","lint:fix":"eslint src test --ext .ts --fix","docs:test":"linkinator docs/out --silent --skip david-dm.org","docs:deploy":"gh-pages --dist docs/out","test:browser":"nyc karma start --single-run","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ."},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js-api.git","type":"git"},"_npmVersion":"6.14.11","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"14.8.0","publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"gts":"3.1.0","nyc":"15.1.0","karma":"5.2.3","mocha":"7.2.0","sinon":"11.1.1","eslint":"7.30.0","codecov":"3.8.2","typedoc":"0.21.2","webpack":"4.46.0","gh-pages":"3.2.0","ts-mocha":"8.0.0","ts-loader":"8.2.0","linkinator":"2.13.6","typescript":"4.3.5","@types/node":"14.17.4","karma-mocha":"2.0.1","@types/mocha":"8.2.2","@types/sinon":"10.0.2","karma-webpack":"4.0.2","lerna-changelog":"1.0.1","@types/webpack-env":"1.16.0","karma-spec-reporter":"0.0.32","eslint-plugin-header":"3.1.1","eslint-plugin-import":"2.23.4","karma-chrome-launcher":"3.1.0","@typescript-eslint/parser":"4.28.1","istanbul-instrumenter-loader":"3.0.1","@typescript-eslint/eslint-plugin":"4.28.1","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_1.0.2_1627562463049_0.48723097483601063","host":"s3://npm-registry-packages"}},"1.0.3":{"name":"@opentelemetry/api","version":"1.0.3","keywords":["opentelemetry","nodejs","browser","tracing","profiling","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@1.0.3","maintainers":[{"name":"mayurkale22","email":"mayurkale22@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"obecny","email":"bobecny@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js-api#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js-api/issues"},"dist":{"shasum":"13a12ae9e05c2a782f7b5e84c3cbfda4225eaf80","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-1.0.3.tgz","fileCount":316,"integrity":"sha512-puWxACExDe9nxbBB3lOymQFrLYml2dVOrd7USiVRnSbgXE+KwBu+HxFvxrzfqsiSda9IWsXJG1ef7C1O2/GmKQ==","signatures":[{"sig":"MEQCIBTY1S2E0m18p5kfloB5aJrYDRRoJoA+Zut8BgA7cOlQAiBlYKNZyds8D07zoJVmF5DkMN14yv8+8vjSF2gNgZboqw==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":372854,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhLhmoCRA9TVsSAnZWagAAwkkQAJt/SSZ4STjocJfu6m+o\nkNx8KGJXWXrOHeiaQkZtP8hh/09D0UaL8fwgAeUw4jHrsb3GrZ9y/mdDVMIg\n4xqxDukEL5xHRjF89aa3656tZ3AdEaE1XQOilINSBXOwl5DFu22ilHenJ4UY\n1MtzRcX+Q8z1Tuua8ribztDkE19SzVHMaq+s91hU7p5SMGYP4qmfA1UMpBSX\nRlKxGFCjlJXa4SlDg6IQw/7yXlLo4+yb483iAR3tXRs3n/usb4R05vjpI/8+\n/MFE7oaJ5UbUAcQzVsMpuxwcBdBU3Z1gR3wyo3sMYtkq/FNrqCHx3Od8nIxr\n8d3vkiZVMjIpS1I/96CVLGMVPDuQ2egI3Of43gwY4G47pdAZehD332tRD0b6\nDqHUhGd6inNCMZU1gU7ChmN4PDwsCw3SzkRWF859lT5J//BMLKE3Gx0TzTSh\nbMiTnIo7KIxiGHHulG2vfvuE8ZX+lJ3kyKoAh5BP1YZSbcpcvew5jbcShvyl\njoa9ckcCbkEOK55uA+BxjI2uzfiAEQavrg4jmIwH60DW6ceUV3ZnlTbqalhD\nBFfhaAGe1wOu9fhoEK31fMDT9gfgTjtKM0fL0muh6snAi7yhCSqv3RPywUjf\nDXuOu0WgIdDVpYj2lO0Jb2vYLz5hkR+FeMG2mFT1tQDcM06OSv5FNXNuGFcg\nZEVR\r\n=ZL31\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","module":"build/esm/index.js","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/esm/platform/index.js":"./build/esm/platform/browser/index.js","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"a752e7f814e7b335e50705d281cb2c6e1bd38a35","scripts":{"docs":"typedoc","lint":"eslint src test --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","clean":"tsc --build --clean tsconfig.json tsconfig.esm.json","watch":"tsc --build --watch","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p .","compile":"tsc --build tsconfig.json tsconfig.esm.json","version":"node scripts/version-update.js","lint:fix":"eslint src test --ext .ts --fix","prewatch":"npm run version","docs:test":"linkinator docs/out --silent --skip david-dm.org","precompile":"npm run version","cycle-check":"dpdm --exit-code circular:1 src/index.ts","docs:deploy":"gh-pages --dist docs/out","test:browser":"nyc karma start --single-run","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ."},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js-api.git","type":"git"},"_npmVersion":"6.14.14","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"14.17.5","publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"gts":"3.1.0","nyc":"15.1.0","dpdm":"3.7.1","karma":"5.2.3","mocha":"7.2.0","sinon":"11.1.1","eslint":"7.30.0","codecov":"3.8.2","typedoc":"0.21.2","webpack":"4.46.0","gh-pages":"3.2.0","ts-mocha":"8.0.0","ts-loader":"8.2.0","linkinator":"2.13.6","typescript":"4.3.5","@types/node":"14.17.4","karma-mocha":"2.0.1","@types/mocha":"8.2.2","@types/sinon":"10.0.2","karma-webpack":"4.0.2","lerna-changelog":"1.0.1","@types/webpack-env":"1.16.0","karma-spec-reporter":"0.0.32","eslint-plugin-header":"3.1.1","eslint-plugin-import":"2.23.4","karma-chrome-launcher":"3.1.0","@typescript-eslint/parser":"4.28.1","istanbul-instrumenter-loader":"3.0.1","@typescript-eslint/eslint-plugin":"4.28.1","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_1.0.3_1630411176029_0.8446706895073408","host":"s3://npm-registry-packages"}},"1.0.4":{"name":"@opentelemetry/api","version":"1.0.4","keywords":["opentelemetry","nodejs","browser","tracing","profiling","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@1.0.4","maintainers":[{"name":"mayurkale22","email":"mayurkale22@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"obecny","email":"bobecny@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js-api#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js-api/issues"},"dist":{"shasum":"a167e46c10d05a07ab299fc518793b0cff8f6924","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-1.0.4.tgz","fileCount":316,"integrity":"sha512-BuJuXRSJNQ3QoKA6GWWDyuLpOUck+9hAXNMCnrloc1aWVoy6Xq6t9PUV08aBZ4Lutqq2LEHM486bpZqoViScog==","signatures":[{"sig":"MEUCIQCRimh8L2mpIo9AEMX8Q5Ta6tDGhRWknQ1pjlVi4LWv9gIgOl0I5lmexee5+MaZ9he0JFMPBGcJwki9vqaKMouk7ts=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":595555,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhw0xICRA9TVsSAnZWagAAEHkP/3+Z6lJz2bLgX4Qb5EjI\nN4frfiBqx/DZqTFicACTNNIeho2j2gDCvtNSFKrvdH12h9RCVwPfwbJpHtIN\nc36pn2JZhhaRP9T08GWQLEI6zavF7s9T8eXzbS77VCTdVEL3MmvCFMEif99B\nwdR+8DG95DtiKi5FQRrY7wDpeBkkR1JidtXCDGfsF83rBQG8d3FAAmJEmEpc\n0mrY0KowAIOP3C+qXyrtwXF0V+5lwgB09YDjnda6QDtDyizLuMIyjOhx+Aet\nRKYJEKdaU855r84X0y1wJaXi2TApbuxI+q3pfVlczA8Ip+rpQzlXhHsgEoj9\naMzYUyOD1iuUQljbWu3oistnbUDHE0E59BXE/KqDfjb7zClaWzUJXwmbctdE\nixMRHPmqx/r+rO88mCWL9B2/G1zJGL/0T2pXd0ERJ4FoXM8DmMe3C3Lwr9zI\nv6tv+Yfm6fhKgUOPd/Fuq0oYXdciQVmalOKOGTMJL72JpvOopKVoLQYMkC6Q\n3ZqOPs8m1CMe6yNTDDg39a8ce1FbKL++1AcAnASoc3HSRjqIeO0wHcOyuh1d\nH7K867t/DfmQgcI6dA3QfEuOx6/jQGTflhMiXD7SOXlak5dwodKQD5BZO16m\nGXtt7hhoOM9eCtll98r9lv4EOQxg+coFFkrpbtFUepxnlzbtKzJBx5GJJf3Q\ndJbb\r\n=PlAq\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","module":"build/esm/index.js","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/esm/platform/index.js":"./build/esm/platform/browser/index.js","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"51b958e8de7c98e61c84f840c688de1d016f9310","scripts":{"docs":"typedoc","lint":"eslint src test --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","clean":"tsc --build --clean tsconfig.json tsconfig.esm.json","watch":"tsc --build --watch","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p .","compile":"tsc --build tsconfig.json tsconfig.esm.json","version":"node scripts/version-update.js","lint:fix":"eslint src test --ext .ts --fix","prewatch":"npm run version","docs:test":"linkinator docs/out --silent && linkinator docs/*.md *.md --markdown --silent","precompile":"npm run version","cycle-check":"dpdm --exit-code circular:1 src/index.ts","docs:deploy":"gh-pages --dist docs/out","test:browser":"nyc karma start --single-run","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ."},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js-api.git","type":"git"},"_npmVersion":"6.14.15","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"14.18.2","publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"nyc":"15.1.0","dpdm":"3.7.1","karma":"5.2.3","mocha":"7.2.0","sinon":"11.1.1","eslint":"7.32.0","codecov":"3.8.2","typedoc":"0.21.2","webpack":"4.46.0","gh-pages":"3.2.0","ts-mocha":"8.0.0","ts-loader":"8.2.0","linkinator":"2.13.6","typescript":"4.3.5","@types/node":"14.17.4","karma-mocha":"2.0.1","@types/mocha":"8.2.2","@types/sinon":"10.0.2","karma-webpack":"4.0.2","lerna-changelog":"1.0.1","@types/webpack-env":"1.16.0","eslint-plugin-node":"11.1.0","karma-spec-reporter":"0.0.32","eslint-plugin-header":"3.1.1","karma-chrome-launcher":"3.1.0","@typescript-eslint/parser":"5.0.0","istanbul-instrumenter-loader":"3.0.1","@typescript-eslint/eslint-plugin":"5.0.0","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_1.0.4_1640189000362_0.8159627187702121","host":"s3://npm-registry-packages"}},"1.1.0":{"name":"@opentelemetry/api","version":"1.1.0","keywords":["opentelemetry","nodejs","browser","tracing","profiling","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@1.1.0","maintainers":[{"name":"mayurkale22","email":"mayurkale22@gmail.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"},{"name":"obecny","email":"bobecny@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js-api#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js-api/issues"},"dist":{"shasum":"563539048255bbe1a5f4f586a4a10a1bb737f44a","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-1.1.0.tgz","fileCount":346,"integrity":"sha512-hf+3bwuBwtXsugA2ULBc95qxrOqP2pOekLz34BJhcAKawt94vfeNyUKpYc0lZQ/3sCP6LqRa7UAdHA7i5UODzQ==","signatures":[{"sig":"MEUCICzcWlT926QWEdH1gPyxwituL+9telvQ7dGU07Mh6sXJAiEAvlCbrWhUmFgEAM++gp8BCvT0gU/ZZNhVwT4tlo4N01g=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":646983,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh8sghCRA9TVsSAnZWagAAOZ0P/1Dsy0/JLjaXALUQyDVB\nioNO73OqFyxUx27JTNSOhpF0PtTogR6BYGyH3ATkr1IXfcGQtQpYAkE6oad0\nsuk/Lta50g4Aav9H9Rsg6616d81Ea8LvHhFL8ZgXRgVzD2BY2rf1aFOEb/JQ\n3iWsRkP+vOY3t+F6eQJ4mQBdHChZjWRure/h7NTewSqPowFPrH7oR5bXFbTC\nN2BAyIObFpJeIRkpxt9MAnhvw5U3heMfHu1nwixenAteESVMqFC+OQam8Djr\np7IkKpQLnjHlr65Z8acLa8Nj1XCMnq3e3/GBZ+mTUpt6cXfX6viG5eM4+U4k\nbATVe0sd+wvOkdPKAIMeDUXSHbu2vGevk5vKg9O1FKbncs/M6ezB8bVYaWXB\nLu6C9rpbd+jw/LfMrpybJ8HY2iSmcMOHEBumXzCRh1VsZKbI2K3RBz45u1yp\nqyIVLAb+h//m02s4GSw3v/A4xFd61WCLfhn2MoyMf5kzN0QI9uwG7+iJLy8U\nUXtYz49Y5ejO4Ovv4A4zwoMA3h4BeAu0+r2PNuyfstvQYNbW5FWQ5FzYTy2m\n0ELy+PMAFl/C1aDqDf5HgBVnT1mhLwWA7PMOgntYFOIICk+i5UpqN3MVHpGD\njtW2y1RMbqsCVvQ9XRu5b8iCRJJlt+vYHrh/Gzb8FCpoNjwXnHVMWLzgM6zf\nNFis\r\n=yG8N\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","module":"build/esm/index.js","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/esm/platform/index.js":"./build/esm/platform/browser/index.js","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"24f1cb8471249f0bc10e41a3f07e6728a137682b","scripts":{"docs":"typedoc","lint":"eslint src test --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","clean":"tsc --build --clean tsconfig.json tsconfig.esm.json","watch":"tsc --build --watch","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p .","compile":"tsc --build tsconfig.json tsconfig.esm.json","version":"node scripts/version-update.js","lint:fix":"eslint src test --ext .ts --fix","prewatch":"npm run version","docs:test":"linkinator docs/out --silent && linkinator docs/*.md *.md --markdown --silent","precompile":"npm run version","cycle-check":"dpdm --exit-code circular:1 src/index.ts","docs:deploy":"gh-pages --dist docs/out","test:browser":"nyc karma start --single-run","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ."},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js-api.git","type":"git"},"_npmVersion":"6.14.15","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"14.18.3","publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"nyc":"15.1.0","dpdm":"3.7.1","karma":"5.2.3","mocha":"7.2.0","sinon":"11.1.1","eslint":"7.32.0","codecov":"3.8.2","typedoc":"0.21.2","webpack":"4.46.0","gh-pages":"3.2.0","ts-mocha":"8.0.0","ts-loader":"8.2.0","linkinator":"2.13.6","typescript":"4.3.5","@types/node":"14.17.4","karma-mocha":"2.0.1","@types/mocha":"8.2.2","@types/sinon":"10.0.2","karma-webpack":"4.0.2","lerna-changelog":"1.0.1","@types/webpack-env":"1.16.0","eslint-plugin-node":"11.1.0","karma-spec-reporter":"0.0.32","eslint-plugin-header":"3.1.1","karma-chrome-launcher":"3.1.0","@typescript-eslint/parser":"5.0.0","istanbul-instrumenter-loader":"3.0.1","@typescript-eslint/eslint-plugin":"5.0.0","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_1.1.0_1643300897048_0.701795531041127","host":"s3://npm-registry-packages"}},"1.2.0":{"name":"@opentelemetry/api","version":"1.2.0","keywords":["opentelemetry","nodejs","browser","tracing","profiling","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@1.2.0","maintainers":[{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js-api#readme","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js-api/issues"},"dist":{"shasum":"89ef99401cde6208cff98760b67663726ef26686","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-1.2.0.tgz","fileCount":346,"integrity":"sha512-0nBr+VZNKm9tvNDZFstI3Pq1fCTEDK5OZTnVKNvBNAKgd0yIvmwsP4m61rEv7ZP+tOUjWJhROpxK5MsnlF911g==","signatures":[{"sig":"MEUCIQDCrM7FtetADSEPCNwo006CB9vCsxiQXJCDG0VfqKqWZAIgOR2cxI7GoCSplvigzpcRDE+fffv6SqA1nf9wmWV8jsw=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":650533,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi/o9mACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmo7LQ/+JLkcjBaKEBrlmOMsddIRLdgRG9Rldxr1/imcsjrisvICz3p0\r\nonimOV8rYw3wOJ/6Mj3X00bNXkspd/u+QCefMc7puNxhhQMrdF/GQ8l7MGZ+\r\n/go/ABmJaZ553aHrcWQy/HpWv//vMRJ6oCwjXshHChA5wYTaQbHaiolodeqX\r\n5aEKr4zRmApMrZVcJolj0xW9QdyWgSKTvp6rdaI0neCreuoKqSE9cN5lHnaA\r\nNWUW2HNmYb1ul3ZpLVCJlAw8hhxTWFaO3cZWsxa0xOEbafRk6wcRKDX7EbOi\r\n1vnS0cINdXF29T+u/wnrUG8CTv73iWKbnd2XtvPolOIUdOlEqEBpLcV5tcOr\r\nvZamYQOK0+GALG9hfi+Y4nLucnjV/OyZ77acBSiWWcIJs91VgrvlzLTYsHgl\r\nTsvX1Vy8Zdyly/n+c1O8bVayLHp2f7QHgX/1Ej6jCzdnx4Nlp6QPqk44RGHS\r\n4PHmZ8RQAvLzoylrSEF7gkAB8L5vYOnVB2Ga2ijahro3BVGZ+4fhoVtq+A0/\r\nwux7qmXobe/EwQ+ja/3h/pN+f8KlDTgm0091SDlK2fkF4U3Ubx2F2tllCyqp\r\nmGFU7Pih86R1i7y7xzLo76LJqCwW7YwEpdTGeZqrCRaJWuUb3mwyvFSTrval\r\nYyvxMBGmrB+3HjrZ87V4Z4VaxBSAqT8zy9o=\r\n=2JVf\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","module":"build/esm/index.js","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/esm/platform/index.js":"./build/esm/platform/browser/index.js","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"d2fb7061a87c48dc68acc384dc68821174323a32","scripts":{"docs":"typedoc","lint":"eslint src test --ext .ts","test":"nyc ts-mocha -p tsconfig.json test/**/*.test.ts","clean":"tsc --build --clean tsconfig.json tsconfig.esm.json","watch":"tsc --build --watch","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p .","compile":"tsc --build tsconfig.json tsconfig.esm.json","version":"node scripts/version-update.js","lint:fix":"eslint src test --ext .ts --fix","prewatch":"npm run version","docs:test":"linkinator docs/out --silent && linkinator docs/*.md *.md --markdown --silent","precompile":"npm run version","cycle-check":"dpdm --exit-code circular:1 src/index.ts","docs:deploy":"gh-pages --dist docs/out","test:browser":"nyc karma start --single-run","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ."},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js-api.git","type":"git"},"_npmVersion":"6.14.17","description":"Public API for OpenTelemetry","directories":{},"_nodeVersion":"14.20.0","publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"nyc":"15.1.0","dpdm":"3.7.1","karma":"5.2.3","mocha":"7.2.0","sinon":"11.1.1","eslint":"7.32.0","codecov":"3.8.2","typedoc":"0.21.2","webpack":"4.46.0","gh-pages":"3.2.0","ts-mocha":"8.0.0","ts-loader":"8.2.0","linkinator":"2.13.6","typescript":"4.3.5","@types/node":"14.17.4","karma-mocha":"2.0.1","@types/mocha":"8.2.2","@types/sinon":"10.0.2","karma-webpack":"4.0.2","lerna-changelog":"1.0.1","@types/webpack-env":"1.16.0","eslint-plugin-node":"11.1.0","karma-spec-reporter":"0.0.32","eslint-plugin-header":"3.1.1","karma-chrome-launcher":"3.1.0","@typescript-eslint/parser":"5.0.0","istanbul-instrumenter-loader":"3.0.1","@typescript-eslint/eslint-plugin":"5.0.0","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_1.2.0_1660850021932_0.3542051796664316","host":"s3://npm-registry-packages"}},"1.3.0":{"name":"@opentelemetry/api","version":"1.3.0","keywords":["opentelemetry","nodejs","browser","tracing","profiling","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@1.3.0","maintainers":[{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js/tree/main/api","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"27c6f776ac3c1c616651e506a89f438a0ed6a055","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-1.3.0.tgz","fileCount":411,"integrity":"sha512-YveTnGNsFFixTKJz09Oi4zYkiLT5af3WpZDu4aIUM7xX+2bHAkOJayFTVQd6zB8kkWPpbua4Ha6Ql00grdLlJQ==","signatures":[{"sig":"MEYCIQD8CUdBXgBkidMYp8gO+zbiJh81FHln8Wr5ltsbK1u8gQIhAJmJMrNmi/q6kmuoM2G0CP+j8RGXvPNVQaHUBB+ypkov","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":773758,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJja/LuACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmqz9w//exrZU19kw9PBP/k+dBsXNwRRwWvCHv+pJ7QaRPpQ9HdXJOX2\r\nNmbEcSKGGL9DBuK5gCq4jTxpAPDi+zzSIFOb6QPaKZXYF1SiQb6HmtpKyy0p\r\nj8TdTSENkF+vOK1vvFte9TVwdQ30fgtinJffuKipu/SdUBOsnXYhmWg8j2bK\r\nVghv0U7Dxf/C8gYQOdvdfE6fAWw5KikhR58JYviM3DZsY755II9cKqI5NkBb\r\nB4UTvKiNsVDDJIyqgQbspVWr38KNo72SkXsQTSsDqdafqMKLr2JW4SINSbGO\r\nVNqpVUK5yX2AUegXZ59wRARMVEiBx+WTSaiOO/SwkV9Gbge+ZAE2Y7vAyyRp\r\nAhCCnKN1vq9juXoAXQUsCurEvNpquTbnj17t8ANvkcMctBBKyja+0Yg/SI85\r\nFzEEMvO5GK61N4+wJTQadEmkI1HwfqeRESBXh2pawZFtLa56ryxg1kf5r6hE\r\nYhw19nu4mm1tlTVMzThXejsw+5s64VYyd+i7NR+BNInb8TMOHOYHlDrLj6DG\r\n25jSP3aa68BpoMm5mDY3m4evo5IElRZS4zWvG3ja6WIl1TecNH7m517Yp8Mp\r\nUtddN/jNO+0EsgCqXKeRkbe+THPyJT9itN9oizNYi8FCavZ39j7PM3eRz8pO\r\nheYkwpR+S3hw6yj3jQcur9mwtTc5Fh1aU8I=\r\n=a6Kw\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","module":"build/esm/index.js","readme":"\n---\n<p align=\"center\">\n  <strong>\n    <a href=\"https://open-telemetry.github.io/opentelemetry-js-api\">API Documentation<a/>\n    &nbsp;&nbsp;&bull;&nbsp;&nbsp;\n    <a href=\"https://github.com/open-telemetry/opentelemetry-js/discussions\">Getting In Touch (GitHub Discussions)<a/>\n  </strong>\n</p>\n\n<p align=\"center\">\n  <a href=\"https://github.com/open-telemetry/opentelemetry-js-api/releases\">\n    <img alt=\"GitHub release (latest by date including pre-releases)\" src=\"https://img.shields.io/github/v/release/open-telemetry/opentelemetry-js-api?include_prereleases&style=for-the-badge\">\n  </a>\n  <a href=\"https://codecov.io/gh/open-telemetry/opentelemetry-js-api/branch/main/\">\n    <img alt=\"Codecov Status\" src=\"https://img.shields.io/codecov/c/github/open-telemetry/opentelemetry-js-api?style=for-the-badge\">\n  </a>\n  <a href=\"https://github.com/open-telemetry/opentelemetry-js/blob/main/api/LICENSE\">\n    <img alt=\"license\" src=\"https://img.shields.io/badge/license-Apache_2.0-green.svg?style=for-the-badge\">\n  </a>\n  <br/>\n  <a href=\"https://github.com/open-telemetry/opentelemetry-js-api/actions/workflows/docs.yaml\">\n    <img alt=\"Build Status\" src=\"https://github.com/open-telemetry/opentelemetry-js-api/actions/workflows/test.yaml/badge.svg?branch=main\">\n  </a>\n  <a href=\"https://github.com/open-telemetry/opentelemetry-js-api/actions/workflows/test.yaml?query=branch%3Amain\">\n    <img alt=\"Build Status\" src=\"https://github.com/open-telemetry/opentelemetry-js-api/actions/workflows/docs.yaml/badge.svg\">\n  </a>\n</p>\n\n---\n\n# OpenTelemetry API for JavaScript\n\n[![NPM Published Version][npm-img]][npm-url]\n\nThis package provides everything needed to interact with the OpenTelemetry API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\nThe methods in this package perform no operations by default. This means they can be safely called by a library or end-user application whether there is an SDK registered or not. In order to generate and export telemetry data, you will also need an SDK such as the [OpenTelemetry JS SDK][opentelemetry-js].\n\n## Tracing Quick Start\n\n### You Will Need\n\n- An application you wish to instrument\n- [OpenTelemetry JS SDK][opentelemetry-js]\n- Node.js >=8.5.0 (14+ is preferred) or an ECMAScript 5+ compatible browser\n\n**Note:** ECMAScript 5+ compatibility is for this package only. Please refer to the documentation for the SDK you are using to determine its minimum ECMAScript version.\n\n**Note for library authors:** Only your end users will need an OpenTelemetry SDK. If you wish to support OpenTelemetry in your library, you only need to use the OpenTelemetry API. For more information, please read the [tracing documentation][docs-tracing].\n\n### Install Dependencies\n\n```sh\nnpm install @opentelemetry/api @opentelemetry/sdk-trace-base\n```\n\n### Trace Your Application\n\nIn order to get started with tracing, you will need to first register an SDK. The SDK you are using may provide a convenience method which calls the registration methods for you, but if you would like to call them directly they are documented here: [sdk registration methods][docs-sdk-registration].\n\nOnce you have registered an SDK, you can start and end spans. A simple example of basic SDK registration and tracing a simple operation is below. The example should export spans to the console once per second. For more information, see the [tracing documentation][docs-tracing].\n\n```javascript\nconst { trace }  = require(\"@opentelemetry/api\");\nconst { BasicTracerProvider, ConsoleSpanExporter, SimpleSpanProcessor }  = require(\"@opentelemetry/sdk-trace-base\");\n\n// Create and register an SDK\nconst provider = new BasicTracerProvider();\nprovider.addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporter()));\ntrace.setGlobalTracerProvider(provider);\n\n// Acquire a tracer from the global tracer provider which will be used to trace the application\nconst name = 'my-application-name';\nconst version = '0.1.0';\nconst tracer = trace.getTracer(name, version);\n\n// Trace your application by creating spans\nasync function operation() {\n  const span = tracer.startSpan(\"do operation\");\n\n  // mock some work by sleeping 1 second\n  await new Promise((resolve, reject) => {\n    setTimeout(resolve, 1000);\n  })\n\n  span.end();\n}\n\nasync function main() {\n  while (true) {\n    await operation();\n  }\n}\n\nmain();\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Upgrade Guidelines\n\n### 0.21.0 to 1.0.0\n\nNo breaking changes\n\n### 0.20.0 to 0.21.0\n\n- [#78](https://github.com/open-telemetry/opentelemetry-js-api/issues/78) `api.context.bind` arguments reversed and `context` is now a required argument.\n- [#46](https://github.com/open-telemetry/opentelemetry-js-api/issues/46) Noop classes and singletons are no longer exported. To create a noop span it is recommended to use `api.trace.wrapSpanContext` with `INVALID_SPAN_CONTEXT` instead of using the `NOOP_TRACER`.\n\n### 1.0.0-rc.3 to 0.20.0\n\n- Removing `TimedEvent` which was not part of spec\n- `HttpBaggage` renamed to `HttpBaggagePropagator`\n- [#45](https://github.com/open-telemetry/opentelemetry-js-api/pull/45) `Span#context` renamed to `Span#spanContext`\n- [#47](https://github.com/open-telemetry/opentelemetry-js-api/pull/47) `getSpan`/`setSpan`/`getSpanContext`/`setSpanContext` moved to `trace` namespace\n- [#55](https://github.com/open-telemetry/opentelemetry-js-api/pull/55) `getBaggage`/`setBaggage`/`createBaggage` moved to `propagation` namespace\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[opentelemetry-js]: https://github.com/open-telemetry/opentelemetry-js\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/api/LICENSE\n[license-image]: https://img.shields.io/badge/license-Apache_2.0-green.svg?style=flat\n[npm-url]: https://www.npmjs.com/package/@opentelemetry/api\n[npm-img]: https://badge.fury.io/js/%40opentelemetry%2Fapi.svg\n[docs-tracing]: https://github.com/open-telemetry/opentelemetry-js/blob/main/doc/tracing.md\n[docs-sdk-registration]: https://github.com/open-telemetry/opentelemetry-js/blob/main/doc/sdk-registration.md\n","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/esm/platform/index.js":"./build/esm/platform/browser/index.js","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"27c4f762948c9b8d693d5ce1c2df5aaa5b0e92ee","scripts":{"docs":"typedoc","lint":"eslint . --ext .ts","test":"nyc ts-mocha -p tsconfig.json 'test/**/*.test.ts'","clean":"tsc --build --clean","watch":"tsc --build --watch","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../","compile":"tsc --build tsconfig.json tsconfig.esm.json","version":"node ../scripts/version-update.js","lint:fix":"eslint . --ext .ts --fix","prewatch":"npm run precompile","docs:test":"linkinator docs/out --silent && linkinator docs/*.md *.md --markdown --silent","precompile":"lerna run version --scope $(npm pkg get name) --include-dependencies","cycle-check":"dpdm --exit-code circular:1 src/index.ts","docs:deploy":"gh-pages --dist docs/out","test:browser":"nyc karma start --single-run","peer-api-check":"node ../scripts/peer-api-check.js","test:webworker":"nyc karma start karma.worker.js --single-run","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../","codecov:webworker":"nyc report --reporter=json && codecov -f coverage/*.json -p ../"},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"8.1.2","description":"Public API for OpenTelemetry","directories":{},"sideEffects":false,"_nodeVersion":"14.18.1","publishConfig":{"access":"public"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"nyc":"15.1.0","dpdm":"3.10.0","karma":"6.3.16","memfs":"3.4.9","mocha":"10.0.0","sinon":"14.0.0","codecov":"3.8.3","unionfs":"4.4.0","webpack":"4.46.0","ts-mocha":"10.0.0","ts-loader":"8.4.0","typescript":"4.4.4","@types/node":"18.6.5","karma-mocha":"2.0.1","@types/mocha":"10.0.0","@types/sinon":"10.0.13","karma-webpack":"4.0.2","@types/webpack":"4.41.26","@types/webpack-env":"1.16.3","karma-spec-reporter":"0.0.32","karma-chrome-launcher":"3.1.0","karma-mocha-webworker":"1.3.0","istanbul-instrumenter-loader":"3.0.1","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_1.3.0_1668018926306_0.6542671449937483","host":"s3://npm-registry-packages"}},"1.4.0":{"name":"@opentelemetry/api","version":"1.4.0","keywords":["opentelemetry","nodejs","browser","tracing","profiling","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@1.4.0","maintainers":[{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js/tree/main/api","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"2c91791a9ba6ca0a0f4aaac5e45d58df13639ac8","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-1.4.0.tgz","fileCount":411,"integrity":"sha512-IgMK9i3sFGNUqPMbjABm0G26g0QCKCUBfglhQ7rQq6WcxbKfEHRcmwsoER4hZcuYqJgkYn2OeuoJIv7Jsftp7g==","signatures":[{"sig":"MEUCIQDzaltzlePvwfUMmb5B/niIOf8gficyyY1jK6Ryi5LHhgIgCI09A2uiKcTDL4sPwiODox7eNceH9hYVII/kwNEY9jA=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":777562,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjvy4iACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpxVA/9G6yhWyPFHrp5F7e5PG1Wzg9OLbW3eB/TBxSNCZkPkfRF7gE1\r\nqgv/mNYEjx21AKWN02FqhJ2ogF066NrLy2DWivBe51xj23bQjBbytPTFlRP/\r\nbRpyJtGZLnH9URmOKgDCW2yTLWECjY4wOoPK+jTlUdyY4xsa6pg0Pa5SPWem\r\n7ZVk4RsjWK/DnRI4BqWHSGXXEG2in5maWJxxPzFLq67EEt81+Gxiwj6xzWAr\r\nXRBvioNz7DjduykYPGkcvnOxKUJtJNBH+nMKNJqqZ+2tgNBtjL+XAc+nfAWx\r\nsn8RKHjaquiRVOgWraCcjlocu8tQ+hr7Eu/xE61uze6yUent/1BaNtrIon96\r\nXNonHYblW6XaSiPw1Q3zxcZEfa+yuvncOmBdFL8QA1Z5gm48piBStgyT9XH5\r\nMmG+s3CeLHSwE2l/zKgDFxv1tHVh4crP7AXa7LRPgbBv/ITnUpLC+fBxjJXD\r\n3yyrs+DbrggH0PZX9b7qVPxPlakcScf8tK36yovR5NqVP2PIxu9dxbk3FViw\r\n5swpDUYZ5wbyvUerR+I8Fj559bbAxVISHXGfiDi0vTWpU+c0xJoAOZRvwLCc\r\n/e+bhh8fSx1aHePpQsaN4Q0MnZgOJ9A0m0sW42/SUH1LOh6Ng1wFgq+k3dvI\r\nhAP7fvZsT8k8TxPf54RRw83ctxIKFRexXzQ=\r\n=EXfN\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","module":"build/esm/index.js","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/esm/platform/index.js":"./build/esm/platform/browser/index.js","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"08f597f3a3d71a4852b0afbba120af15ca038121","scripts":{"docs":"typedoc","lint":"eslint . --ext .ts","test":"nyc ts-mocha -p tsconfig.json 'test/**/*.test.ts'","clean":"tsc --build --clean tsconfig.json tsconfig.esm.json tsconfig.esnext.json","watch":"tsc --build --watch tsconfig.json tsconfig.esm.json tsconfig.esnext.json","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../","compile":"tsc --build tsconfig.json tsconfig.esm.json tsconfig.esnext.json","version":"node ../scripts/version-update.js","lint:fix":"eslint . --ext .ts --fix","prewatch":"npm run precompile","docs:test":"linkinator docs/out --silent && linkinator docs/*.md *.md --markdown --silent","precompile":"lerna run version --scope $(npm pkg get name) --include-dependencies","cycle-check":"dpdm --exit-code circular:1 src/index.ts","docs:deploy":"gh-pages --dist docs/out","test:browser":"nyc karma start --single-run","peer-api-check":"node ../scripts/peer-api-check.js","test:webworker":"nyc karma start karma.worker.js --single-run","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../","codecov:webworker":"nyc report --reporter=json && codecov -f coverage/*.json -p ../"},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"lerna/6.0.3/node@v14.18.1+x64 (darwin)","description":"Public API for OpenTelemetry","directories":{},"sideEffects":false,"_nodeVersion":"14.18.1","publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"nyc":"15.1.0","dpdm":"3.10.0","karma":"6.3.16","memfs":"3.4.9","mocha":"10.0.0","sinon":"15.0.0","codecov":"3.8.3","unionfs":"4.4.0","webpack":"4.46.0","ts-mocha":"10.0.0","ts-loader":"8.4.0","typescript":"4.4.4","@types/node":"18.6.5","karma-mocha":"2.0.1","@types/mocha":"10.0.0","@types/sinon":"10.0.13","karma-webpack":"4.0.2","@types/webpack":"4.41.26","@types/webpack-env":"1.16.3","karma-spec-reporter":"0.0.32","karma-chrome-launcher":"3.1.0","karma-mocha-webworker":"1.3.0","istanbul-instrumenter-loader":"3.0.1","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_1.4.0_1673473570251_0.04609694096080963","host":"s3://npm-registry-packages"}},"1.4.1":{"name":"@opentelemetry/api","version":"1.4.1","keywords":["opentelemetry","nodejs","browser","tracing","profiling","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@1.4.1","maintainers":[{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js/tree/main/api","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"ff22eb2e5d476fbc2450a196e40dd243cc20c28f","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-1.4.1.tgz","fileCount":411,"integrity":"sha512-O2yRJce1GOc6PAy3QxFM4NzFiWzvScDC1/5ihYBL6BUEVdq0XMWN01sppE+H6bBXbaFYipjwFLEWLg5PaSOThA==","signatures":[{"sig":"MEQCIGT5pnxH/gHoj4lSFF/LYoK5dpTtksbtDAAemi+bpOECAiAhxBThmaYqEv3rTBze2JWhZjD+TPkokIBqHf/LalWt5A==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":780322,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkD0b7ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmp9Pw//bgiXhyvN22UV4wtA3hk6syJD5/SM/0OqmJIs8zy2OtvtdAt4\r\nWtS82IKN7efWXUYHuFggizBTKoP7RvO/urzQ4W9eNNy75O30aCmNxjhYvtPD\r\ns8szpUwbOaFqoIlQlJdfagkJGOArdikUVf8eDw4MQ0E4cpYsBJ/XCb34vEis\r\nzQLb8bjKxe6LUdHoX+uPaHS5+uNqXrUOJl0S3n6yf4qHa+uDLAZEbPboj4ow\r\n+CZxkRpfgsBqeQWkBCMam/8HORTdP/pnzTtd2D7dFxnw6d0eZLZ81NSMBTZG\r\nYfKr955fobrjDYDtdR5tiGEhQHePJPrBc/5pQNEItXGPfQ7Ha5V38I8FJ8YN\r\no0JOAlalfRdDFOQl+hZML9hNsZg5tP5v1uipSRWu8fgdSd9LVSQrAHrw6oPP\r\nlL0cmJ5eSXzA0rOHHSmvtZmZ410ZR9x0mtE9K2reHJFCyqNs2XueoFyXmqgJ\r\nWSW95OyO+wPSaZeVBF1NmyfICgcAeo6xowmXzOX3GClkxxAESFWzaFSsPLZm\r\nikt3rQolfBK8Y0ygAcFRpERAkR16qitIswe/1MLnX7PTb+c/iVQ3u46EVrpx\r\nvTZcAV009eF8C+aPJS7WSizcUADDXEY3hPlWfKhWtPqH2o2TCiiPE03lA3oD\r\n5PIT9eVFkC/wk/AhQjcHUxEXqDMMXlHL9C4=\r\n=7zw7\r\n-----END PGP SIGNATURE-----\r\n"},"main":"build/src/index.js","types":"build/src/index.d.ts","module":"build/esm/index.js","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/esm/platform/index.js":"./build/esm/platform/browser/index.js","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"56e6b1bb890f844b8963a146780d0b9cfa8abd0d","scripts":{"docs":"typedoc","lint":"eslint . --ext .ts","test":"nyc ts-mocha -p tsconfig.json 'test/**/*.test.ts'","clean":"tsc --build --clean tsconfig.json tsconfig.esm.json tsconfig.esnext.json","watch":"tsc --build --watch tsconfig.json tsconfig.esm.json tsconfig.esnext.json","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../","compile":"tsc --build tsconfig.json tsconfig.esm.json tsconfig.esnext.json","version":"node ../scripts/version-update.js","lint:fix":"eslint . --ext .ts --fix","prewatch":"npm run precompile","docs:test":"linkinator docs/out --silent && linkinator docs/*.md *.md --markdown --silent","precompile":"lerna run version --scope $(npm pkg get name) --include-dependencies","cycle-check":"dpdm --exit-code circular:1 src/index.ts","docs:deploy":"gh-pages --dist docs/out","test:browser":"nyc karma start --single-run","peer-api-check":"node ../scripts/peer-api-check.js","test:webworker":"nyc karma start karma.worker.js --single-run","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../","codecov:webworker":"nyc report --reporter=json && codecov -f coverage/*.json -p ../"},"_npmUser":{"name":"dyladan","email":"dyladan@gmail.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"lerna/6.0.3/node@v14.18.1+x64 (darwin)","description":"Public API for OpenTelemetry","directories":{},"sideEffects":false,"_nodeVersion":"14.18.1","publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"nyc":"15.1.0","dpdm":"3.10.0","karma":"6.3.16","memfs":"3.4.9","mocha":"10.0.0","sinon":"15.0.0","codecov":"3.8.3","unionfs":"4.4.0","webpack":"4.46.0","ts-mocha":"10.0.0","ts-loader":"8.4.0","typescript":"4.4.4","@types/node":"18.6.5","karma-mocha":"2.0.1","@types/mocha":"10.0.0","@types/sinon":"10.0.13","karma-webpack":"4.0.2","@types/webpack":"4.41.26","@types/webpack-env":"1.16.3","karma-spec-reporter":"0.0.32","karma-chrome-launcher":"3.1.0","karma-mocha-webworker":"1.3.0","istanbul-instrumenter-loader":"3.0.1","karma-coverage-istanbul-reporter":"3.0.3"},"_npmOperationalInternal":{"tmp":"tmp/api_1.4.1_1678722811286_0.7216115275740891","host":"s3://npm-registry-packages"}},"1.5.0":{"name":"@opentelemetry/api","version":"1.5.0","keywords":["opentelemetry","nodejs","browser","tracing","profiling","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@1.5.0","maintainers":[{"name":"pichlermarc","email":"marc.pichler@dynatrace.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js/tree/main/api","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"4ff2709035a9896ec1aa8f5353ba2277737cae5d","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-1.5.0.tgz","fileCount":411,"integrity":"sha512-636km3y3pVyJldKGp9qM+lPvxuOvhThUED9cHNPsERkp+APbdtCtj0sALW+mZsbQqnqQkNRHqoGw/Uc82UP6fQ==","signatures":[{"sig":"MEYCIQDxDkiDAocHnmMuctR3QhqFxZlJ1HnrZYy/kztPaTsSNAIhALrZw8K0AeJjLLwTsrERbt926cTC5h8txyLJY1fbiMNt","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":782488},"main":"build/src/index.js","types":"build/src/index.d.ts","module":"build/esm/index.js","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/esm/platform/index.js":"./build/esm/platform/browser/index.js","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"5fcd8cf136e2235903dde3df9ba03ced594f0e95","scripts":{"docs":"typedoc","lint":"eslint . --ext .ts","test":"nyc ts-mocha -p tsconfig.json 'test/**/*.test.ts'","clean":"tsc --build --clean tsconfig.json tsconfig.esm.json tsconfig.esnext.json","watch":"tsc --build --watch tsconfig.json tsconfig.esm.json tsconfig.esnext.json","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../","compile":"tsc --build tsconfig.json tsconfig.esm.json tsconfig.esnext.json","version":"node ../scripts/version-update.js","lint:fix":"eslint . --ext .ts --fix","prewatch":"npm run precompile","test:eol":"ts-mocha -p tsconfig.json 'test/**/*.test.ts'","docs:test":"linkinator docs/out --silent && linkinator docs/*.md *.md --markdown --silent","precompile":"cross-var lerna run version --scope $npm_package_name --include-dependencies","cycle-check":"dpdm --exit-code circular:1 src/index.ts","docs:deploy":"gh-pages --dist docs/out","test:browser":"karma start --single-run","peer-api-check":"node ../scripts/peer-api-check.js","test:webworker":"karma start karma.worker.js --single-run","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../","codecov:webworker":"nyc report --reporter=json && codecov -f coverage/*.json -p ../"},"_npmUser":{"name":"pichlermarc","email":"marc.pichler@dynatrace.com"},"deprecated":"Version 1.5.0 of @opentelemetry/api mistakenly contained a breaking change for some users. Please update to 1.6.0 or later.","repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"lerna/7.1.5/node@v18.12.1+x64 (linux)","description":"Public API for OpenTelemetry","directories":{},"sideEffects":false,"_nodeVersion":"18.12.1","publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"nyc":"15.1.0","dpdm":"3.13.1","karma":"6.4.2","lerna":"7.1.5","memfs":"3.5.3","mocha":"10.2.0","sinon":"15.1.2","codecov":"3.8.3","unionfs":"4.5.1","webpack":"4.46.0","ts-mocha":"10.0.0","cross-var":"1.1.0","ts-loader":"8.4.0","typescript":"4.4.4","@types/node":"18.6.5","karma-mocha":"2.0.1","@types/mocha":"10.0.1","@types/sinon":"10.0.16","karma-webpack":"4.0.2","@types/webpack":"4.41.33","karma-coverage":"2.2.1","@types/webpack-env":"1.16.3","karma-spec-reporter":"0.0.36","babel-plugin-istanbul":"6.1.1","karma-chrome-launcher":"3.1.0","karma-mocha-webworker":"1.3.0"},"_npmOperationalInternal":{"tmp":"tmp/api_1.5.0_1694434462548_0.5315848607176739","host":"s3://npm-registry-packages"}},"1.6.0":{"name":"@opentelemetry/api","version":"1.6.0","keywords":["opentelemetry","nodejs","browser","tracing","profiling","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@1.6.0","maintainers":[{"name":"pichlermarc","email":"marc.pichler@dynatrace.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js/tree/main/api","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"de2c6823203d6f319511898bb5de7e70f5267e19","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-1.6.0.tgz","fileCount":411,"integrity":"sha512-OWlrQAnWn9577PhVgqjUvMr1pg57Bc4jv0iL4w0PRuOSRvq67rvHW9Ie/dZVMvCzhSCB+UxhcY/PmCmFj33Q+g==","signatures":[{"sig":"MEUCIQCO9WnTvxA6MQjm3TXCujesARChZYWOdfcGpAXmfl6xNQIgJln63Qa/062urWUpgGiBATq39nrzYlEVpBHfpcDx354=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":780443},"main":"build/src/index.js","types":"build/src/index.d.ts","module":"build/esm/index.js","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/esm/platform/index.js":"./build/esm/platform/browser/index.js","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"faf939c77591f709afbc23fadbe629c9d3607ef6","scripts":{"docs":"typedoc","lint":"eslint . --ext .ts","test":"nyc ts-mocha -p tsconfig.json 'test/**/*.test.ts'","clean":"tsc --build --clean tsconfig.json tsconfig.esm.json tsconfig.esnext.json","watch":"tsc --build --watch tsconfig.json tsconfig.esm.json tsconfig.esnext.json","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../","compile":"tsc --build tsconfig.json tsconfig.esm.json tsconfig.esnext.json","version":"node ../scripts/version-update.js","lint:fix":"eslint . --ext .ts --fix","prewatch":"npm run precompile","test:eol":"ts-mocha -p tsconfig.json 'test/**/*.test.ts'","docs:test":"linkinator docs/out --silent && linkinator docs/*.md *.md --markdown --silent","precompile":"cross-var lerna run version --scope $npm_package_name --include-dependencies","cycle-check":"dpdm --exit-code circular:1 src/index.ts","docs:deploy":"gh-pages --dist docs/out","test:browser":"karma start --single-run","peer-api-check":"node ../scripts/peer-api-check.js","test:webworker":"karma start karma.worker.js --single-run","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../","codecov:webworker":"nyc report --reporter=json && codecov -f coverage/*.json -p ../"},"_npmUser":{"name":"pichlermarc","email":"marc.pichler@dynatrace.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"lerna/7.1.5/node@v18.12.1+x64 (linux)","description":"Public API for OpenTelemetry","directories":{},"sideEffects":false,"_nodeVersion":"18.12.1","publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"nyc":"15.1.0","dpdm":"3.13.1","karma":"6.4.2","lerna":"7.1.5","memfs":"3.5.3","mocha":"10.2.0","sinon":"15.1.2","codecov":"3.8.3","unionfs":"4.5.1","webpack":"4.46.0","ts-mocha":"10.0.0","cross-var":"1.1.0","ts-loader":"8.4.0","typescript":"4.4.4","@types/node":"18.6.5","karma-mocha":"2.0.1","@types/mocha":"10.0.1","@types/sinon":"10.0.16","karma-webpack":"4.0.2","@types/webpack":"4.41.33","karma-coverage":"2.2.1","@types/webpack-env":"1.16.3","karma-spec-reporter":"0.0.36","babel-plugin-istanbul":"6.1.1","karma-chrome-launcher":"3.1.0","karma-mocha-webworker":"1.3.0"},"_npmOperationalInternal":{"tmp":"tmp/api_1.6.0_1694524345231_0.5100705712274942","host":"s3://npm-registry-packages"}},"1.7.0":{"name":"@opentelemetry/api","version":"1.7.0","keywords":["opentelemetry","nodejs","browser","tracing","profiling","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@1.7.0","maintainers":[{"name":"pichlermarc","email":"marc.pichler@dynatrace.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js/tree/main/api","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"b139c81999c23e3c8d3c0a7234480e945920fc40","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-1.7.0.tgz","fileCount":615,"integrity":"sha512-AdY5wvN0P2vXBi3b29hxZgSFvdhdxPB9+f0B6s//P9Q8nibRWeA3cHm8UmLpio9ABigkVHJ5NMPk+Mz8VCCyrw==","signatures":[{"sig":"MEUCIFWqxhqKSeEezKywFrho/r93NXg8myaF1+B4xQHQsUymAiEA8zPBvQG5638UKzLCh/tacBb7wYVxSCdVX1jm7HXB9hc=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":1146473},"main":"build/src/index.js","types":"build/src/index.d.ts","esnext":"build/esnext/index.js","module":"build/esm/index.js","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/esm/platform/index.js":"./build/esm/platform/browser/index.js","./build/src/platform/index.js":"./build/src/platform/browser/index.js","./build/esnext/platform/index.js":"./build/esnext/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"gitHead":"73b446688f10fd8dc4cf403a085f0a39070df7b4","scripts":{"docs":"typedoc","lint":"eslint . --ext .ts","test":"nyc ts-mocha -p tsconfig.json 'test/**/*.test.ts'","clean":"tsc --build --clean tsconfig.json tsconfig.esm.json tsconfig.esnext.json","watch":"tsc --build --watch tsconfig.json tsconfig.esm.json tsconfig.esnext.json","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../","compile":"tsc --build tsconfig.json tsconfig.esm.json tsconfig.esnext.json","version":"node ../scripts/version-update.js","lint:fix":"eslint . --ext .ts --fix","prewatch":"npm run precompile","test:eol":"ts-mocha -p tsconfig.json 'test/**/*.test.ts'","docs:test":"linkinator docs/out --silent && linkinator docs/*.md *.md --markdown --silent","precompile":"cross-var lerna run version --scope $npm_package_name --include-dependencies","cycle-check":"dpdm --exit-code circular:1 src/index.ts","docs:deploy":"gh-pages --dist docs/out","test:browser":"karma start --single-run","peer-api-check":"node ../scripts/peer-api-check.js","test:webworker":"karma start karma.worker.js --single-run","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../","codecov:webworker":"nyc report --reporter=json && codecov -f coverage/*.json -p ../"},"_npmUser":{"name":"pichlermarc","email":"marc.pichler@dynatrace.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"lerna/6.6.2/node@v18.18.2+x64 (linux)","description":"Public API for OpenTelemetry","directories":{},"sideEffects":false,"_nodeVersion":"18.18.2","publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"nyc":"15.1.0","dpdm":"3.13.1","karma":"6.4.2","lerna":"6.6.2","memfs":"3.5.3","mocha":"10.2.0","sinon":"15.1.2","codecov":"3.8.3","unionfs":"4.5.1","webpack":"4.46.0","ts-mocha":"10.0.0","cross-var":"1.1.0","ts-loader":"8.4.0","typescript":"4.4.4","@types/node":"18.6.5","karma-mocha":"2.0.1","@types/mocha":"10.0.3","@types/sinon":"10.0.20","karma-webpack":"4.0.2","@types/webpack":"4.41.35","karma-coverage":"2.2.1","@types/webpack-env":"1.16.3","karma-spec-reporter":"0.0.36","babel-plugin-istanbul":"6.1.1","karma-chrome-launcher":"3.1.0","karma-mocha-webworker":"1.3.0"},"_npmOperationalInternal":{"tmp":"tmp/api_1.7.0_1699353880416_0.3872071570298008","host":"s3://npm-registry-packages"}},"1.8.0":{"name":"@opentelemetry/api","version":"1.8.0","keywords":["opentelemetry","nodejs","browser","tracing","profiling","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","_id":"@opentelemetry/api@1.8.0","maintainers":[{"name":"pichlermarc","email":"marc.pichler@dynatrace.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"}],"homepage":"https://github.com/open-telemetry/opentelemetry-js/tree/main/api","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"dist":{"shasum":"5aa7abb48f23f693068ed2999ae627d2f7d902ec","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-1.8.0.tgz","fileCount":642,"integrity":"sha512-I/s6F7yKUDdtMsoBWXJe8Qz40Tui5vsuKCWJEWVL+5q9sSWRzzx6v2KeNsOBEwd94j0eWkpWCH4yB6rZg9Mf0w==","signatures":[{"sig":"MEQCIBWUxegCVK8RYSQyADGNtLgr761+qLVha4WzG5CugornAiB4xtg6ge+jo7cCJSjJl5IaQ+3MaQWogD/iOVZTLeC3Lg==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":1206276},"main":"build/src/index.js","types":"build/src/index.d.ts","esnext":"build/esnext/index.js","module":"build/esm/index.js","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/esm/platform/index.js":"./build/esm/platform/browser/index.js","./build/src/platform/index.js":"./build/src/platform/browser/index.js","./build/esnext/platform/index.js":"./build/esnext/platform/browser/index.js"},"engines":{"node":">=8.0.0"},"exports":{".":{"types":"./build/src/index.d.ts","esnext":"./build/esnext/index.js","module":"./build/esm/index.js","default":"./build/src/index.js"},"./experimental":{"types":"./build/src/experimental/index.d.ts","esnext":"./build/esnext/experimental/index.js","module":"./build/esm/experimental/index.js","default":"./build/src/experimental/index.js"}},"gitHead":"7be35c7845e206b27b682e8ce1cee850b09cec04","scripts":{"docs":"typedoc","lint":"eslint . --ext .ts","test":"nyc ts-mocha -p tsconfig.json 'test/**/*.test.ts'","clean":"tsc --build --clean tsconfig.json tsconfig.esm.json tsconfig.esnext.json","watch":"tsc --build --watch tsconfig.json tsconfig.esm.json tsconfig.esnext.json","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../","compile":"tsc --build tsconfig.json tsconfig.esm.json tsconfig.esnext.json","version":"node ../scripts/version-update.js","lint:fix":"eslint . --ext .ts --fix","prewatch":"npm run precompile","test:eol":"ts-mocha -p tsconfig.json 'test/**/*.test.ts'","docs:test":"linkinator docs/out --silent && linkinator docs/*.md *.md --markdown --silent","precompile":"cross-var lerna run version --scope $npm_package_name --include-dependencies","cycle-check":"dpdm --exit-code circular:1 src/index.ts","docs:deploy":"gh-pages --dist docs/out","test:browser":"karma start --single-run","peer-api-check":"node ../scripts/peer-api-check.js","test:webworker":"karma start karma.worker.js --single-run","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../","codecov:webworker":"nyc report --reporter=json && codecov -f coverage/*.json -p ../"},"_npmUser":{"name":"pichlermarc","email":"marc.pichler@dynatrace.com"},"repository":{"url":"git+https://github.com/open-telemetry/opentelemetry-js.git","type":"git"},"_npmVersion":"lerna/6.6.2/node@v18.19.0+x64 (linux)","description":"Public API for OpenTelemetry","directories":{},"sideEffects":false,"_nodeVersion":"18.19.0","publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"nyc":"15.1.0","dpdm":"3.13.1","karma":"6.4.2","lerna":"6.6.2","memfs":"3.5.3","mocha":"10.2.0","sinon":"15.1.2","codecov":"3.8.3","unionfs":"4.5.1","webpack":"5.89.0","ts-mocha":"10.0.0","cross-var":"1.1.0","ts-loader":"8.4.0","typescript":"4.4.4","@types/node":"18.6.5","karma-mocha":"2.0.1","@types/mocha":"10.0.6","@types/sinon":"10.0.20","karma-webpack":"4.0.2","@types/webpack":"5.28.5","karma-coverage":"2.2.1","@types/webpack-env":"1.16.3","karma-spec-reporter":"0.0.36","babel-plugin-istanbul":"6.1.1","karma-chrome-launcher":"3.1.0","karma-mocha-webworker":"1.3.0"},"_npmOperationalInternal":{"tmp":"tmp/api_1.8.0_1709198284897_0.4745281152459706","host":"s3://npm-registry-packages"}},"1.9.0":{"name":"@opentelemetry/api","version":"1.9.0","description":"Public API for OpenTelemetry","main":"build/src/index.js","module":"build/esm/index.js","esnext":"build/esnext/index.js","types":"build/src/index.d.ts","browser":{"./src/platform/index.ts":"./src/platform/browser/index.ts","./build/esm/platform/index.js":"./build/esm/platform/browser/index.js","./build/esnext/platform/index.js":"./build/esnext/platform/browser/index.js","./build/src/platform/index.js":"./build/src/platform/browser/index.js"},"exports":{".":{"module":"./build/esm/index.js","esnext":"./build/esnext/index.js","types":"./build/src/index.d.ts","default":"./build/src/index.js"},"./experimental":{"module":"./build/esm/experimental/index.js","esnext":"./build/esnext/experimental/index.js","types":"./build/src/experimental/index.d.ts","default":"./build/src/experimental/index.js"}},"repository":{"type":"git","url":"git+https://github.com/open-telemetry/opentelemetry-js.git"},"scripts":{"clean":"tsc --build --clean tsconfig.json tsconfig.esm.json tsconfig.esnext.json","codecov:browser":"nyc report --reporter=json && codecov -f coverage/*.json -p ../","codecov:webworker":"nyc report --reporter=json && codecov -f coverage/*.json -p ../","codecov":"nyc report --reporter=json && codecov -f coverage/*.json -p ../","precompile":"cross-var lerna run version --scope $npm_package_name --include-dependencies","compile":"tsc --build tsconfig.json tsconfig.esm.json tsconfig.esnext.json","docs":"typedoc","docs:deploy":"gh-pages --dist docs/out","docs:test":"linkinator docs/out --silent && linkinator docs/*.md *.md --markdown --silent","lint:fix":"eslint . --ext .ts --fix","lint":"eslint . --ext .ts","test:browser":"karma start --single-run","test":"nyc ts-mocha -p tsconfig.json 'test/**/*.test.ts'","test:eol":"ts-mocha -p tsconfig.json 'test/**/*.test.ts'","test:webworker":"karma start karma.worker.js --single-run","cycle-check":"dpdm --exit-code circular:1 src/index.ts","version":"node ../scripts/version-update.js","prewatch":"npm run precompile","watch":"tsc --build --watch tsconfig.json tsconfig.esm.json tsconfig.esnext.json","peer-api-check":"node ../scripts/peer-api-check.js"},"keywords":["opentelemetry","nodejs","browser","tracing","profiling","stats","monitoring"],"author":{"name":"OpenTelemetry Authors"},"license":"Apache-2.0","engines":{"node":">=8.0.0"},"publishConfig":{"access":"public"},"devDependencies":{"@types/mocha":"10.0.6","@types/node":"18.6.5","@types/sinon":"17.0.3","@types/webpack":"5.28.5","@types/webpack-env":"1.16.3","babel-plugin-istanbul":"6.1.1","codecov":"3.8.3","cross-var":"1.1.0","dpdm":"3.13.1","karma":"6.4.3","karma-chrome-launcher":"3.1.0","karma-coverage":"2.2.1","karma-mocha":"2.0.1","karma-mocha-webworker":"1.3.0","karma-spec-reporter":"0.0.36","karma-webpack":"5.0.1","lerna":"6.6.2","memfs":"3.5.3","mocha":"10.2.0","nyc":"15.1.0","sinon":"15.1.2","ts-loader":"9.5.1","ts-mocha":"10.0.0","typescript":"4.4.4","unionfs":"4.5.4","webpack":"5.89.0"},"homepage":"https://github.com/open-telemetry/opentelemetry-js/tree/main/api","sideEffects":false,"gitHead":"c4d3351b6b3f5593c8d7cbfec97b45cea9fe1511","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"_id":"@opentelemetry/api@1.9.0","_nodeVersion":"18.19.0","_npmVersion":"lerna/6.6.2/node@v18.19.0+x64 (linux)","dist":{"integrity":"sha512-3giAOQvZiH5F9bMlMiv8+GSPMeqg0dbaeo58/0SlA9sxSqZhnUtxzX9/2FzyhS9sWQf5S0GJE0AKBrFqjpeYcg==","shasum":"d03eba68273dc0f7509e2a3d5cba21eae10379fe","tarball":"https://registry.npmjs.org/@opentelemetry/api/-/api-1.9.0.tgz","fileCount":642,"unpackedSize":1218213,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD5JhjunJ5QH3ifhIkfIf7mUTMZo59URC45qn9JaWvmawIhAJtiHfG88EtN6LBF70xACXxS71Sw7cISXhK9JYrMVLGi"}]},"_npmUser":{"name":"pichlermarc","email":"marc.pichler@dynatrace.com"},"directories":{},"maintainers":[{"name":"pichlermarc","email":"marc.pichler@dynatrace.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/api_1.9.0_1717607724827_0.8780155939505339"},"_hasShrinkwrap":false}},"time":{"created":"2020-02-05T23:02:44.976Z","modified":"2024-06-05T17:15:25.222Z","0.4.0":"2020-02-05T23:02:45.340Z","0.5.0":"2020-03-16T22:02:14.091Z","0.5.1":"2020-03-20T00:42:45.891Z","0.5.2":"2020-03-27T18:03:53.660Z","0.6.0":"2020-04-02T17:24:58.636Z","0.6.1":"2020-04-08T18:37:25.733Z","0.7.0":"2020-04-24T18:13:59.797Z","0.8.0":"2020-05-12T16:35:56.062Z","0.8.1":"2020-05-18T19:37:27.242Z","0.8.2":"2020-05-21T19:29:48.190Z","0.8.3":"2020-05-28T20:19:26.388Z","0.9.0":"2020-06-18T21:22:44.283Z","0.10.0":"2020-07-27T20:59:01.199Z","0.10.1":"2020-07-28T15:12:26.157Z","0.10.2":"2020-08-03T23:25:31.312Z","0.10.3-canary.0":"2020-08-07T16:47:12.678Z","0.10.3-alpha.34":"2020-08-24T16:44:18.427Z","0.10.3-alpha.35":"2020-08-24T22:45:12.368Z","0.10.3-alpha.41":"2020-08-27T16:08:29.919Z","0.11.1-alpha.48":"2020-09-01T19:24:08.534Z","0.11.0":"2020-09-01T19:32:13.111Z","0.11.1-alpha.15":"2020-09-21T03:29:48.431Z","0.11.1-alpha.35":"2020-09-30T12:22:02.007Z","0.11.1-alpha.36":"2020-09-30T12:38:30.482Z","0.11.1-alpha.44":"2020-10-07T19:54:51.348Z","0.11.1-alpha.53":"2020-10-19T11:48:00.073Z","0.12.1-alpha.54":"2020-10-19T12:49:47.053Z","0.12.0":"2020-10-19T12:53:38.822Z","0.12.1-alpha.7":"2020-10-26T21:11:54.261Z","0.13.0":"2020-12-04T21:26:13.852Z","0.14.0":"2020-12-17T20:52:45.526Z","0.15.0":"2021-01-21T22:19:53.305Z","0.16.0":"2021-02-01T22:33:16.096Z","0.16.1-alpha.11":"2021-02-08T16:17:43.097Z","0.16.1-alpha.14":"2021-02-10T16:05:46.188Z","0.16.1-alpha.15":"2021-02-10T22:17:54.101Z","0.16.1-alpha.20":"2021-02-17T20:51:41.455Z","0.17.0":"2021-02-17T21:15:57.208Z","0.17.1-alpha.21":"2021-02-17T21:16:33.009Z","0.18.0":"2021-02-26T20:57:03.958Z","0.18.1":"2021-03-05T20:35:52.779Z","1.0.0-rc.0":"2021-03-12T17:13:29.772Z","1.0.0-rc.1":"2021-05-18T19:04:51.277Z","1.0.0-rc.2":"2021-05-19T12:17:49.656Z","1.0.0-rc.3":"2021-05-19T13:39:19.389Z","0.19.0":"2021-05-19T14:11:20.752Z","0.20.0":"2021-05-24T12:04:37.904Z","0.21.0":"2021-06-04T17:11:07.532Z","1.0.0":"2021-06-10T15:52:40.045Z","1.0.1":"2021-06-25T20:39:59.941Z","1.0.2":"2021-07-29T12:41:03.206Z","1.0.3":"2021-08-31T11:59:36.249Z","1.0.4":"2021-12-22T16:03:20.539Z","1.1.0":"2022-01-27T16:28:17.262Z","1.2.0":"2022-08-18T19:13:42.093Z","1.3.0":"2022-11-09T18:35:26.526Z","1.4.0":"2023-01-11T21:46:10.460Z","1.4.1":"2023-03-13T15:53:31.460Z","1.5.0":"2023-09-11T12:14:22.702Z","1.6.0":"2023-09-12T13:12:25.750Z","1.7.0":"2023-11-07T10:44:40.760Z","1.8.0":"2024-02-29T09:18:05.040Z","1.9.0":"2024-06-05T17:15:25.003Z"},"maintainers":[{"name":"pichlermarc","email":"marc.pichler@dynatrace.com"},{"name":"bogdandrutu","email":"bogdandrutu@gmail.com"},{"name":"dyladan","email":"dyladan@gmail.com"}],"author":{"name":"OpenTelemetry Authors"},"repository":{"type":"git","url":"git+https://github.com/open-telemetry/opentelemetry-js.git"},"keywords":["opentelemetry","nodejs","browser","tracing","profiling","stats","monitoring"],"license":"Apache-2.0","homepage":"https://github.com/open-telemetry/opentelemetry-js/tree/main/api","bugs":{"url":"https://github.com/open-telemetry/opentelemetry-js/issues"},"readme":"# OpenTelemetry API for JavaScript\n\n<p align=\"center\">\n<strong>\n<a href=\"https://open-telemetry.github.io/opentelemetry-js/modules/_opentelemetry_api.html\">API Reference</a>\n&nbsp;&nbsp;&bull;&nbsp;&nbsp;\n<a href=\"https://opentelemetry.io/docs/instrumentation/js/\">Documentation</a>\n</br>\n<a href=\"https://github.com/open-telemetry/opentelemetry-js/releases\">\n    <img alt=\"NPM Release\" src=\"https://img.shields.io/npm/v/@opentelemetry/api?color=brightgreen&logo=data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAAXNSR0IArs4c6QAAAIRlWElmTU0AKgAAAAgABQESAAMAAAABAAEAAAEaAAUAAAABAAAASgEbAAUAAAABAAAAUgEoAAMAAAABAAIAAIdpAAQAAAABAAAAWgAAAAAAAACQAAAAAQAAAJAAAAABAAOgAQADAAAAAQABAACgAgAEAAAAAQAAABigAwAEAAAAAQAAABgAAAAA8A2UOAAAAAlwSFlzAAAWJQAAFiUBSVIk8AAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDUuNC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KTMInWQAABK5JREFUSA2dVm1sFEUYfmd2b%2Ff2Pkqghn5eEQWKrRgjpkYgpoRCLC0oxV5apAiGUDEpJvwxEQ2raWPU%2BKf8INU%2FRtEedwTCR9tYPloxGNJYTTQUwYqJ1aNpaLH3sXu3t7vjvFevpSqt7eSyM%2B%2FczvM8877PzB3APBoLgoDLsNePF56LBwqa07EKlDGg84CcWsI4CEbhNnDpAd951lXE2NkiNknCCTLv4HtzZuvPm1C%2FIKv4oDNXqNDHragety2XVzjECZsJARuBMyRzJrh1O0gQwLXuxofxsPSj4hG8fMLQo7bl9JJD8XZfC1E5yWFOMtd07dvX5kDwg6%2B2%2B%2BChq8txHGtfPoAp0gOFmhYoNFkHjn2TNUmrwRdna7W1QSkU8hvbGk4uThLrapaiLA2E6QY4u%2FlS9ItHfvJkxYsTMVtnAJLipYIWtVrcdX%2B8%2Bb8IVnPl%2FR81prbuPZ1jpYw%2B0aEUGSkdFsgyBIaFTXCm6nyaxMtJ4n%2BTeDhJzGqZtQZcuYDgqDwDbqb0JF9oRpIG1Oea3bC1Y6N3x%2FWV8Zh83emhCs%2B%2BhlaghDw%2B8w5UlYKq2lU7Pl8IkvS9KDqXmKmEwdMppVPKwGSEilmyAwJhRwWcq7wYC6z4wZ1rrEoMWxecdOjZWXeAQClBcYDN3NwVwD9pGwqUSyQgclcmxpNJqCuwLmDh3WtvPqXdlt%2B6Oz70HPGDNSNBee%2FEOen%2BrGbEFqDENBPDbtdCp0ukPANmzO0QQJYUpyS5IJJI3Hqt4maS%2BEB3199ozm8EDU%2F6fVNU2dQpdx3ZnKzeFXyaUTiasEV%2FgZMzJMjr3Z%2BWvAdQ%2Bhs%2Fzw9savimxUntDSaBdZ2f%2BIdbm1rlNY8esFffBit9HtK5%2FMejsrJVxikOXlb1Ukir2X%2BRbdkd1KG2Ixfn2Ql4JRmELnYK9mEM8G36fAA3xEQ89fxXihC8q%2BsAKi9jhHxNqagY2hiaYgRCm0f0QP7H4Fp11LSXiuBY2aYFlh0DeDIVVFUJQn5rCnpiNI2gvLxHnASn9DIVHJJlm5rXvQAGEo4zvKq2w5G1NxENN7jrft1oxMdekETjxdH2Z3x%2BVTVYsPb%2BO0C%2F9%2FauN6v2hNZw5b2UOmSbG5%2FrkC3LBA%2B1PdxFxORjxpQ81GcxKc%2BybVjEBvUJvaGJ7p7n5A5KSwe4AzkasA%2BcrmzFtowoIVTiLjANm8GDsrWW35ScI3JY8Urv83tnkF8JR0yLvEt2hO%2F0qNyy3Jb3YKeHeHeLeOuVLRpNF%2Bpkf85OW7%2FzJxWdXsbsKBUk2TC0BCPwMq5Q%2FCPvaJFkNS%2F1l1qUPe%2BuH3oD59erYGI%2FY4sce6KaXYElAIOLt%2B0O3t2%2B%2FxJDF1XvOlWGC1W1B8VMszbGfOvT5qaRRAIFK3BCO164nZ0uYLH2YjNN8thXS2v2BK9gTfD7jHVxzHr4roOlEvYYz9QIz%2BVl%2FsLDXInsctFsXjqIRnO2ZO387lxmIboLDZCJ59KLFliNIgh9ipt6tLg9SihpRPDO1ia5byw7de1aCQmF5geOQtK509rzfdwxaKOIq%2B73AvwCC5%2F5fcV4vo3%2B3LpMdtWHh0ywsJC%2FZGoCb8%2F9D8F%2FifgLLl8S8QWfU8cAAAAASUVORK5CYII%3D\">\n  </a>\n</strong>\n</p>\n\nThis package provides everything needed to interact with the OpenTelemetry API, including all TypeScript interfaces, enums, and no-op implementations. It is intended for use both on the server and in the browser.\n\nThe methods in this package perform no operations by default. This means they can be safely called by a library or end-user application whether there is an SDK registered or not. In order to generate and export telemetry data, you will also need an SDK such as the [OpenTelemetry JS SDK][opentelemetry-js].\n\n## Tracing Quick Start\n\n### You Will Need\n\n- An application you wish to instrument\n- [OpenTelemetry JS SDK][opentelemetry-js]\n- Node.js >=8.5.0 (14+ is preferred) or an ECMAScript 5+ compatible browser\n\n**Note:** ECMAScript 5+ compatibility is for this package only. Please refer to the documentation for the SDK you are using to determine its minimum ECMAScript version.\n\n**Note for library authors:** Only your end users will need an OpenTelemetry SDK. If you wish to support OpenTelemetry in your library, you only need to use the OpenTelemetry API. For more information, please read the [tracing documentation][docs-tracing].\n\n### Install Dependencies\n\n```sh\nnpm install @opentelemetry/api @opentelemetry/sdk-trace-base\n```\n\n### Trace Your Application\n\nIn order to get started with tracing, you will need to first register an SDK. The SDK you are using may provide a convenience method which calls the registration methods for you, but if you would like to call them directly they are documented here: [SDK registration methods][docs-sdk-registration].\n\nOnce you have registered an SDK, you can start and end spans. A simple example of basic SDK registration and tracing a simple operation is below. The example should export spans to the console once per second. For more information, see the [tracing documentation][docs-tracing].\n\n```javascript\nconst { trace }  = require(\"@opentelemetry/api\");\nconst { BasicTracerProvider, ConsoleSpanExporter, SimpleSpanProcessor }  = require(\"@opentelemetry/sdk-trace-base\");\n\n// Create and register an SDK\nconst provider = new BasicTracerProvider();\nprovider.addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporter()));\ntrace.setGlobalTracerProvider(provider);\n\n// Acquire a tracer from the global tracer provider which will be used to trace the application\nconst name = 'my-application-name';\nconst version = '0.1.0';\nconst tracer = trace.getTracer(name, version);\n\n// Trace your application by creating spans\nasync function operation() {\n  const span = tracer.startSpan(\"do operation\");\n\n  // mock some work by sleeping 1 second\n  await new Promise((resolve, reject) => {\n    setTimeout(resolve, 1000);\n  })\n\n  span.end();\n}\n\nasync function main() {\n  while (true) {\n    await operation();\n  }\n}\n\nmain();\n```\n\n## Version Compatibility\n\nBecause the npm installer and node module resolution algorithm could potentially allow two or more copies of any given package to exist within the same `node_modules` structure, the OpenTelemetry API takes advantage of a variable on the `global` object to store the global API. When an API method in the API package is called, it checks if this `global` API exists and proxies calls to it if and only if it is a compatible API version. This means if a package has a dependency on an OpenTelemetry API version which is not compatible with the API used by the end user, the package will receive a no-op implementation of the API.\n\n## Upgrade Guidelines\n\n### 0.21.0 to 1.0.0\n\nNo breaking changes\n\n### 0.20.0 to 0.21.0\n\n- [#78](https://github.com/open-telemetry/opentelemetry-js-api/issues/78) `api.context.bind` arguments reversed and `context` is now a required argument.\n- [#46](https://github.com/open-telemetry/opentelemetry-js-api/issues/46) Noop classes and singletons are no longer exported. To create a noop span it is recommended to use `api.trace.wrapSpanContext` with `INVALID_SPAN_CONTEXT` instead of using the `NOOP_TRACER`.\n\n### 1.0.0-rc.3 to 0.20.0\n\n- Removing `TimedEvent` which was not part of spec\n- `HttpBaggage` renamed to `HttpBaggagePropagator`\n- [#45](https://github.com/open-telemetry/opentelemetry-js-api/pull/45) `Span#context` renamed to `Span#spanContext`\n- [#47](https://github.com/open-telemetry/opentelemetry-js-api/pull/47) `getSpan`/`setSpan`/`getSpanContext`/`setSpanContext` moved to `trace` namespace\n- [#55](https://github.com/open-telemetry/opentelemetry-js-api/pull/55) `getBaggage`/`setBaggage`/`createBaggage` moved to `propagation` namespace\n\n## Useful links\n\n- For more information on OpenTelemetry, visit: <https://opentelemetry.io/>\n- For more about OpenTelemetry JavaScript: <https://github.com/open-telemetry/opentelemetry-js>\n- For help or feedback on this project, join us in [GitHub Discussions][discussions-url]\n\n## License\n\nApache 2.0 - See [LICENSE][license-url] for more information.\n\n[opentelemetry-js]: https://github.com/open-telemetry/opentelemetry-js\n\n[discussions-url]: https://github.com/open-telemetry/opentelemetry-js/discussions\n[license-url]: https://github.com/open-telemetry/opentelemetry-js/blob/main/api/LICENSE\n[docs-tracing]: https://github.com/open-telemetry/opentelemetry-js/blob/main/doc/tracing.md\n[docs-sdk-registration]: https://github.com/open-telemetry/opentelemetry-js/blob/main/doc/sdk-registration.md\n","readmeFilename":"README.md"}