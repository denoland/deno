export const snapshot = {};

snapshot[`Plugin - BlockStatement 1`] = `
{
  body: [
    {
      expression: {
        name: "foo",
        optional: false,
        range: [
          3,
          6,
        ],
        type: "Identifier",
        typeAnnotation: null,
      },
      range: [
        3,
        7,
      ],
      type: "ExpressionStatement",
    },
  ],
  range: [
    1,
    9,
  ],
  type: "BlockStatement",
}
`;

snapshot[`Plugin - ContinueStatement 1`] = `
{
  label: null,
  range: [
    1,
    10,
  ],
  type: "ContinueStatement",
}
`;

snapshot[`Plugin - ContinueStatement 2`] = `
{
  label: {
    name: "foo",
    optional: false,
    range: [
      10,
      13,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  range: [
    1,
    14,
  ],
  type: "ContinueStatement",
}
`;

snapshot[`Plugin - DebuggerStatement 1`] = `
{
  range: [
    1,
    10,
  ],
  type: "DebuggerStatement",
}
`;

snapshot[`Plugin - DoWhileStatement 1`] = `
{
  body: {
    body: [],
    range: [
      4,
      6,
    ],
    type: "BlockStatement",
  },
  range: [
    1,
    19,
  ],
  test: {
    name: "foo",
    optional: false,
    range: [
      14,
      17,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  type: "DoWhileStatement",
}
`;

snapshot[`Plugin - ExpressionStatement 1`] = `
{
  expression: {
    name: "foo",
    optional: false,
    range: [
      1,
      4,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  range: [
    1,
    5,
  ],
  type: "ExpressionStatement",
}
`;

snapshot[`Plugin - ForInStatement 1`] = `
{
  body: {
    body: [],
    range: [
      14,
      16,
    ],
    type: "BlockStatement",
  },
  left: {
    name: "a",
    optional: false,
    range: [
      6,
      7,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  range: [
    1,
    16,
  ],
  right: {
    name: "b",
    optional: false,
    range: [
      11,
      12,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  type: "ForInStatement",
}
`;

snapshot[`Plugin - ForOfStatement 1`] = `
{
  await: false,
  body: {
    body: [],
    range: [
      14,
      16,
    ],
    type: "BlockStatement",
  },
  left: {
    name: "a",
    optional: false,
    range: [
      6,
      7,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  range: [
    1,
    16,
  ],
  right: {
    name: "b",
    optional: false,
    range: [
      11,
      12,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  type: "ForOfStatement",
}
`;

snapshot[`Plugin - ForOfStatement 2`] = `
{
  await: true,
  body: {
    body: [],
    range: [
      20,
      22,
    ],
    type: "BlockStatement",
  },
  left: {
    name: "a",
    optional: false,
    range: [
      12,
      13,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  range: [
    1,
    22,
  ],
  right: {
    name: "b",
    optional: false,
    range: [
      17,
      18,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  type: "ForOfStatement",
}
`;

snapshot[`Plugin - ForStatement 1`] = `
{
  body: {
    body: [],
    range: [
      10,
      12,
    ],
    type: "BlockStatement",
  },
  init: null,
  range: [
    1,
    12,
  ],
  test: null,
  type: "ForStatement",
  update: null,
}
`;

snapshot[`Plugin - ForStatement 2`] = `
{
  body: {
    body: [],
    range: [
      15,
      17,
    ],
    type: "BlockStatement",
  },
  init: {
    name: "a",
    optional: false,
    range: [
      6,
      7,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  range: [
    1,
    17,
  ],
  test: {
    name: "b",
    optional: false,
    range: [
      9,
      10,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  type: "ForStatement",
  update: {
    name: "c",
    optional: false,
    range: [
      12,
      13,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
}
`;

snapshot[`Plugin - IfStatement 1`] = `
{
  alternate: null,
  consequent: {
    body: [],
    range: [
      10,
      12,
    ],
    type: "BlockStatement",
  },
  range: [
    1,
    12,
  ],
  test: {
    name: "foo",
    optional: false,
    range: [
      5,
      8,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  type: "IfStatement",
}
`;

snapshot[`Plugin - IfStatement 2`] = `
{
  alternate: {
    body: [],
    range: [
      18,
      20,
    ],
    type: "BlockStatement",
  },
  consequent: {
    body: [],
    range: [
      10,
      12,
    ],
    type: "BlockStatement",
  },
  range: [
    1,
    20,
  ],
  test: {
    name: "foo",
    optional: false,
    range: [
      5,
      8,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  type: "IfStatement",
}
`;

snapshot[`Plugin - LabeledStatement 1`] = `
{
  body: {
    body: [],
    range: [
      6,
      8,
    ],
    type: "BlockStatement",
  },
  label: {
    name: "foo",
    optional: false,
    range: [
      1,
      4,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  range: [
    1,
    8,
  ],
  type: "LabeledStatement",
}
`;

snapshot[`Plugin - ReturnStatement 1`] = `
{
  argument: null,
  range: [
    1,
    7,
  ],
  type: "ReturnStatement",
}
`;

snapshot[`Plugin - ReturnStatement 2`] = `
{
  argument: {
    name: "foo",
    optional: false,
    range: [
      8,
      11,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  range: [
    1,
    12,
  ],
  type: "ReturnStatement",
}
`;

snapshot[`Plugin - SwitchStatement 1`] = `
{
  cases: [
    {
      consequent: [],
      range: [
        22,
        31,
      ],
      test: {
        name: "foo",
        optional: false,
        range: [
          27,
          30,
        ],
        type: "Identifier",
        typeAnnotation: null,
      },
      type: "SwitchCase",
    },
    {
      consequent: [
        {
          label: null,
          range: [
            56,
            62,
          ],
          type: "LabeledStatement",
        },
      ],
      range: [
        38,
        62,
      ],
      test: {
        name: "bar",
        optional: false,
        range: [
          43,
          46,
        ],
        type: "Identifier",
        typeAnnotation: null,
      },
      type: "SwitchCase",
    },
    {
      consequent: [
        {
          body: [],
          range: [
            86,
            88,
          ],
          type: "BlockStatement",
        },
      ],
      range: [
        69,
        88,
      ],
      test: null,
      type: "SwitchCase",
    },
  ],
  discriminant: {
    name: "foo",
    optional: false,
    range: [
      9,
      12,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  range: [
    1,
    94,
  ],
  type: "SwitchStatement",
}
`;

snapshot[`Plugin - ThrowStatement 1`] = `
{
  argument: {
    name: "foo",
    optional: false,
    range: [
      7,
      10,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  range: [
    1,
    11,
  ],
  type: "ThrowStatement",
}
`;

snapshot[`Plugin - TryStatement 1`] = `
{
  block: {
    body: [],
    range: [
      5,
      7,
    ],
    type: "BlockStatement",
  },
  finalizer: null,
  handler: {
    body: {
      body: [],
      range: [
        14,
        16,
      ],
      type: "BlockStatement",
    },
    param: null,
    range: [
      8,
      16,
    ],
    type: "CatchClause",
  },
  range: [
    1,
    16,
  ],
  type: "TryStatement",
}
`;

snapshot[`Plugin - TryStatement 2`] = `
{
  block: {
    body: [],
    range: [
      5,
      7,
    ],
    type: "BlockStatement",
  },
  finalizer: null,
  handler: {
    body: {
      body: [],
      range: [
        18,
        20,
      ],
      type: "BlockStatement",
    },
    param: {
      name: "e",
      optional: false,
      range: [
        15,
        16,
      ],
      type: "Identifier",
      typeAnnotation: null,
    },
    range: [
      8,
      20,
    ],
    type: "CatchClause",
  },
  range: [
    1,
    20,
  ],
  type: "TryStatement",
}
`;

snapshot[`Plugin - TryStatement 3`] = `
{
  block: {
    body: [],
    range: [
      5,
      7,
    ],
    type: "BlockStatement",
  },
  finalizer: {
    body: [],
    range: [
      16,
      18,
    ],
    type: "BlockStatement",
  },
  handler: null,
  range: [
    1,
    18,
  ],
  type: "TryStatement",
}
`;

snapshot[`Plugin - WhileStatement 1`] = `
{
  body: {
    body: [],
    range: [
      13,
      15,
    ],
    type: "BlockStatement",
  },
  range: [
    1,
    15,
  ],
  test: {
    name: "foo",
    optional: false,
    range: [
      8,
      11,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  type: "WhileStatement",
}
`;

snapshot[`Plugin - WithStatement 1`] = `
{
  body: {
    body: [],
    range: [
      11,
      13,
    ],
    type: "BlockStatement",
  },
  object: {
    elements: [],
    range: [
      7,
      9,
    ],
    type: "ArrayExpression",
  },
  range: [
    1,
    13,
  ],
  type: "WithStatement",
}
`;

snapshot[`Plugin - ArrayExpression 1`] = `
{
  elements: [
    {
      elements: [],
      range: [
        2,
        4,
      ],
      type: "ArrayExpression",
    },
  ],
  range: [
    1,
    9,
  ],
  type: "ArrayExpression",
}
`;

snapshot[`Plugin - ArrowFunctionExpression 1`] = `
{
  async: false,
  body: {
    body: [],
    range: [
      7,
      9,
    ],
    type: "BlockStatement",
  },
  generator: false,
  params: [],
  range: [
    1,
    9,
  ],
  returnType: null,
  type: "ArrowFunctionExpression",
  typeParameters: null,
}
`;

snapshot[`Plugin - ArrowFunctionExpression 2`] = `
{
  async: true,
  body: {
    body: [],
    range: [
      13,
      15,
    ],
    type: "BlockStatement",
  },
  generator: false,
  params: [],
  range: [
    1,
    15,
  ],
  returnType: null,
  type: "ArrowFunctionExpression",
  typeParameters: null,
}
`;

snapshot[`Plugin - ArrowFunctionExpression 3`] = `
{
  async: false,
  body: {
    body: [],
    range: [
      34,
      36,
    ],
    type: "BlockStatement",
  },
  generator: false,
  params: [
    {
      name: "a",
      optional: false,
      range: [
        2,
        11,
      ],
      type: "Identifier",
      typeAnnotation: null,
    },
    {
      argument: {
        name: "b",
        optional: false,
        range: [
          16,
          17,
        ],
        type: "Identifier",
        typeAnnotation: null,
      },
      range: [
        13,
        24,
      ],
      type: "RestElement",
      typeAnnotation: {
        range: [
          17,
          24,
        ],
        type: "TSTypeAnnotation",
        typeAnnotation: {
          elementType: {
            range: [
              19,
              22,
            ],
            type: "TSAnyKeyword",
          },
          range: [
            19,
            24,
          ],
          type: "TSArrayType",
        },
      },
    },
  ],
  range: [
    1,
    36,
  ],
  returnType: {
    range: [
      25,
      30,
    ],
    type: "TSTypeAnnotation",
    typeAnnotation: {
      range: [
        27,
        30,
      ],
      type: "TSAnyKeyword",
    },
  },
  type: "ArrowFunctionExpression",
  typeParameters: null,
}
`;

snapshot[`Plugin - AssignmentExpression 1`] = `
{
  left: {
    name: "a",
    optional: false,
    range: [
      1,
      2,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  operator: "=",
  range: [
    1,
    6,
  ],
  right: {
    name: "b",
    optional: false,
    range: [
      5,
      6,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  type: "AssignmentExpression",
}
`;

snapshot[`Plugin - AssignmentExpression 2`] = `
{
  left: {
    name: "a",
    optional: false,
    range: [
      1,
      2,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  operator: "=",
  range: [
    1,
    12,
  ],
  right: {
    left: {
      name: "a",
      optional: false,
      range: [
        5,
        6,
      ],
      type: "Identifier",
      typeAnnotation: null,
    },
    operator: "??=",
    range: [
      5,
      12,
    ],
    right: {
      name: "b",
      optional: false,
      range: [
        11,
        12,
      ],
      type: "Identifier",
      typeAnnotation: null,
    },
    type: "AssignmentExpression",
  },
  type: "AssignmentExpression",
}
`;

snapshot[`Plugin - AwaitExpression 1`] = `
{
  argument: {
    name: "foo",
    optional: false,
    range: [
      7,
      10,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  range: [
    1,
    10,
  ],
  type: "AwaitExpression",
}
`;

snapshot[`Plugin - BinaryExpression 1`] = `
{
  left: {
    name: "a",
    optional: false,
    range: [
      1,
      2,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  operator: ">",
  range: [
    1,
    6,
  ],
  right: {
    name: "b",
    optional: false,
    range: [
      5,
      6,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  type: "BinaryExpression",
}
`;

snapshot[`Plugin - BinaryExpression 2`] = `
{
  left: {
    name: "a",
    optional: false,
    range: [
      1,
      2,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  operator: ">=",
  range: [
    1,
    7,
  ],
  right: {
    name: "b",
    optional: false,
    range: [
      6,
      7,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  type: "BinaryExpression",
}
`;

snapshot[`Plugin - BinaryExpression 3`] = `
{
  left: {
    name: "a",
    optional: false,
    range: [
      1,
      2,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  operator: "<",
  range: [
    1,
    6,
  ],
  right: {
    name: "b",
    optional: false,
    range: [
      5,
      6,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  type: "BinaryExpression",
}
`;

snapshot[`Plugin - BinaryExpression 4`] = `
{
  left: {
    name: "a",
    optional: false,
    range: [
      1,
      2,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  operator: "<=",
  range: [
    1,
    7,
  ],
  right: {
    name: "b",
    optional: false,
    range: [
      6,
      7,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  type: "BinaryExpression",
}
`;

snapshot[`Plugin - BinaryExpression 5`] = `
{
  left: {
    name: "a",
    optional: false,
    range: [
      1,
      2,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  operator: "==",
  range: [
    1,
    7,
  ],
  right: {
    name: "b",
    optional: false,
    range: [
      6,
      7,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  type: "BinaryExpression",
}
`;

snapshot[`Plugin - BinaryExpression 6`] = `
{
  left: {
    name: "a",
    optional: false,
    range: [
      1,
      2,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  operator: "===",
  range: [
    1,
    8,
  ],
  right: {
    name: "b",
    optional: false,
    range: [
      7,
      8,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  type: "BinaryExpression",
}
`;

snapshot[`Plugin - BinaryExpression 7`] = `
{
  left: {
    name: "a",
    optional: false,
    range: [
      1,
      2,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  operator: "!=",
  range: [
    1,
    7,
  ],
  right: {
    name: "b",
    optional: false,
    range: [
      6,
      7,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  type: "BinaryExpression",
}
`;

snapshot[`Plugin - BinaryExpression 8`] = `
{
  left: {
    name: "a",
    optional: false,
    range: [
      1,
      2,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  operator: "!=",
  range: [
    1,
    8,
  ],
  right: {
    name: "b",
    optional: false,
    range: [
      7,
      8,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  type: "BinaryExpression",
}
`;

snapshot[`Plugin - BinaryExpression 9`] = `
{
  left: {
    name: "a",
    optional: false,
    range: [
      1,
      2,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  operator: "<<",
  range: [
    1,
    7,
  ],
  right: {
    name: "b",
    optional: false,
    range: [
      6,
      7,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  type: "BinaryExpression",
}
`;

snapshot[`Plugin - BinaryExpression 10`] = `
{
  left: {
    name: "a",
    optional: false,
    range: [
      1,
      2,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  operator: ">>",
  range: [
    1,
    7,
  ],
  right: {
    name: "b",
    optional: false,
    range: [
      6,
      7,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  type: "BinaryExpression",
}
`;

snapshot[`Plugin - BinaryExpression 11`] = `
{
  left: {
    name: "a",
    optional: false,
    range: [
      1,
      2,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  operator: ">>>",
  range: [
    1,
    8,
  ],
  right: {
    name: "b",
    optional: false,
    range: [
      7,
      8,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  type: "BinaryExpression",
}
`;

snapshot[`Plugin - BinaryExpression 12`] = `
{
  left: {
    name: "a",
    optional: false,
    range: [
      1,
      2,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  operator: "+",
  range: [
    1,
    6,
  ],
  right: {
    name: "b",
    optional: false,
    range: [
      5,
      6,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  type: "BinaryExpression",
}
`;

snapshot[`Plugin - BinaryExpression 13`] = `
{
  left: {
    name: "a",
    optional: false,
    range: [
      1,
      2,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  operator: "-",
  range: [
    1,
    6,
  ],
  right: {
    name: "b",
    optional: false,
    range: [
      5,
      6,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  type: "BinaryExpression",
}
`;

snapshot[`Plugin - BinaryExpression 14`] = `
{
  left: {
    name: "a",
    optional: false,
    range: [
      1,
      2,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  operator: "*",
  range: [
    1,
    6,
  ],
  right: {
    name: "b",
    optional: false,
    range: [
      5,
      6,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  type: "BinaryExpression",
}
`;

snapshot[`Plugin - BinaryExpression 15`] = `
{
  left: {
    name: "a",
    optional: false,
    range: [
      1,
      2,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  operator: "/",
  range: [
    1,
    6,
  ],
  right: {
    name: "b",
    optional: false,
    range: [
      5,
      6,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  type: "BinaryExpression",
}
`;

snapshot[`Plugin - BinaryExpression 16`] = `
{
  left: {
    name: "a",
    optional: false,
    range: [
      1,
      2,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  operator: "%",
  range: [
    1,
    6,
  ],
  right: {
    name: "b",
    optional: false,
    range: [
      5,
      6,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  type: "BinaryExpression",
}
`;

snapshot[`Plugin - BinaryExpression 17`] = `
{
  left: {
    name: "a",
    optional: false,
    range: [
      1,
      2,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  operator: "|",
  range: [
    1,
    6,
  ],
  right: {
    name: "b",
    optional: false,
    range: [
      5,
      6,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  type: "BinaryExpression",
}
`;

snapshot[`Plugin - BinaryExpression 18`] = `
{
  left: {
    name: "a",
    optional: false,
    range: [
      1,
      2,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  operator: "^",
  range: [
    1,
    6,
  ],
  right: {
    name: "b",
    optional: false,
    range: [
      5,
      6,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  type: "BinaryExpression",
}
`;

snapshot[`Plugin - BinaryExpression 19`] = `
{
  left: {
    name: "a",
    optional: false,
    range: [
      1,
      2,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  operator: "&",
  range: [
    1,
    6,
  ],
  right: {
    name: "b",
    optional: false,
    range: [
      5,
      6,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  type: "BinaryExpression",
}
`;

snapshot[`Plugin - BinaryExpression 20`] = `
{
  left: {
    name: "a",
    optional: false,
    range: [
      1,
      2,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  operator: "in",
  range: [
    1,
    7,
  ],
  right: {
    name: "b",
    optional: false,
    range: [
      6,
      7,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  type: "BinaryExpression",
}
`;

snapshot[`Plugin - BinaryExpression 21`] = `
{
  left: {
    name: "a",
    optional: false,
    range: [
      1,
      2,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  operator: "**",
  range: [
    1,
    7,
  ],
  right: {
    name: "b",
    optional: false,
    range: [
      6,
      7,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  type: "BinaryExpression",
}
`;

snapshot[`Plugin - CallExpression 1`] = `
{
  arguments: [],
  callee: {
    name: "foo",
    optional: false,
    range: [
      1,
      4,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  optional: false,
  range: [
    1,
    6,
  ],
  type: "CallExpression",
  typeArguments: null,
}
`;

snapshot[`Plugin - CallExpression 2`] = `
{
  arguments: [
    {
      name: "a",
      optional: false,
      range: [
        5,
        6,
      ],
      type: "Identifier",
      typeAnnotation: null,
    },
    {
      argument: {
        name: "b",
        optional: false,
        range: [
          11,
          12,
        ],
        type: "Identifier",
        typeAnnotation: null,
      },
      range: [
        8,
        11,
      ],
      type: "SpreadElement",
    },
  ],
  callee: {
    name: "foo",
    optional: false,
    range: [
      1,
      4,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  optional: false,
  range: [
    1,
    13,
  ],
  type: "CallExpression",
  typeArguments: null,
}
`;

snapshot[`Plugin - CallExpression 3`] = `
{
  arguments: [],
  callee: {
    name: "foo",
    optional: false,
    range: [
      1,
      4,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  optional: true,
  range: [
    1,
    8,
  ],
  type: "CallExpression",
  typeArguments: null,
}
`;

snapshot[`Plugin - ChainExpression 1`] = `
{
  expression: {
    computed: false,
    object: {
      name: "a",
      optional: false,
      range: [
        1,
        2,
      ],
      type: "Identifier",
      typeAnnotation: null,
    },
    optional: true,
    property: {
      name: "b",
      optional: false,
      range: [
        4,
        5,
      ],
      type: "Identifier",
      typeAnnotation: null,
    },
    range: [
      1,
      5,
    ],
    type: "MemberExpression",
  },
  range: [
    1,
    5,
  ],
  type: "ChainExpression",
}
`;

snapshot[`Plugin - ClassExpression 1`] = `
{
  abstract: false,
  body: {
    body: [],
    range: [
      5,
      13,
    ],
    type: "ClassBody",
  },
  declare: false,
  id: null,
  implements: [],
  range: [
    5,
    13,
  ],
  superClass: null,
  type: "ClassExpression",
}
`;

snapshot[`Plugin - ClassExpression 2`] = `
{
  abstract: false,
  body: {
    body: [],
    range: [
      5,
      17,
    ],
    type: "ClassBody",
  },
  declare: false,
  id: {
    name: "Foo",
    optional: false,
    range: [
      11,
      14,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  implements: [],
  range: [
    5,
    17,
  ],
  superClass: null,
  type: "ClassExpression",
}
`;

snapshot[`Plugin - ClassExpression 3`] = `
{
  abstract: false,
  body: {
    body: [],
    range: [
      5,
      29,
    ],
    type: "ClassBody",
  },
  declare: false,
  id: {
    name: "Foo",
    optional: false,
    range: [
      11,
      14,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  implements: [],
  range: [
    5,
    29,
  ],
  superClass: {
    name: "Bar",
    optional: false,
    range: [
      23,
      26,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  type: "ClassExpression",
}
`;

snapshot[`Plugin - ClassExpression 4`] = `
{
  abstract: false,
  body: {
    body: [],
    range: [
      5,
      50,
    ],
    type: "ClassBody",
  },
  declare: false,
  id: {
    name: "Foo",
    optional: false,
    range: [
      11,
      14,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  implements: [
    {
      expression: {
        name: "Baz",
        optional: false,
        range: [
          38,
          41,
        ],
        type: "Identifier",
        typeAnnotation: null,
      },
      range: [
        38,
        41,
      ],
      type: "TSClassImplements",
      typeArguments: null,
    },
    {
      expression: {
        name: "Baz2",
        optional: false,
        range: [
          43,
          47,
        ],
        type: "Identifier",
        typeAnnotation: null,
      },
      range: [
        43,
        47,
      ],
      type: "TSClassImplements",
      typeArguments: null,
    },
  ],
  range: [
    5,
    50,
  ],
  superClass: {
    name: "Bar",
    optional: false,
    range: [
      23,
      26,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  type: "ClassExpression",
}
`;

snapshot[`Plugin - ClassExpression 5`] = `
{
  abstract: false,
  body: {
    body: [],
    range: [
      5,
      20,
    ],
    type: "ClassBody",
  },
  declare: false,
  id: {
    name: "Foo",
    optional: false,
    range: [
      11,
      14,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  implements: [],
  range: [
    5,
    20,
  ],
  superClass: null,
  type: "ClassExpression",
}
`;

snapshot[`Plugin - ClassExpression 6`] = `
{
  abstract: false,
  body: {
    body: [
      {
        accessibility: undefined,
        computed: false,
        declare: false,
        key: {
          name: "foo",
          optional: false,
          range: [
            13,
            16,
          ],
          type: "Identifier",
          typeAnnotation: null,
        },
        kind: "method",
        optional: false,
        override: false,
        range: [
          13,
          21,
        ],
        static: false,
        type: "MethodDefinition",
        value: {
          async: false,
          body: {
            body: [],
            range: [
              19,
              21,
            ],
            type: "BlockStatement",
          },
          generator: false,
          id: null,
          params: [],
          range: [
            13,
            21,
          ],
          returnType: null,
          type: "FunctionExpression",
          typeParameters: null,
        },
      },
    ],
    range: [
      5,
      23,
    ],
    type: "ClassBody",
  },
  declare: false,
  id: null,
  implements: [],
  range: [
    5,
    23,
  ],
  superClass: null,
  type: "ClassExpression",
}
`;

snapshot[`Plugin - ClassExpression 7`] = `
{
  abstract: false,
  body: {
    body: [
      {
        accessibility: undefined,
        computed: false,
        declare: false,
        key: {
          name: "foo",
          range: [
            13,
            17,
          ],
          type: "PrivateIdentifier",
        },
        kind: "method",
        optional: false,
        override: false,
        range: [
          13,
          22,
        ],
        static: false,
        type: "MethodDefinition",
        value: {
          async: false,
          body: {
            body: [],
            range: [
              20,
              22,
            ],
            type: "BlockStatement",
          },
          generator: false,
          id: null,
          params: [],
          range: [
            13,
            22,
          ],
          returnType: null,
          type: "FunctionExpression",
          typeParameters: null,
        },
      },
    ],
    range: [
      5,
      24,
    ],
    type: "ClassBody",
  },
  declare: false,
  id: null,
  implements: [],
  range: [
    5,
    24,
  ],
  superClass: null,
  type: "ClassExpression",
}
`;

snapshot[`Plugin - ClassExpression 8`] = `
{
  abstract: false,
  body: {
    body: [
      {
        accessibility: undefined,
        computed: false,
        declare: false,
        decorators: [],
        key: {
          name: "foo",
          optional: false,
          range: [
            13,
            16,
          ],
          type: "Identifier",
          typeAnnotation: null,
        },
        optional: false,
        override: false,
        range: [
          13,
          24,
        ],
        readonly: false,
        static: false,
        type: "PropertyDefinition",
        value: null,
      },
    ],
    range: [
      5,
      26,
    ],
    type: "ClassBody",
  },
  declare: false,
  id: null,
  implements: [],
  range: [
    5,
    26,
  ],
  superClass: null,
  type: "ClassExpression",
}
`;

snapshot[`Plugin - ClassExpression 9`] = `
{
  abstract: false,
  body: {
    body: [
      {
        accessibility: undefined,
        computed: false,
        declare: false,
        decorators: [],
        key: {
          name: "foo",
          optional: false,
          range: [
            13,
            16,
          ],
          type: "Identifier",
          typeAnnotation: null,
        },
        optional: false,
        override: false,
        range: [
          13,
          22,
        ],
        readonly: false,
        static: false,
        type: "PropertyDefinition",
        value: {
          name: "bar",
          optional: false,
          range: [
            19,
            22,
          ],
          type: "Identifier",
          typeAnnotation: null,
        },
      },
    ],
    range: [
      5,
      24,
    ],
    type: "ClassBody",
  },
  declare: false,
  id: null,
  implements: [],
  range: [
    5,
    24,
  ],
  superClass: null,
  type: "ClassExpression",
}
`;

snapshot[`Plugin - ClassExpression 10`] = `
{
  abstract: false,
  body: {
    body: [
      {
        accessibility: undefined,
        computed: false,
        declare: false,
        key: {
          name: "constructor",
          optional: false,
          range: [
            13,
            24,
          ],
          type: "Identifier",
          typeAnnotation: null,
        },
        kind: "constructor",
        optional: false,
        override: false,
        range: [
          13,
          47,
        ],
        static: false,
        type: "MethodDefinition",
        value: {
          async: false,
          body: {
            body: [],
            range: [
              45,
              47,
            ],
            type: "BlockStatement",
          },
          generator: false,
          id: null,
          params: [
            {
              accessibility: undefined,
              decorators: [],
              override: false,
              parameter: {
                name: "foo",
                optional: false,
                range: [
                  32,
                  35,
                ],
                type: "Identifier",
                typeAnnotation: {
                  range: [
                    35,
                    43,
                  ],
                  type: "TSTypeAnnotation",
                  typeAnnotation: {
                    range: [
                      37,
                      43,
                    ],
                    type: "TSStringKeyword",
                  },
                },
              },
              range: [
                25,
                43,
              ],
              readonly: false,
              static: false,
              type: "TSParameterProperty",
            },
          ],
          range: [
            13,
            47,
          ],
          returnType: null,
          type: "FunctionExpression",
          typeParameters: null,
        },
      },
    ],
    range: [
      5,
      49,
    ],
    type: "ClassBody",
  },
  declare: false,
  id: null,
  implements: [],
  range: [
    5,
    49,
  ],
  superClass: null,
  type: "ClassExpression",
}
`;

snapshot[`Plugin - ClassExpression 11`] = `
{
  abstract: false,
  body: {
    body: [
      {
        accessibility: undefined,
        computed: false,
        declare: false,
        decorators: [],
        key: {
          name: "foo",
          range: [
            13,
            17,
          ],
          type: "PrivateIdentifier",
        },
        optional: false,
        override: false,
        range: [
          13,
          31,
        ],
        readonly: false,
        static: false,
        type: "PropertyDefinition",
        value: {
          name: "bar",
          optional: false,
          range: [
            28,
            31,
          ],
          type: "Identifier",
          typeAnnotation: null,
        },
      },
    ],
    range: [
      5,
      33,
    ],
    type: "ClassBody",
  },
  declare: false,
  id: null,
  implements: [],
  range: [
    5,
    33,
  ],
  superClass: null,
  type: "ClassExpression",
}
`;

snapshot[`Plugin - ClassExpression 12`] = `
{
  abstract: false,
  body: {
    body: [
      {
        accessibility: undefined,
        computed: false,
        declare: false,
        decorators: [],
        key: {
          name: "foo",
          optional: false,
          range: [
            20,
            23,
          ],
          type: "Identifier",
          typeAnnotation: null,
        },
        optional: false,
        override: false,
        range: [
          13,
          29,
        ],
        readonly: false,
        static: true,
        type: "PropertyDefinition",
        value: {
          name: "bar",
          optional: false,
          range: [
            26,
            29,
          ],
          type: "Identifier",
          typeAnnotation: null,
        },
      },
    ],
    range: [
      5,
      31,
    ],
    type: "ClassBody",
  },
  declare: false,
  id: null,
  implements: [],
  range: [
    5,
    31,
  ],
  superClass: null,
  type: "ClassExpression",
}
`;

snapshot[`Plugin - ClassExpression 13`] = `
{
  abstract: false,
  body: {
    body: [
      {
        accessibility: undefined,
        computed: false,
        declare: false,
        decorators: [],
        key: {
          name: "foo",
          optional: false,
          range: [
            20,
            23,
          ],
          type: "Identifier",
          typeAnnotation: null,
        },
        optional: false,
        override: false,
        range: [
          13,
          24,
        ],
        readonly: false,
        static: true,
        type: "PropertyDefinition",
        value: null,
      },
      {
        body: {
          body: [
            {
              expression: {
                left: {
                  name: "foo",
                  optional: false,
                  range: [
                    34,
                    37,
                  ],
                  type: "Identifier",
                  typeAnnotation: null,
                },
                operator: "=",
                range: [
                  34,
                  43,
                ],
                right: {
                  name: "bar",
                  optional: false,
                  range: [
                    40,
                    43,
                  ],
                  type: "Identifier",
                  typeAnnotation: null,
                },
                type: "AssignmentExpression",
              },
              range: [
                34,
                43,
              ],
              type: "ExpressionStatement",
            },
          ],
          range: [
            32,
            45,
          ],
          type: "BlockStatement",
        },
        range: [
          25,
          45,
        ],
        type: "StaticBlock",
      },
    ],
    range: [
      5,
      47,
    ],
    type: "ClassBody",
  },
  declare: false,
  id: null,
  implements: [],
  range: [
    5,
    47,
  ],
  superClass: null,
  type: "ClassExpression",
}
`;

snapshot[`Plugin - ConditionalExpression 1`] = `
{
  alternate: {
    name: "c",
    optional: false,
    range: [
      9,
      10,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  consequent: {
    name: "b",
    optional: false,
    range: [
      5,
      6,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  range: [
    1,
    10,
  ],
  test: {
    name: "a",
    optional: false,
    range: [
      1,
      2,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  type: "ConditionalExpression",
}
`;

snapshot[`Plugin - FunctionExpression 1`] = `
{
  async: false,
  body: {
    body: [],
    range: [
      17,
      19,
    ],
    type: "BlockStatement",
  },
  generator: false,
  id: null,
  params: [],
  range: [
    5,
    19,
  ],
  returnType: null,
  type: "FunctionExpression",
  typeParameters: null,
}
`;

snapshot[`Plugin - FunctionExpression 2`] = `
{
  async: false,
  body: {
    body: [],
    range: [
      20,
      22,
    ],
    type: "BlockStatement",
  },
  generator: false,
  id: {
    name: "foo",
    optional: false,
    range: [
      14,
      17,
    ],
    type: "Identifier",
    typeAnnotation: null,
  },
  params: [],
  range: [
    5,
    22,
  ],
  returnType: null,
  type: "FunctionExpression",
  typeParameters: null,
}
`;

snapshot[`Plugin - FunctionExpression 3`] = `
{
  async: false,
  body: {
    body: [],
    range: [
      45,
      47,
    ],
    type: "BlockStatement",
  },
  generator: false,
  id: null,
  params: [
    {
      name: "a",
      optional: true,
      range: [
        15,
        16,
      ],
      type: "Identifier",
      typeAnnotation: null,
    },
    {
      argument: {
        name: "b",
        optional: false,
        range: [
          30,
          31,
        ],
        type: "Identifier",
        typeAnnotation: null,
      },
      range: [
        27,
        38,
      ],
      type: "RestElement",
      typeAnnotation: {
        range: [
          31,
          38,
        ],
        type: "TSTypeAnnotation",
        typeAnnotation: {
          elementType: {
            range: [
              33,
              36,
            ],
            type: "TSAnyKeyword",
          },
          range: [
            33,
            38,
          ],
          type: "TSArrayType",
        },
      },
    },
  ],
  range: [
    5,
    47,
  ],
  returnType: {
    range: [
      39,
      44,
    ],
    type: "TSTypeAnnotation",
    typeAnnotation: {
      range: [
        41,
        44,
      ],
      type: "TSAnyKeyword",
    },
  },
  type: "FunctionExpression",
  typeParameters: null,
}
`;

snapshot[`Plugin - FunctionExpression 4`] = `
{
  async: true,
  body: {
    body: [],
    range: [
      24,
      26,
    ],
    type: "BlockStatement",
  },
  generator: true,
  id: null,
  params: [],
  range: [
    5,
    26,
  ],
  returnType: null,
  type: "FunctionExpression",
  typeParameters: null,
}
`;

snapshot[`Plugin - Identifier 1`] = `
{
  name: "a",
  optional: false,
  range: [
    1,
    2,
  ],
  type: "Identifier",
  typeAnnotation: null,
}
`;
